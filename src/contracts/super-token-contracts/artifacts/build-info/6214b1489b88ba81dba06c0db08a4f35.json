{
	"id": "6214b1489b88ba81dba06c0db08a4f35",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.22",
	"solcLongVersion": "0.8.22+commit.4fc1097e",
	"input": {
		"language": "Solidity",
		"sources": {
			"PureSuperToken.sol": {
				"content": "// SPDX-License-Identifier: AGPLv3\npragma solidity ^0.8.0;\n\nimport {SuperTokenBase} from \"./base/SuperTokenBase.sol\";\n\n/// @title Minimal Pure Super Token\n/// @author jtriley.eth\n/// @notice Pre-minted supply. This is includes no custom logic. Used in `PureSuperTokenDeployer`\ncontract PureSuperToken is SuperTokenBase {\n\n\t/// @dev Upgrades the super token with the factory, then initializes.\n    /// @param factory super token factory for initialization\n\t/// @param name super token name\n\t/// @param symbol super token symbol\n\t/// @param receiver Receiver of pre-mint\n\t/// @param initialSupply Initial token supply to pre-mint\n    function initialize(\n        address factory,\n        string memory name,\n        string memory symbol,\n        address receiver,\n        uint256 initialSupply\n    ) external {\n        _initialize(factory, name, symbol);\n        _mint(receiver, initialSupply, \"\");\n    }\n\n}\n"
			},
			"base/SuperTokenBase.sol": {
				"content": "// SPDX-License-Identifier: AGPLv3\npragma solidity ^0.8.0;\n\nimport {SuperTokenStorage} from \"../base/SuperTokenStorage.sol\";\nimport {UUPSProxy} from \"../base/UUPSProxy.sol\";\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ISuperToken} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\";\nimport {ISuperTokenFactory} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\";\n\n/// @title Abstract contract containing a thin layer of abstraction for aux logic.\n/// @author jtriley.eth\n/// @dev The initial supply may be zero, in the event the token is mintable.\n/// Inheriting contracts MUST have an initializer calling this function!\nabstract contract SuperTokenBase is SuperTokenStorage, UUPSProxy {\n\n\t/// @dev Upgrades the super token with the factory, then initializes.\n\t/// @param factory super token factory for initialization\n\t/// @param name super token name\n\t/// @param symbol super token symbol\n\tfunction _initialize(address factory, string memory name, string memory symbol) internal {\n\t\tISuperTokenFactory(factory).initializeCustomSuperToken(address(this));\n\t\tISuperToken(address(this)).initialize(IERC20(address(0)), 18, name, symbol);\n\t}\n\n\t/// @dev Gets totalSupply\n\t/// @return t total supply\n\tfunction _totalSupply() internal view returns (uint256 t) {\n\t\treturn ISuperToken(address(this)).totalSupply();\n\t}\n\n\t/// @dev Internal mint, calling functions should perform important checks!\n\t/// @param account Address receiving minted tokens\n\t/// @param amount Amount of tokens minted\n\t/// @param userData Optional user data for ERC777 send callback\n\tfunction _mint(address account, uint256 amount, bytes memory userData) internal {\n\t\tISuperToken(address(this)).selfMint(account, amount, userData);\n\t}\n\n\t/// @dev Internal burn, calling functions should perform important checks!\n\t/// @param from Address from which to burn tokens\n\t/// @param amount Amount to burn\n\t/// @param userData Optional user data for ERC777 send callback\n\tfunction _burn(address from, uint256 amount, bytes memory userData) internal {\n\t\tISuperToken(address(this)).selfBurn(from, amount, userData);\n\t}\n\n\t/// @dev Internal approve, calling functions should perform important checks!\n\t/// @param account Address of approving party\n\t/// @param spender Address of spending party\n\t/// @param amount Approval amount\n\tfunction _approve(address account, address spender, uint256 amount) internal {\n\t\tISuperToken(address(this)).selfApproveFor(account, spender, amount);\n\t}\n\n\t/// @dev Internal transferFrom, calling functions should perform important checks!\n\t/// @param holder Owner of the tranfserred tokens\n\t/// @param spender Address of spending party (approved/operator)\n\t/// @param recipient Address of recipient party\n\t/// @param amount Amount to be tranfserred\n\tfunction _transferFrom(\n\t\taddress holder,\n\t\taddress spender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) internal {\n\t\tISuperToken(address(this)).selfTransferFrom(holder, spender, recipient, amount);\n\t}\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.11;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\n/**\n * @title Super token factory interface\n * @author Superfluid\n */\ninterface ISuperTokenFactory {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_FACTORY_ALREADY_EXISTS();                 // 0x91d67972\n    error SUPER_TOKEN_FACTORY_DOES_NOT_EXIST();                 // 0x872cac48\n    error SUPER_TOKEN_FACTORY_UNINITIALIZED();                  // 0x1b39b9b4\n    error SUPER_TOKEN_FACTORY_ONLY_HOST();                      // 0x478b8e83\n    error SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED();  // 0xc4901a43\n    error SUPER_TOKEN_FACTORY_ZERO_ADDRESS();                   // 0x305c9e82\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @notice Get the canonical super token logic.\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABLE\n    }\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @param admin Admin address\n     * @return superToken The deployed and initialized wrapper super token\n     */\n    function createERC20Wrapper(\n        IERC20Metadata underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol,\n        address admin\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     */\n    function createERC20Wrapper(\n        IERC20Metadata underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @param admin Admin address\n     * @return superToken The deployed and initialized wrapper super token\n     */\n    function createERC20Wrapper(\n        IERC20Metadata underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol,\n        address admin\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        IERC20Metadata underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n     * @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n     * @param _underlyingToken Underlying ERC20 token\n     * @return ISuperToken the created supertoken\n     */\n    function createCanonicalERC20Wrapper(IERC20Metadata _underlyingToken)\n        external\n        returns (ISuperToken);\n\n    /**\n     * @notice Computes/Retrieves wrapper super token address given the underlying token address\n     * @dev We return from our canonical list if it already exists, otherwise we compute it\n     * @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n     * @param _underlyingToken Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     * @return isDeployed whether the super token is deployed AND set in the canonical mapping\n     */\n    function computeCanonicalERC20WrapperAddress(address _underlyingToken)\n        external\n        view\n        returns (address superTokenAddress, bool isDeployed);\n\n    /**\n     * @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n     * @dev We return the address if it exists and the zero address otherwise\n     * @param _underlyingTokenAddress Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     */\n    function getCanonicalERC20Wrapper(address _underlyingTokenAddress)\n        external\n        view\n        returns (address superTokenAddress);\n\n    /**\n     * @dev Creates a new custom super token\n     * @param customSuperTokenProxy address of the custom supertoken proxy\n     */\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    /**\n      * @dev Super token logic created event\n      * @param tokenLogic Token logic address\n      */\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    /**\n      * @dev Super token created event\n      * @param token Newly created super token address\n      */\n    event SuperTokenCreated(ISuperToken indexed token);\n\n    /**\n      * @dev Custom super token created event\n      * @param token Newly created custom super token address\n      */\n    event CustomSuperTokenCreated(ISuperToken indexed token);\n\n}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.11;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { IERC20, IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IConstantOutflowNFT } from \"./IConstantOutflowNFT.sol\";\nimport { IConstantInflowNFT } from \"./IConstantInflowNFT.sol\";\nimport { IPoolAdminNFT } from \"../agreements/gdav1/IPoolAdminNFT.sol\";\nimport { IPoolMemberNFT } from \"../agreements/gdav1/IPoolMemberNFT.sol\";\n\n/**\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, IERC20Metadata, IERC777 {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER();       // 0xf7f02227\n    error SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT();             // 0xfe737d05\n    error SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED(); // 0xe3e13698\n    error SUPER_TOKEN_NO_UNDERLYING_TOKEN();                     // 0xf79cf656\n    error SUPER_TOKEN_ONLY_SELF();                               // 0x7ffa6648\n    error SUPER_TOKEN_ONLY_ADMIN();                              // 0x0484acab\n    error SUPER_TOKEN_ONLY_GOV_OWNER();                          // 0xd9c7ed08\n    error SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS();               // 0x81638627\n    error SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS();                 // 0xdf070274\n    error SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS();                  // 0xba2ab184\n    error SUPER_TOKEN_MINT_TO_ZERO_ADDRESS();                    // 0x0d243157\n    error SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS();              // 0xeecd6c9b\n    error SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS();                // 0xe219bd39\n    error SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED();               // 0x6bef249d\n\n    /**\n     * @dev Initialize the contract\n     */\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**\n     * @dev Initialize the contract with an admin\n     */\n    function initializeWithAdmin(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s,\n        address admin\n    ) external;\n\n    /**\n     * @notice Changes the admin for the SuperToken\n     * @dev Only the current admin can call this function\n     * if admin is address(0), it is implicitly the host address\n     * @param newAdmin New admin address\n     */\n    function changeAdmin(address newAdmin) external;\n\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\n\n    /**\n     * @dev Returns the admin address for the SuperToken\n     */\n    function getAdmin() external view returns (address admin);\n\n    /**************************************************************************\n    * Immutable variables\n    *************************************************************************/\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CONSTANT_OUTFLOW_NFT() external view returns (IConstantOutflowNFT);\n    // solhint-disable-next-line func-name-mixedcase\n    function CONSTANT_INFLOW_NFT() external view returns (IConstantInflowNFT);\n    // solhint-disable-next-line func-name-mixedcase\n    function POOL_ADMIN_NFT() external view returns (IPoolAdminNFT);\n    // solhint-disable-next-line func-name-mixedcase\n    function POOL_MEMBER_NFT() external view returns (IPoolMemberNFT);\n\n    /**************************************************************************\n    * IERC20Metadata & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, IERC20Metadata) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, IERC20Metadata) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * @custom:note SuperToken always uses 18 decimals.\n     *\n     * This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(IERC20Metadata) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\n     *         zero by default.\n     *\n     * @notice This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:note Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @custom:emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     *         allowance mechanism. `amount` is then deducted from the caller's\n     *         allowance.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     *         means all token operations (creation, movement and destruction) must have\n     *         amounts that are a multiple of this number.\n     *\n     * @custom:note For super token contracts, this value is always 1\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\n     *      the corresponding functions will be called with `userData` and empty\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata userData) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply and transfers the underlying token to the caller's account.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `userData` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata userData) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * @custom:emits an {AuthorizedOperator} event.\n     *\n     * @custom:requirements\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * @custom:emits a {RevokedOperator} event.\n     *\n     * @custom:requirements\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `userData` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `userData` and `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     * If `userData` is not empty, the `tokensReceived` hook is invoked according to ERC777 semantics.\n     *\n     * @custom:modifiers\n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    * If `userData` is not empty, the `tokensToSend` hook is invoked according to ERC777 semantics.\n    *\n    * @custom:modifiers\n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n   /**\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n    * spend tokens of `sender`.\n    *\n    * @custom:modifiers\n    *  - onlySelf\n    */\n   function selfTransferFrom(\n        address sender,\n        address spender,\n        address recipient,\n        uint256 amount\n   ) external;\n\n   /**\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\n    * `account`.\n    *\n    * @custom:modifiers\n    *  - onlySelf\n    */\n   function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Return the underlying token decimals\n     * @return underlyingDecimals Underlying token decimals\n     */\n    function getUnderlyingDecimals() external view returns (uint8 underlyingDecimals);\n\n    /**\n     * @dev Return the underlying token conversion rate\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @return underlyingAmount The underlying token amount after scaling\n     * @return adjustedAmount The super token amount after scaling\n     */\n    function toUnderlyingAmount(uint256 amount)\n        external\n        view\n        returns (uint256 underlyingAmount, uint256 adjustedAmount);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to receive upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param userData User data for the TokensRecipient callback\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     *\n     * @custom:warning\n     * - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n     * @custom:requirements\n     * - if `userData` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient\n     *   otherwise it reverts.\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata userData) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Downgrade SuperToken to ERC20 and transfer immediately\n     * @param to The account to receive downgraded tokens\n     * @param amount Number of tokens to be downgraded (in 18 decimals)\n     */\n    function downgradeTo(address to, uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are downgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * @custom:modifiers\n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    function operationIncreaseAllowance(\n        address account,\n        address spender,\n        uint256 addedValue\n    ) external;\n\n    function operationDecreaseAllowance(\n        address account,\n        address spender,\n        uint256 subtractedValue\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transferFrom by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * @custom:modifiers\n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC777 send by host contract.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    * @param userData Arbitrary user inputted data\n    *\n    * @custom:modifiers\n    *  - onlyHost\n    */\n    function operationSend(\n        address spender,\n        address recipient,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * @custom:modifiers\n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * @custom:modifiers\n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n    // Flow NFT events\n    /**\n     * @dev Constant Outflow NFT proxy created event\n     * @param constantOutflowNFT constant outflow nft address\n     */\n    event ConstantOutflowNFTCreated(\n        IConstantOutflowNFT indexed constantOutflowNFT\n    );\n\n    /**\n     * @dev Constant Inflow NFT proxy created event\n     * @param constantInflowNFT constant inflow nft address\n     */\n    event ConstantInflowNFTCreated(\n        IConstantInflowNFT indexed constantInflowNFT\n    );\n\n    /**\n     * @dev Pool Admin NFT proxy created event\n     * @param poolAdminNFT pool admin nft address\n     */\n    event PoolAdminNFTCreated(\n        IPoolAdminNFT indexed poolAdminNFT\n    );\n\n    /**\n     * @dev Pool Member NFT proxy created event\n     * @param poolMemberNFT pool member nft address\n     */\n    event PoolMemberNFTCreated(\n        IPoolMemberNFT indexed poolMemberNFT\n    );\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"base/UUPSProxy.sol": {
				"content": "// SPDX-License-Identifier: AGPLv3\npragma solidity ^0.8.0;\n\nimport {Proxy} from \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\n/// @title UUPS Proxy implementation contract\n/// @author jtriley.eth\n/// @notice Stores the logic contract's address at the _IMPLEMENTATION_SLOT\n/// @dev `initializeProxy(address)` is called by the Super Token Factory\n/// The call to the factory should be in the same transaction to avoid being\n/// front run\ncontract UUPSProxy is Proxy {\n\t/// @notice Thrown when the logic contract address is zero\n\terror ZeroAddress();\n\n\t/// @notice Thrown when the logic contract has been set\n\terror Initialized();\n\n\t/// @notice Precomputed from the following for gas savings\n\t/// bytes32(uint256(keccak256(\"eip1967.proxy.implementation\") - 1));\n\tbytes32 internal constant _IMPLEMENTATION_SLOT =\n\t\t0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n\t/// @notice Stores the logic contract address only once.\n\t/// @dev Called by the SuperTokenFactory contract on upgrade\n\t/// @param initialAddress logic contract address\n\tfunction initializeProxy(address initialAddress) external {\n\t\tif (initialAddress == address(0)) revert ZeroAddress();\n\t\tif (_implementation() != address(0)) revert Initialized();\n\t\tassembly {\n\t\t\tsstore(_IMPLEMENTATION_SLOT, initialAddress)\n\t\t}\n\t}\n\n\t/// @notice Reads logic contract from precomputed slot\n\t/// @return impl Logic contract address\n\tfunction _implementation()\n\t\tinternal\n\t\tview\n\t\tvirtual\n\t\toverride\n\t\treturns (address impl)\n\t{\n\t\tassembly {\n\t\t\timpl := sload(_IMPLEMENTATION_SLOT)\n\t\t}\n\t}\n}\n"
			},
			"base/SuperTokenStorage.sol": {
				"content": "// SPDX-License-Identifier: AGPLv3\npragma solidity ^0.8.0;\n\n/// @title Abstract Storage Contract to pad the first 32 slots of storage\n/// @author Superfluid\n/// @dev MUST be the FIRST contract inherited to pad the first 32 slots. The slots are padded to\n/// ensure the implementation contract (SuperToken.sol) does not override any auxiliary state\n/// variables. For more info see `./docs/StorageLayout.md`.\nabstract contract SuperTokenStorage {\n    uint256[32] internal _storagePaddings;\n}\n"
			},
			"@openzeppelin/contracts/proxy/Proxy.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.11;\n\nimport { IPoolNFTBase } from \"./IPoolNFTBase.sol\";\n\ninterface IPoolMemberNFT is IPoolNFTBase {\n    // PoolMemberNFTData struct storage packing:\n    // b = bits\n    // WORD 1: | pool   | FREE\n    //         | 160b   | 96b\n    // WORD 2: | member | FREE\n    //         | 160b   | 96b\n    // WORD 3: | units  | FREE\n    //         | 128b   | 128b\n    struct PoolMemberNFTData {\n        address pool;\n        address member;\n        uint128 units;\n    }\n\n    /// Errors ///\n\n    error POOL_MEMBER_NFT_NO_ZERO_POOL();\n    error POOL_MEMBER_NFT_NO_ZERO_MEMBER();\n    error POOL_MEMBER_NFT_NO_UNITS();\n    error POOL_MEMBER_NFT_HAS_UNITS();\n\n    function onCreate(address pool, address member) external;\n\n    function onUpdate(address pool, address member) external;\n\n    function onDelete(address pool, address member) external;\n\n    /// View Functions ///\n\n    function poolMemberDataByTokenId(uint256 tokenId) external view returns (PoolMemberNFTData memory data);\n}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.11;\n\nimport { IPoolNFTBase } from \"./IPoolNFTBase.sol\";\n\ninterface IPoolAdminNFT is IPoolNFTBase {\n    // PoolAdminNFTData struct storage packing:\n    // b = bits\n    // WORD 1: | pool   | FREE\n    //         | 160b   | 96b\n    // WORD 2: | admin  | FREE\n    //         | 160b   | 96b\n    struct PoolAdminNFTData {\n        address pool;\n        address admin;\n    }\n\n    /// Write Functions ///\n    function mint(address pool) external;\n\n    function poolAdminDataByTokenId(uint256 tokenId) external view returns (PoolAdminNFTData memory data);\n}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.11;\n\nimport { IFlowNFTBase } from \"./IFlowNFTBase.sol\";\n\ninterface IConstantInflowNFT is IFlowNFTBase {\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n    error CIF_NFT_ONLY_CONSTANT_OUTFLOW(); // 0xe81ef57a\n\n    /**************************************************************************\n     * Write Functions\n     *************************************************************************/\n\n    /// @notice The mint function emits the \"mint\" `Transfer` event.\n    /// @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n    /// is to inform clients that search for events.\n    /// @param to the flow receiver (inflow NFT receiver)\n    /// @param newTokenId the new token id\n    function mint(address to, uint256 newTokenId) external;\n\n    /// @notice This burn function emits the \"burn\" `Transfer` event.\n    /// @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n    /// is to inform clients that search for events.\n    /// @param tokenId desired token id to burn\n    function burn(uint256 tokenId) external;\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.11;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { IFlowNFTBase } from \"./IFlowNFTBase.sol\";\n\ninterface IConstantOutflowNFT is IFlowNFTBase {\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error COF_NFT_INVALID_SUPER_TOKEN();            // 0x6de98774\n    error COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME(); // 0x0d1d1161\n    error COF_NFT_MINT_TO_ZERO_ADDRESS();           // 0x43d05e51\n    error COF_NFT_ONLY_CONSTANT_INFLOW();           // 0xa495a718\n    error COF_NFT_ONLY_FLOW_AGREEMENTS();           // 0xd367b64f\n    error COF_NFT_TOKEN_ALREADY_EXISTS();           // 0xe2480183\n\n\n    /**************************************************************************\n     * Write Functions\n     *************************************************************************/\n\n    /// @notice The onCreate function is called when a new flow is created.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onCreate(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n\n    /// @notice The onUpdate function is called when a flow is updated.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onUpdate(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n\n    /// @notice The onDelete function is called when a flow is deleted.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onDelete(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n}\n"
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\n     */\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.11;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n/**\n * @title Superfluid token interface\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_TOKEN_AGREEMENT_ALREADY_EXISTS();  // 0xf05521f6\n    error SF_TOKEN_AGREEMENT_DOES_NOT_EXIST();  // 0xdae18809\n    error SF_TOKEN_BURN_INSUFFICIENT_BALANCE(); // 0x10ecdf44\n    error SF_TOKEN_MOVE_INSUFFICIENT_BALANCE(); // 0x2f4cb941\n    error SF_TOKEN_ONLY_LISTED_AGREEMENT();     // 0xc9ff6644\n    error SF_TOKEN_ONLY_HOST();                 // 0xc51efddd\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\n     *\n     * @custom:note \n     * - version: 1\n     * - liquidationType key:\n     *    - 0 = reward account receives reward (PIC period)\n     *    - 1 = liquidator account receives reward (Pleb period)\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\n     */\n    struct LiquidationTypeData {\n        uint256 version;\n        uint8 liquidationType;\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @notice Calculate the realtime balance given the current host.getNow() value\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\n     * @param account for the query\n     * @return availableBalance Real-time balance\n     * @return deposit Account deposit\n     * @return owedDeposit Account owed Deposit\n     */\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @notice Check if account is critical\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @notice Check if account is critical now (current host.getNow())\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @notice Check if account is solvent\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @notice Check if account is solvent now\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @notice Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement created event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement updated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n    /**\n     * @dev Agreement terminated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * @custom:note \n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of an agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @notice Settle balance from an account by the agreement\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Make liquidation payouts (v2)\n     * @param id Agreement ID\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n     * @param targetAccount Account to be liquidated\n     * @param rewardAmount The amount the rewarded account will receive\n     * @param targetAccountBalanceDelta The delta amount the target account balance should change by\n     *\n     * @custom:note \n     * - If a bailout is required (bailoutAmount > 0)\n     *   - the actual reward (single deposit) goes to the executor,\n     *   - while the reward account becomes the bailout account\n     *   - total bailout include: bailout amount + reward amount\n     *   - the targetAccount will be bailed out\n     * - If a bailout is not required\n     *   - the targetAccount will pay the rewardAmount\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function makeLiquidationPayoutsV2\n    (\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount,\n        bool useDefaultRewardAccount,\n        address targetAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta\n    ) external;\n    /**\n     * @dev Agreement liquidation event v2 (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param targetAccount Account of the stream sender\n     * @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n     * @param rewardAmount The amount the reward recipient account balance should change by\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if the agreement is liquidated during the PIC period\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the targetAccount is insolvent\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\n     *   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n     *   - the targetAccount will receive the bailoutAmount\n     */\n    event AgreementLiquidatedV2(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed liquidatorAccount,\n        address indexed targetAccount,\n        address rewardAmountReceiver,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta,\n        bytes liquidationTypeData\n    );\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n    /**************************************************************************\n     * DEPRECATED\n     *************************************************************************/\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.11;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Super agreement interface\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Get the type of the agreement class\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class\n     * @param account Account the state belongs to\n     * @param time Time used for the calculation\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n     * @return deposit Account deposit amount of this agreement\n     * @return owedDeposit Account owed deposit amount of this agreement\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.11;\n\nimport { IERC721Metadata } from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface IFlowNFTBase is IERC721Metadata {\n    // FlowNFTData struct storage packing:\n    // b = bits\n    // WORD 1: | superToken      | FREE\n    //         | 160b            | 96b\n    // WORD 2: | flowSender      | FREE\n    //         | 160b            | 96b\n    // WORD 3: | flowReceiver    | flowStartDate | FREE\n    //         | 160b            | 32b           | 64b\n    struct FlowNFTData {\n        address superToken;\n        address flowSender;\n        address flowReceiver;\n        uint32 flowStartDate;\n    }\n\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();   // 0xa3352582\n    error CFA_NFT_APPROVE_TO_CALLER();                              // 0xd3c77329\n    error CFA_NFT_APPROVE_TO_CURRENT_OWNER();                       // 0xe4790b25\n    error CFA_NFT_INVALID_TOKEN_ID();                               // 0xeab95e3b\n    error CFA_NFT_ONLY_SUPER_TOKEN_FACTORY();                       // 0xebb7505b\n    error CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();  // 0x2551d606\n    error CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER();                  // 0x5a26c744\n    error CFA_NFT_TRANSFER_IS_NOT_ALLOWED();                        // 0xaa747eca\n    error CFA_NFT_TRANSFER_TO_ZERO_ADDRESS();                       // 0xde06d21e\n\n    /**************************************************************************\n     * Events\n     *************************************************************************/\n\n    /// @notice Informs third-party platforms that NFT metadata should be updated\n    /// @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n    /// @param tokenId the id of the token that should have its metadata updated\n    event MetadataUpdate(uint256 tokenId);\n\n    /**************************************************************************\n     * View\n     *************************************************************************/\n\n    /// @notice An external function for querying flow data by `tokenId``\n    /// @param tokenId the token id\n    /// @return flowData the flow data associated with `tokenId`\n    function flowDataByTokenId(\n        uint256 tokenId\n    ) external view returns (FlowNFTData memory flowData);\n\n    /// @notice An external function for computing the deterministic tokenId\n    /// @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n    /// @param superToken the super token\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    /// @return tokenId the tokenId\n    function getTokenId(\n        address superToken,\n        address flowSender,\n        address flowReceiver\n    ) external view returns (uint256);\n\n    /**************************************************************************\n     * Write\n     *************************************************************************/\n\n    function initialize(\n        string memory nftName,\n        string memory nftSymbol\n    ) external; // initializer;\n\n    function triggerMetadataUpdate(uint256 tokenId) external;\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol": {
				"content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >=0.8.4;\n\nimport { IERC721Metadata } from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface IPoolNFTBase is IERC721Metadata {\n    error POOL_NFT_APPROVE_TO_CALLER();                             // 0x9212b333\n    error POOL_NFT_ONLY_SUPER_TOKEN_FACTORY();                      // 0x1fd7e3d8\n    error POOL_NFT_INVALID_TOKEN_ID();                              // 0x09275994\n    error POOL_NFT_APPROVE_TO_CURRENT_OWNER();                      // 0x020226d3\n    error POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();  // 0x1e82f255\n    error POOL_NFT_NOT_REGISTERED_POOL();                           // 0x6421912e\n    error POOL_NFT_TRANSFER_NOT_ALLOWED();                          // 0x432fb160\n    error POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL(); // 0x4028ee0e\n\n    /// @notice Informs third-party platforms that NFT metadata should be updated\n    /// @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n    /// @param tokenId the id of the token that should have its metadata updated\n    event MetadataUpdate(uint256 tokenId);\n\n    function initialize(string memory nftName, string memory nftSymbol) external; // initializer;\n\n    function triggerMetadataUpdate(uint256 tokenId) external;\n\n    /// @notice Gets the token id\n    /// @dev For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member\n    function getTokenId(address pool, address account) external view returns (uint256 tokenId);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/proxy/Proxy.sol": {
				"Proxy": {
					"abi": [
						{
							"stateMutability": "payable",
							"type": "fallback"
						}
					],
					"devdoc": {
						"details": "This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac\",\"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"IERC777": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "AuthorizedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Burned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "RevokedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Sent",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "authorizeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultOperators",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "granularity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "isOperatorFor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "revokeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "send",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.",
						"events": {
							"AuthorizedOperator(address,address)": {
								"details": "Emitted when `operator` is made operator for `tokenHolder`."
							},
							"Burned(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"Minted(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"RevokedOperator(address,address)": {
								"details": "Emitted when `operator` is revoked its operator status for `tokenHolder`."
							}
						},
						"kind": "dev",
						"methods": {
							"authorizeOperator(address)": {
								"details": "Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by an account (`owner`)."
							},
							"burn(uint256,bytes)": {
								"details": "Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens."
							},
							"defaultOperators()": {
								"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
							},
							"granularity()": {
								"details": "Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1."
							},
							"isOperatorFor(address,address)": {
								"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"operatorBurn(address,uint256,bytes,bytes)": {
								"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`."
							},
							"operatorSend(address,address,uint256,bytes,bytes)": {
								"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
							},
							"revokeOperator(address)": {
								"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address."
							},
							"send(address,uint256,bytes)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"authorizeOperator(address)": "959b8c3f",
							"balanceOf(address)": "70a08231",
							"burn(uint256,bytes)": "fe9d9303",
							"defaultOperators()": "06e48538",
							"granularity()": "556f0dc7",
							"isOperatorFor(address,address)": "d95b6371",
							"name()": "06fdde03",
							"operatorBurn(address,uint256,bytes,bytes)": "fc673c4f",
							"operatorSend(address,address,uint256,bytes,bytes)": "62ad1b83",
							"revokeOperator(address)": "fad8b32a",
							"send(address,uint256,bytes)": "9bd9bbc6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.\",\"events\":{\"AuthorizedOperator(address,address)\":{\"details\":\"Emitted when `operator` is made operator for `tokenHolder`.\"},\"Burned(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"Minted(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"RevokedOperator(address,address)\":{\"details\":\"Emitted when `operator` is revoked its operator status for `tokenHolder`.\"}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address)\":{\"details\":\"Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`owner`).\"},\"burn(uint256,bytes)\":{\"details\":\"Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens.\"},\"defaultOperators()\":{\"details\":\"Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.\"},\"granularity()\":{\"details\":\"Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1.\"},\"isOperatorFor(address,address)\":{\"details\":\"Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operatorBurn(address,uint256,bytes,bytes)\":{\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\"},\"revokeOperator(address)\":{\"details\":\"Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address.\"},\"send(address,uint256,bytes)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":\"IERC777\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol": {
				"IPoolAdminNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_NOT_REGISTERED_POOL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_TRANSFER_NOT_ALLOWED",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "poolAdminDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "pool",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "admin",
											"type": "address"
										}
									],
									"internalType": "struct IPoolAdminNFT.PoolAdminNFTData",
									"name": "data",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address)": {
								"details": "For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member"
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address)": "b943855e",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint(address)": "6a627842",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"poolAdminDataByTokenId(uint256)": "38e26666",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_NOT_REGISTERED_POOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_TRANSFER_NOT_ALLOWED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"poolAdminDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"internalType\":\"struct IPoolAdminNFT.PoolAdminNFTData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address)\":{\"details\":\"For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"getTokenId(address,address)\":{\"notice\":\"Gets the token id\"},\"mint(address)\":{\"notice\":\"Write Functions ///\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol\":\"IPoolAdminNFT\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol\":{\"keccak256\":\"0x114cbccfd652231eb5454ab9c4cfe0d3a7427943dee0cce72d88160f12ed8505\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0837cc47bcd635ab470e336e9448fc1160531220aa8a1d55cea39bbee43af6ab\",\"dweb:/ipfs/QmbpaZcVmSsCeoE3j494TmbWzFriKgUR4TsTK5BwjvxRCw\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":{\"keccak256\":\"0x1e5604256c5dd52f969b46feea0d708bde11c1a481bf7c50e33c67fd5dbf4262\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7c6c57094abc70ef32b2844b9df403e2c0ca7cee57a90f87038f2f071f7683\",\"dweb:/ipfs/QmSfBSuh3LWKJ3CcfPkVVnxy4uUsaXhgFMU1X7CA5Ym7wS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"getTokenId(address,address)": {
								"notice": "Gets the token id"
							},
							"mint(address)": {
								"notice": "Write Functions ///"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol": {
				"IPoolMemberNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "POOL_MEMBER_NFT_HAS_UNITS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_MEMBER_NFT_NO_UNITS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_MEMBER_NFT_NO_ZERO_MEMBER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_MEMBER_NFT_NO_ZERO_POOL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_NOT_REGISTERED_POOL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_TRANSFER_NOT_ALLOWED",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "member",
									"type": "address"
								}
							],
							"name": "onCreate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "member",
									"type": "address"
								}
							],
							"name": "onDelete",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "member",
									"type": "address"
								}
							],
							"name": "onUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "poolMemberDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "pool",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "member",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "units",
											"type": "uint128"
										}
									],
									"internalType": "struct IPoolMemberNFT.PoolMemberNFTData",
									"name": "data",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address)": {
								"details": "For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member"
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address)": "b943855e",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"onCreate(address,address)": "f1391f73",
							"onDelete(address,address)": "b62b3646",
							"onUpdate(address,address)": "0447a2cd",
							"ownerOf(uint256)": "6352211e",
							"poolMemberDataByTokenId(uint256)": "3bda0594",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT_HAS_UNITS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT_NO_UNITS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT_NO_ZERO_MEMBER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT_NO_ZERO_POOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_NOT_REGISTERED_POOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_TRANSFER_NOT_ALLOWED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"onCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"onDelete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"poolMemberDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"units\",\"type\":\"uint128\"}],\"internalType\":\"struct IPoolMemberNFT.PoolMemberNFTData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address)\":{\"details\":\"For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"POOL_MEMBER_NFT_NO_ZERO_POOL()\":[{\"notice\":\"Errors ///\"}]},\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"getTokenId(address,address)\":{\"notice\":\"Gets the token id\"},\"poolMemberDataByTokenId(uint256)\":{\"notice\":\"View Functions ///\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol\":\"IPoolMemberNFT\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol\":{\"keccak256\":\"0x5a52452b00db96398759f1a2017ed8d76390730cb16a0d3e143b1fc7c5b99bed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f3a7c1f327fde03f63058d196f48472f69c0314e77214c6d3661f4b1b85ff99\",\"dweb:/ipfs/Qmf8mJJnPqDPqmDKiofqEhrDFwo9d4zWt5NsToqSH5F6mL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":{\"keccak256\":\"0x1e5604256c5dd52f969b46feea0d708bde11c1a481bf7c50e33c67fd5dbf4262\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7c6c57094abc70ef32b2844b9df403e2c0ca7cee57a90f87038f2f071f7683\",\"dweb:/ipfs/QmSfBSuh3LWKJ3CcfPkVVnxy4uUsaXhgFMU1X7CA5Ym7wS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"POOL_MEMBER_NFT_NO_ZERO_POOL()": [
								{
									"notice": "Errors ///"
								}
							]
						},
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"getTokenId(address,address)": {
								"notice": "Gets the token id"
							},
							"poolMemberDataByTokenId(uint256)": {
								"notice": "View Functions ///"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol": {
				"IPoolNFTBase": {
					"abi": [
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_NOT_REGISTERED_POOL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "POOL_NFT_TRANSFER_NOT_ALLOWED",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address)": {
								"details": "For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member"
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address)": "b943855e",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_NOT_REGISTERED_POOL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POOL_NFT_TRANSFER_NOT_ALLOWED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address)\":{\"details\":\"For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"getTokenId(address,address)\":{\"notice\":\"Gets the token id\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":\"IPoolNFTBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":{\"keccak256\":\"0x1e5604256c5dd52f969b46feea0d708bde11c1a481bf7c50e33c67fd5dbf4262\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7c6c57094abc70ef32b2844b9df403e2c0ca7cee57a90f87038f2f071f7683\",\"dweb:/ipfs/QmSfBSuh3LWKJ3CcfPkVVnxy4uUsaXhgFMU1X7CA5Ym7wS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"getTokenId(address,address)": {
								"notice": "Gets the token id"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"IConstantInflowNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CIF_NFT_ONLY_CONSTANT_OUTFLOW",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "newTokenId",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"details": "We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.",
								"params": {
									"tokenId": "desired token id to burn"
								}
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint(address,uint256)": {
								"details": "We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.",
								"params": {
									"newTokenId": "the new token id",
									"to": "the flow receiver (inflow NFT receiver)"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CIF_NFT_ONLY_CONSTANT_OUTFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.\",\"params\":{\"tokenId\":\"desired token id to burn\"}},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint(address,uint256)\":{\"details\":\"We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.\",\"params\":{\"newTokenId\":\"the new token id\",\"to\":\"the flow receiver (inflow NFT receiver)\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"This burn function emits the \\\"burn\\\" `Transfer` event.\"},\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"mint(address,uint256)\":{\"notice\":\"The mint function emits the \\\"mint\\\" `Transfer` event.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":\"IConstantInflowNFT\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0xb219bf31e236fe6c2968ecf0f6c3eb24cb6774aaf4fcc83252e9b06bba718f33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c09b0ffff8630ba6a86cdcd17f1ac65f8ba4e5b296e0320d945943e156fdf839\",\"dweb:/ipfs/QmPkBBJBYyYg1xxM4wRKdEpGK3b1beYeKoM6THzYb3qjM7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d\",\"dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "This burn function emits the \"burn\" `Transfer` event."
							},
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							},
							"mint(address,uint256)": {
								"notice": "The mint function emits the \"mint\" `Transfer` event."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"IConstantOutflowNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_INVALID_SUPER_TOKEN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_ONLY_CONSTANT_INFLOW",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_TOKEN_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onCreate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onDelete",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"onCreate(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"onDelete(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"onUpdate(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"onCreate(address,address,address)": "f7e3d983",
							"onDelete(address,address,address)": "ef1f0237",
							"onUpdate(address,address,address)": "eb54a7ca",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_INVALID_SUPER_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_CONSTANT_INFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_FLOW_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_TOKEN_ALREADY_EXISTS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onDelete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"onCreate(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"onDelete(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"onUpdate(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"onCreate(address,address,address)\":{\"notice\":\"The onCreate function is called when a new flow is created.\"},\"onDelete(address,address,address)\":{\"notice\":\"The onDelete function is called when a flow is deleted.\"},\"onUpdate(address,address,address)\":{\"notice\":\"The onUpdate function is called when a flow is updated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":\"IConstantOutflowNFT\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x15799c1552fa7aad4c1a7197451cd02422a6c768b236ab2904e72f7158a4a2c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c62bb88c0c43ad162c8c226aede16a75c352738aaaf6794fa0c2881dcf59ad42\",\"dweb:/ipfs/QmeWQdFDvzbN8JrCRSRRnZEuw5EbWVzRLM2duhJ515QUXK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d\",\"dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06\",\"dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1\",\"dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							},
							"onCreate(address,address,address)": {
								"notice": "The onCreate function is called when a new flow is created."
							},
							"onDelete(address,address,address)": {
								"notice": "The onDelete function is called when a flow is deleted."
							},
							"onUpdate(address,address,address)": {
								"notice": "The onUpdate function is called when a flow is updated."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"IFlowNFTBase": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":\"IFlowNFTBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d\",\"dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ISuperAgreement": {
					"abi": [
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "Get the type of the agreement class"
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							}
						},
						"title": "Super agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"Get the type of the agreement class\"},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}}},\"title\":\"Super agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":\"ISuperAgreement\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06\",\"dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1\",\"dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"ISuperToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_MINT_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NO_UNDERLYING_TOKEN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_ADMIN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_GOV_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_SELF",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldAdmin",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "AdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "AuthorizedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Burned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IConstantInflowNFT",
									"name": "constantInflowNFT",
									"type": "address"
								}
							],
							"name": "ConstantInflowNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IConstantOutflowNFT",
									"name": "constantOutflowNFT",
									"type": "address"
								}
							],
							"name": "ConstantOutflowNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IPoolAdminNFT",
									"name": "poolAdminNFT",
									"type": "address"
								}
							],
							"name": "PoolAdminNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IPoolMemberNFT",
									"name": "poolMemberNFT",
									"type": "address"
								}
							],
							"name": "PoolMemberNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "RevokedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Sent",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenDowngraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "CONSTANT_INFLOW_NFT",
							"outputs": [
								{
									"internalType": "contract IConstantInflowNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "CONSTANT_OUTFLOW_NFT",
							"outputs": [
								{
									"internalType": "contract IConstantOutflowNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "POOL_ADMIN_NFT",
							"outputs": [
								{
									"internalType": "contract IPoolAdminNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "POOL_MEMBER_NFT",
							"outputs": [
								{
									"internalType": "contract IPoolMemberNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "authorizeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newAdmin",
									"type": "address"
								}
							],
							"name": "changeAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultOperators",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "downgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "downgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAdmin",
							"outputs": [
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getUnderlyingDecimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getUnderlyingToken",
							"outputs": [
								{
									"internalType": "address",
									"name": "tokenAddr",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "granularity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "n",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "s",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "n",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "s",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "initializeWithAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "isOperatorFor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationApprove",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "operationDecreaseAllowance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationDowngrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "operationIncreaseAllowance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "operationSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationUpgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "revokeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "selfApproveFor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "selfBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "selfMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "selfTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "send",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "toUnderlyingAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "underlyingAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "adjustedAmount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "transferAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "upgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementCreated(address,bytes32,bytes32[])": {
								"details": "Agreement created event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"AgreementLiquidated(address,bytes32,address,address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAccount": "Account that collect the reward",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"custom:note": " Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"bailoutAmount": "Amount of liquidation bailouot",
									"bondAccount": "Account that collect the reward or bailout accounts",
									"id": "Agreement ID",
									"liquidatorAccount": "Account of the agent that performed the liquidation.",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": {
								"custom:note": " Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount",
								"details": "Agreement liquidation event v2 (including agent account)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"liquidationTypeData": "The encoded liquidation type data including the version (how to decode)",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the reward recipient account balance should change by",
									"rewardAmountReceiver": "Account that collects the reward or bails out insolvent accounts",
									"targetAccount": "Account of the stream sender",
									"targetAccountBalanceDelta": "The amount the sender account balance should change by"
								}
							},
							"AgreementStateUpdated(address,address,uint256)": {
								"details": "Agreement account state updated event",
								"params": {
									"account": "Account updated",
									"agreementClass": "Contract address of the agreement",
									"slotId": "slot id of the agreement state"
								}
							},
							"AgreementTerminated(address,bytes32)": {
								"details": "Agreement terminated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								}
							},
							"AgreementUpdated(address,bytes32,bytes32[])": {
								"details": "Agreement updated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"AuthorizedOperator(address,address)": {
								"details": "Emitted when `operator` is made operator for `tokenHolder`."
							},
							"Bailout(address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"bailoutAccount": "Account that bailout the penalty account",
									"bailoutAmount": "Amount of account bailout"
								}
							},
							"Burned(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"ConstantInflowNFTCreated(address)": {
								"details": "Constant Inflow NFT proxy created event",
								"params": {
									"constantInflowNFT": "constant inflow nft address"
								}
							},
							"ConstantOutflowNFTCreated(address)": {
								"details": "Constant Outflow NFT proxy created event",
								"params": {
									"constantOutflowNFT": "constant outflow nft address"
								}
							},
							"Minted(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"PoolAdminNFTCreated(address)": {
								"details": "Pool Admin NFT proxy created event",
								"params": {
									"poolAdminNFT": "pool admin nft address"
								}
							},
							"PoolMemberNFTCreated(address)": {
								"details": "Pool Member NFT proxy created event",
								"params": {
									"poolMemberNFT": "pool member nft address"
								}
							},
							"RevokedOperator(address,address)": {
								"details": "Emitted when `operator` is revoked its operator status for `tokenHolder`."
							},
							"TokenDowngraded(address,uint256)": {
								"details": "Token downgrade event",
								"params": {
									"account": "Account whose tokens are downgraded",
									"amount": "Amount of tokens downgraded"
								}
							},
							"TokenUpgraded(address,uint256)": {
								"details": "Token upgrade event",
								"params": {
									"account": "Account where tokens are upgraded to",
									"amount": "Amount of tokens upgraded (in 18 decimals)"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default."
							},
							"approve(address,uint256)": {
								"custom:emits": "an {Approval} event.",
								"custom:note": "Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"authorizeOperator(address)": {
								"custom:emits": "an {AuthorizedOperator} event.",
								"custom:requirements": "- `operator` cannot be calling address.",
								"details": "Make an account an operator of the caller. See {isOperatorFor}."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by an account (`owner`)."
							},
							"burn(uint256,bytes)": {
								"custom:emits": "a {Burned} event.",
								"custom:requirements": "- the caller must have at least `amount` tokens.",
								"details": "Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `userData` and empty `operatorData`. See {IERC777Sender}."
							},
							"changeAdmin(address)": {
								"details": "Only the current admin can call this function if admin is address(0), it is implicitly the host address",
								"params": {
									"newAdmin": "New admin address"
								}
							},
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"decimals()": {
								"custom:note": "SuperToken always uses 18 decimals. This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.",
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called."
							},
							"decreaseAllowance(address,uint256)": {
								"custom:emits": "an {Approval} event indicating the updated allowance.",
								"custom:requirements": "- `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.",
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}."
							},
							"defaultOperators()": {
								"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
							},
							"downgrade(uint256)": {
								"details": "Downgrade SuperToken to ERC20.It will call transfer to send tokens",
								"params": {
									"amount": "Number of tokens to be downgraded"
								}
							},
							"downgradeTo(address,uint256)": {
								"details": "Downgrade SuperToken to ERC20 and transfer immediately",
								"params": {
									"amount": "Number of tokens to be downgraded (in 18 decimals)",
									"to": "The account to receive downgraded tokens"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAdmin()": {
								"details": "Returns the admin address for the SuperToken"
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"getUnderlyingDecimals()": {
								"details": "Return the underlying token decimals",
								"returns": {
									"underlyingDecimals": "Underlying token decimals"
								}
							},
							"getUnderlyingToken()": {
								"details": "Return the underlying token contract",
								"returns": {
									"tokenAddr": "Underlying token address"
								}
							},
							"granularity()": {
								"custom:note": "For super token contracts, this value is always 1",
								"details": "Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number."
							},
							"increaseAllowance(address,uint256)": {
								"custom:emits": "an {Approval} event indicating the updated allowance.",
								"custom:requirements": "- `spender` cannot be the zero address.",
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}."
							},
							"initialize(address,uint8,string,string)": {
								"details": "Initialize the contract"
							},
							"initializeWithAdmin(address,uint8,string,string,address)": {
								"details": "Initialize the contract with an admin"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isOperatorFor(address,address)": {
								"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"operationApprove(address,address,uint256)": {
								"custom:modifiers": "- onlyHost",
								"details": "Perform ERC20 approve by host contract.",
								"params": {
									"account": "The account owner to be approved.",
									"amount": "Number of tokens to be approved.",
									"spender": "The spender of account owner's funds."
								}
							},
							"operationDowngrade(address,uint256)": {
								"custom:modifiers": "- onlyHost",
								"details": "Downgrade ERC20 to SuperToken by host contract.",
								"params": {
									"account": "The account to be changed.",
									"amount": "Number of tokens to be downgraded (in 18 decimals)"
								}
							},
							"operationSend(address,address,uint256,bytes)": {
								"custom:modifiers": "- onlyHost",
								"details": "Perform ERC777 send by host contract.",
								"params": {
									"amount": "Number of tokens to be transferred.",
									"recipient": "The recipient of the funds.",
									"spender": "The account where the funds is sent from.",
									"userData": "Arbitrary user inputted data"
								}
							},
							"operationTransferFrom(address,address,address,uint256)": {
								"custom:modifiers": "- onlyHost",
								"details": "Perform ERC20 transferFrom by host contract.",
								"params": {
									"account": "The account to spend sender's funds.",
									"amount": "Number of tokens to be transferred.",
									"recipient": "The recipient of the funds.",
									"spender": "The account where the funds is sent from."
								}
							},
							"operationUpgrade(address,uint256)": {
								"custom:modifiers": "- onlyHost",
								"details": "Upgrade ERC20 to SuperToken by host contract.",
								"params": {
									"account": "The account to be changed.",
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								}
							},
							"operatorBurn(address,uint256,bytes,bytes)": {
								"custom:emits": "a {Burned} event.",
								"custom:requirements": "- `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.",
								"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `userData` and `operatorData`. See {IERC777Sender}."
							},
							"operatorSend(address,address,uint256,bytes,bytes)": {
								"custom:emits": "a {Sent} event.",
								"custom:requirements": "- `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.",
								"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `userData` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}."
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"revokeOperator(address)": {
								"custom:emits": "a {RevokedOperator} event.",
								"custom:requirements": "- `operator` cannot be calling address.",
								"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}."
							},
							"selfApproveFor(address,address,uint256)": {
								"custom:modifiers": "- onlySelf",
								"details": "Give `spender`, `amount` allowance to spend the tokens of `account`."
							},
							"selfBurn(address,uint256,bytes)": {
								"custom:modifiers": "- onlySelf",
								"details": "Burn existing tokens for the account If `userData` is not empty, the `tokensToSend` hook is invoked according to ERC777 semantics."
							},
							"selfMint(address,uint256,bytes)": {
								"custom:modifiers": "- onlySelf",
								"details": "Mint new tokens for the account If `userData` is not empty, the `tokensReceived` hook is invoked according to ERC777 semantics."
							},
							"selfTransferFrom(address,address,address,uint256)": {
								"custom:modifiers": "- onlySelf",
								"details": "Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`."
							},
							"send(address,uint256,bytes)": {
								"custom:emits": "a {Sent} event.",
								"custom:requirements": "- the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.",
								"details": "Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `userData` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}."
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"toUnderlyingAmount(uint256)": {
								"details": "Return the underlying token conversion rate",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								},
								"returns": {
									"adjustedAmount": "The super token amount after scaling",
									"underlyingAmount": "The underlying token amount after scaling"
								}
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"custom:emits": "a {Transfer} event.",
								"details": "Moves `amount` tokens from the caller's account to `recipient`.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"transferAll(address)": {
								"details": "Transfer all available balance from `msg.sender` to `recipient`"
							},
							"transferFrom(address,address,uint256)": {
								"custom:emits": "a {Transfer} event.",
								"details": "Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							},
							"upgrade(uint256)": {
								"custom:note": "It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract",
								"details": "Upgrade ERC20 to SuperToken.",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								}
							},
							"upgradeTo(address,uint256,bytes)": {
								"custom:note": "It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract",
								"custom:requirements": "- if `userData` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient   otherwise it reverts.",
								"custom:warning": "- there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.",
								"details": "Upgrade ERC20 to SuperToken and transfer immediately",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)",
									"to": "The account to receive upgraded tokens",
									"userData": "User data for the TokensRecipient callback"
								}
							}
						},
						"title": "Super token (Superfluid Token + ERC20 + ERC777) interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"CONSTANT_INFLOW_NFT()": "4c5c0c85",
							"CONSTANT_OUTFLOW_NFT()": "ef43d2c6",
							"POOL_ADMIN_NFT()": "b20db1ac",
							"POOL_MEMBER_NFT()": "f5a8b4dd",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"authorizeOperator(address)": "959b8c3f",
							"balanceOf(address)": "70a08231",
							"burn(uint256,bytes)": "fe9d9303",
							"changeAdmin(address)": "8f283970",
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"defaultOperators()": "06e48538",
							"downgrade(uint256)": "11bcc81e",
							"downgradeTo(address,uint256)": "83ba2525",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAdmin()": "6e9960c3",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"getUnderlyingDecimals()": "92081a47",
							"getUnderlyingToken()": "ee719bc8",
							"granularity()": "556f0dc7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(address,uint8,string,string)": "42fe0980",
							"initializeWithAdmin(address,uint8,string,string,address)": "ec0d6343",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"isOperatorFor(address,address)": "d95b6371",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"name()": "06fdde03",
							"operationApprove(address,address,uint256)": "62aa5287",
							"operationDecreaseAllowance(address,address,uint256)": "c780fd82",
							"operationDowngrade(address,uint256)": "245887fc",
							"operationIncreaseAllowance(address,address,uint256)": "4b2763b3",
							"operationSend(address,address,uint256,bytes)": "ca0c1e7f",
							"operationTransferFrom(address,address,address,uint256)": "16d055d6",
							"operationUpgrade(address,uint256)": "ca789464",
							"operatorBurn(address,uint256,bytes,bytes)": "fc673c4f",
							"operatorSend(address,address,uint256,bytes,bytes)": "62ad1b83",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"revokeOperator(address)": "fad8b32a",
							"selfApproveFor(address,address,uint256)": "66a12fb6",
							"selfBurn(address,uint256,bytes)": "9d876741",
							"selfMint(address,uint256,bytes)": "c68d4283",
							"selfTransferFrom(address,address,address,uint256)": "41b706be",
							"send(address,uint256,bytes)": "9bd9bbc6",
							"settleBalance(address,int256)": "cf97256d",
							"symbol()": "95d89b41",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"toUnderlyingAmount(uint256)": "282a050b",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAll(address)": "a3a7e7f3",
							"transferFrom(address,address,uint256)": "23b872dd",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e",
							"upgrade(uint256)": "45977d03",
							"upgradeTo(address,uint256,bytes)": "5b9d09cc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NO_UNDERLYING_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_ADMIN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_GOV_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_SELF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"constantInflowNFT\",\"type\":\"address\"}],\"name\":\"ConstantInflowNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConstantOutflowNFT\",\"name\":\"constantOutflowNFT\",\"type\":\"address\"}],\"name\":\"ConstantOutflowNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPoolAdminNFT\",\"name\":\"poolAdminNFT\",\"type\":\"address\"}],\"name\":\"PoolAdminNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPoolMemberNFT\",\"name\":\"poolMemberNFT\",\"type\":\"address\"}],\"name\":\"PoolMemberNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDowngraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONSTANT_INFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONSTANT_OUTFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantOutflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ADMIN_NFT\",\"outputs\":[{\"internalType\":\"contract IPoolAdminNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_MEMBER_NFT\",\"outputs\":[{\"internalType\":\"contract IPoolMemberNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initializeWithAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"operationDecreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationDowngrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"operationIncreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"operationSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfApproveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"selfBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"selfMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toUnderlyingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementCreated(address,bytes32,bytes32[])\":{\"details\":\"Agreement created event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"AgreementLiquidated(address,bytes32,address,address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAccount\":\"Account that collect the reward\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"custom:note\":\" Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"bailoutAmount\":\"Amount of liquidation bailouot\",\"bondAccount\":\"Account that collect the reward or bailout accounts\",\"id\":\"Agreement ID\",\"liquidatorAccount\":\"Account of the agent that performed the liquidation.\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)\":{\"custom:note\":\" Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount\",\"details\":\"Agreement liquidation event v2 (including agent account)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"liquidationTypeData\":\"The encoded liquidation type data including the version (how to decode)\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the reward recipient account balance should change by\",\"rewardAmountReceiver\":\"Account that collects the reward or bails out insolvent accounts\",\"targetAccount\":\"Account of the stream sender\",\"targetAccountBalanceDelta\":\"The amount the sender account balance should change by\"}},\"AgreementStateUpdated(address,address,uint256)\":{\"details\":\"Agreement account state updated event\",\"params\":{\"account\":\"Account updated\",\"agreementClass\":\"Contract address of the agreement\",\"slotId\":\"slot id of the agreement state\"}},\"AgreementTerminated(address,bytes32)\":{\"details\":\"Agreement terminated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"}},\"AgreementUpdated(address,bytes32,bytes32[])\":{\"details\":\"Agreement updated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"AuthorizedOperator(address,address)\":{\"details\":\"Emitted when `operator` is made operator for `tokenHolder`.\"},\"Bailout(address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"bailoutAccount\":\"Account that bailout the penalty account\",\"bailoutAmount\":\"Amount of account bailout\"}},\"Burned(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"ConstantInflowNFTCreated(address)\":{\"details\":\"Constant Inflow NFT proxy created event\",\"params\":{\"constantInflowNFT\":\"constant inflow nft address\"}},\"ConstantOutflowNFTCreated(address)\":{\"details\":\"Constant Outflow NFT proxy created event\",\"params\":{\"constantOutflowNFT\":\"constant outflow nft address\"}},\"Minted(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"PoolAdminNFTCreated(address)\":{\"details\":\"Pool Admin NFT proxy created event\",\"params\":{\"poolAdminNFT\":\"pool admin nft address\"}},\"PoolMemberNFTCreated(address)\":{\"details\":\"Pool Member NFT proxy created event\",\"params\":{\"poolMemberNFT\":\"pool member nft address\"}},\"RevokedOperator(address,address)\":{\"details\":\"Emitted when `operator` is revoked its operator status for `tokenHolder`.\"},\"TokenDowngraded(address,uint256)\":{\"details\":\"Token downgrade event\",\"params\":{\"account\":\"Account whose tokens are downgraded\",\"amount\":\"Amount of tokens downgraded\"}},\"TokenUpgraded(address,uint256)\":{\"details\":\"Token upgrade event\",\"params\":{\"account\":\"Account where tokens are upgraded to\",\"amount\":\"Amount of tokens upgraded (in 18 decimals)\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.\"},\"approve(address,uint256)\":{\"custom:emits\":\"an {Approval} event.\",\"custom:note\":\"Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"authorizeOperator(address)\":{\"custom:emits\":\"an {AuthorizedOperator} event.\",\"custom:requirements\":\"- `operator` cannot be calling address.\",\"details\":\"Make an account an operator of the caller. See {isOperatorFor}.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`owner`).\"},\"burn(uint256,bytes)\":{\"custom:emits\":\"a {Burned} event.\",\"custom:requirements\":\"- the caller must have at least `amount` tokens.\",\"details\":\"Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `userData` and empty `operatorData`. See {IERC777Sender}.\"},\"changeAdmin(address)\":{\"details\":\"Only the current admin can call this function if admin is address(0), it is implicitly the host address\",\"params\":{\"newAdmin\":\"New admin address\"}},\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"decimals()\":{\"custom:note\":\"SuperToken always uses 18 decimals. This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\",\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.\"},\"decreaseAllowance(address,uint256)\":{\"custom:emits\":\"an {Approval} event indicating the updated allowance.\",\"custom:requirements\":\"- `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\",\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\"},\"defaultOperators()\":{\"details\":\"Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.\"},\"downgrade(uint256)\":{\"details\":\"Downgrade SuperToken to ERC20.It will call transfer to send tokens\",\"params\":{\"amount\":\"Number of tokens to be downgraded\"}},\"downgradeTo(address,uint256)\":{\"details\":\"Downgrade SuperToken to ERC20 and transfer immediately\",\"params\":{\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\",\"to\":\"The account to receive downgraded tokens\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAdmin()\":{\"details\":\"Returns the admin address for the SuperToken\"},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"getUnderlyingDecimals()\":{\"details\":\"Return the underlying token decimals\",\"returns\":{\"underlyingDecimals\":\"Underlying token decimals\"}},\"getUnderlyingToken()\":{\"details\":\"Return the underlying token contract\",\"returns\":{\"tokenAddr\":\"Underlying token address\"}},\"granularity()\":{\"custom:note\":\"For super token contracts, this value is always 1\",\"details\":\"Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.\"},\"increaseAllowance(address,uint256)\":{\"custom:emits\":\"an {Approval} event indicating the updated allowance.\",\"custom:requirements\":\"- `spender` cannot be the zero address.\",\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\"},\"initialize(address,uint8,string,string)\":{\"details\":\"Initialize the contract\"},\"initializeWithAdmin(address,uint8,string,string,address)\":{\"details\":\"Initialize the contract with an admin\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isOperatorFor(address,address)\":{\"details\":\"Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.\"},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operationApprove(address,address,uint256)\":{\"custom:modifiers\":\"- onlyHost\",\"details\":\"Perform ERC20 approve by host contract.\",\"params\":{\"account\":\"The account owner to be approved.\",\"amount\":\"Number of tokens to be approved.\",\"spender\":\"The spender of account owner's funds.\"}},\"operationDowngrade(address,uint256)\":{\"custom:modifiers\":\"- onlyHost\",\"details\":\"Downgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\"}},\"operationSend(address,address,uint256,bytes)\":{\"custom:modifiers\":\"- onlyHost\",\"details\":\"Perform ERC777 send by host contract.\",\"params\":{\"amount\":\"Number of tokens to be transferred.\",\"recipient\":\"The recipient of the funds.\",\"spender\":\"The account where the funds is sent from.\",\"userData\":\"Arbitrary user inputted data\"}},\"operationTransferFrom(address,address,address,uint256)\":{\"custom:modifiers\":\"- onlyHost\",\"details\":\"Perform ERC20 transferFrom by host contract.\",\"params\":{\"account\":\"The account to spend sender's funds.\",\"amount\":\"Number of tokens to be transferred.\",\"recipient\":\"The recipient of the funds.\",\"spender\":\"The account where the funds is sent from.\"}},\"operationUpgrade(address,uint256)\":{\"custom:modifiers\":\"- onlyHost\",\"details\":\"Upgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"operatorBurn(address,uint256,bytes,bytes)\":{\"custom:emits\":\"a {Burned} event.\",\"custom:requirements\":\"- `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.\",\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `userData` and `operatorData`. See {IERC777Sender}.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"custom:emits\":\"a {Sent} event.\",\"custom:requirements\":\"- `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\",\"details\":\"Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `userData` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\"},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"revokeOperator(address)\":{\"custom:emits\":\"a {RevokedOperator} event.\",\"custom:requirements\":\"- `operator` cannot be calling address.\",\"details\":\"Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.\"},\"selfApproveFor(address,address,uint256)\":{\"custom:modifiers\":\"- onlySelf\",\"details\":\"Give `spender`, `amount` allowance to spend the tokens of `account`.\"},\"selfBurn(address,uint256,bytes)\":{\"custom:modifiers\":\"- onlySelf\",\"details\":\"Burn existing tokens for the account If `userData` is not empty, the `tokensToSend` hook is invoked according to ERC777 semantics.\"},\"selfMint(address,uint256,bytes)\":{\"custom:modifiers\":\"- onlySelf\",\"details\":\"Mint new tokens for the account If `userData` is not empty, the `tokensReceived` hook is invoked according to ERC777 semantics.\"},\"selfTransferFrom(address,address,address,uint256)\":{\"custom:modifiers\":\"- onlySelf\",\"details\":\"Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.\"},\"send(address,uint256,bytes)\":{\"custom:emits\":\"a {Sent} event.\",\"custom:requirements\":\"- the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\",\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `userData` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\"},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"toUnderlyingAmount(uint256)\":{\"details\":\"Return the underlying token conversion rate\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"},\"returns\":{\"adjustedAmount\":\"The super token amount after scaling\",\"underlyingAmount\":\"The underlying token amount after scaling\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"custom:emits\":\"a {Transfer} event.\",\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"transferAll(address)\":{\"details\":\"Transfer all available balance from `msg.sender` to `recipient`\"},\"transferFrom(address,address,uint256)\":{\"custom:emits\":\"a {Transfer} event.\",\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}},\"upgrade(uint256)\":{\"custom:note\":\"It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract\",\"details\":\"Upgrade ERC20 to SuperToken.\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"upgradeTo(address,uint256,bytes)\":{\"custom:note\":\"It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract\",\"custom:requirements\":\"- if `userData` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient   otherwise it reverts.\",\"custom:warning\":\"- there is potential of reentrancy IF the \\\"to\\\" account is a registered ERC777 recipient.\",\"details\":\"Upgrade ERC20 to SuperToken and transfer immediately\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\",\"to\":\"The account to receive upgraded tokens\",\"userData\":\"User data for the TokensRecipient callback\"}}},\"title\":\"Super token (Superfluid Token + ERC20 + ERC777) interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"This value changes when {approve} or {transferFrom} are called.\"},\"changeAdmin(address)\":{\"notice\":\"Changes the admin for the SuperToken\"},\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":\"ISuperToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol\":{\"keccak256\":\"0x114cbccfd652231eb5454ab9c4cfe0d3a7427943dee0cce72d88160f12ed8505\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0837cc47bcd635ab470e336e9448fc1160531220aa8a1d55cea39bbee43af6ab\",\"dweb:/ipfs/QmbpaZcVmSsCeoE3j494TmbWzFriKgUR4TsTK5BwjvxRCw\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol\":{\"keccak256\":\"0x5a52452b00db96398759f1a2017ed8d76390730cb16a0d3e143b1fc7c5b99bed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f3a7c1f327fde03f63058d196f48472f69c0314e77214c6d3661f4b1b85ff99\",\"dweb:/ipfs/Qmf8mJJnPqDPqmDKiofqEhrDFwo9d4zWt5NsToqSH5F6mL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":{\"keccak256\":\"0x1e5604256c5dd52f969b46feea0d708bde11c1a481bf7c50e33c67fd5dbf4262\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7c6c57094abc70ef32b2844b9df403e2c0ca7cee57a90f87038f2f071f7683\",\"dweb:/ipfs/QmSfBSuh3LWKJ3CcfPkVVnxy4uUsaXhgFMU1X7CA5Ym7wS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0xb219bf31e236fe6c2968ecf0f6c3eb24cb6774aaf4fcc83252e9b06bba718f33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c09b0ffff8630ba6a86cdcd17f1ac65f8ba4e5b296e0320d945943e156fdf839\",\"dweb:/ipfs/QmPkBBJBYyYg1xxM4wRKdEpGK3b1beYeKoM6THzYb3qjM7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x15799c1552fa7aad4c1a7197451cd02422a6c768b236ab2904e72f7158a4a2c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c62bb88c0c43ad162c8c226aede16a75c352738aaaf6794fa0c2881dcf59ad42\",\"dweb:/ipfs/QmeWQdFDvzbN8JrCRSRRnZEuw5EbWVzRLM2duhJ515QUXK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d\",\"dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06\",\"dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb37442187735f9a8d6e18d736a5418b1ef6cf8c811fa694d6605ba27a0b9268e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23d7b247a89335a222271af46a62e139aaaa96ba8f74efb03a2bf20d3437e69b\",\"dweb:/ipfs/QmcBn8zmLuDhZDsNydLhx3oJ1vYri2vQKWdDF4KQn2oFi6\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1\",\"dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"allowance(address,address)": {
								"notice": "This value changes when {approve} or {transferFrom} are called."
							},
							"changeAdmin(address)": {
								"notice": "Changes the admin for the SuperToken"
							},
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"ISuperTokenFactory": {
					"abi": [
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_UNINITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "CustomSuperTokenCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SuperTokenCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "tokenLogic",
									"type": "address"
								}
							],
							"name": "SuperTokenLogicCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_underlyingToken",
									"type": "address"
								}
							],
							"name": "computeCanonicalERC20WrapperAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "superTokenAddress",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "isDeployed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20Metadata",
									"name": "_underlyingToken",
									"type": "address"
								}
							],
							"name": "createCanonicalERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20Metadata",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20Metadata",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20Metadata",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20Metadata",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "admin",
									"type": "address"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_underlyingTokenAddress",
									"type": "address"
								}
							],
							"name": "getCanonicalERC20Wrapper",
							"outputs": [
								{
									"internalType": "address",
									"name": "superTokenAddress",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenLogic",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "customSuperTokenProxy",
									"type": "address"
								}
							],
							"name": "initializeCustomSuperToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"CustomSuperTokenCreated(address)": {
								"details": "Custom super token created event",
								"params": {
									"token": "Newly created custom super token address"
								}
							},
							"SuperTokenCreated(address)": {
								"details": "Super token created event",
								"params": {
									"token": "Newly created super token address"
								}
							},
							"SuperTokenLogicCreated(address)": {
								"details": "Super token logic created event",
								"params": {
									"tokenLogic": "Token logic address"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"computeCanonicalERC20WrapperAddress(address)": {
								"details": "We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens",
								"params": {
									"_underlyingToken": "Underlying ERC20 token address"
								},
								"returns": {
									"isDeployed": "whether the super token is deployed AND set in the canonical mapping",
									"superTokenAddress": "Super token address"
								}
							},
							"createCanonicalERC20Wrapper(address)": {
								"details": "salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))",
								"params": {
									"_underlyingToken": "Underlying ERC20 token"
								},
								"returns": {
									"_0": "ISuperToken the created supertoken"
								}
							},
							"createERC20Wrapper(address,uint8,string,string)": {
								"params": {
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token NOTE: - It assumes token provide the .decimals() function"
								}
							},
							"createERC20Wrapper(address,uint8,string,string,address)": {
								"params": {
									"admin": "Admin address",
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token"
								}
							},
							"createERC20Wrapper(address,uint8,uint8,string,string)": {
								"params": {
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingDecimals": "Underlying token decimals",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token"
								}
							},
							"createERC20Wrapper(address,uint8,uint8,string,string,address)": {
								"params": {
									"admin": "Admin address",
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingDecimals": "Underlying token decimals",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token"
								}
							},
							"getCanonicalERC20Wrapper(address)": {
								"details": "We return the address if it exists and the zero address otherwise",
								"params": {
									"_underlyingTokenAddress": "Underlying ERC20 token address"
								},
								"returns": {
									"superTokenAddress": "Super token address"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"initialize()": {
								"details": "Initialize the contract"
							},
							"initializeCustomSuperToken(address)": {
								"details": "Creates a new custom super token",
								"params": {
									"customSuperTokenProxy": "address of the custom supertoken proxy"
								}
							}
						},
						"title": "Super token factory interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"computeCanonicalERC20WrapperAddress(address)": "bab74c89",
							"createCanonicalERC20Wrapper(address)": "151188dc",
							"createERC20Wrapper(address,uint8,string,string)": "431f1481",
							"createERC20Wrapper(address,uint8,string,string,address)": "6c684bb0",
							"createERC20Wrapper(address,uint8,uint8,string,string)": "a6d0c534",
							"createERC20Wrapper(address,uint8,uint8,string,string,address)": "e094be24",
							"getCanonicalERC20Wrapper(address)": "eff0a89d",
							"getHost()": "20bc4425",
							"getSuperTokenLogic()": "9470a5b2",
							"initialize()": "8129fc1c",
							"initializeCustomSuperToken(address)": "d412d344"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_UNINITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CustomSuperTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SuperTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"tokenLogic\",\"type\":\"address\"}],\"name\":\"SuperTokenLogicCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"computeCanonicalERC20WrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"createCanonicalERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingTokenAddress\",\"type\":\"address\"}],\"name\":\"getCanonicalERC20Wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenLogic\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customSuperTokenProxy\",\"type\":\"address\"}],\"name\":\"initializeCustomSuperToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"CustomSuperTokenCreated(address)\":{\"details\":\"Custom super token created event\",\"params\":{\"token\":\"Newly created custom super token address\"}},\"SuperTokenCreated(address)\":{\"details\":\"Super token created event\",\"params\":{\"token\":\"Newly created super token address\"}},\"SuperTokenLogicCreated(address)\":{\"details\":\"Super token logic created event\",\"params\":{\"tokenLogic\":\"Token logic address\"}}},\"kind\":\"dev\",\"methods\":{\"computeCanonicalERC20WrapperAddress(address)\":{\"details\":\"We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\",\"params\":{\"_underlyingToken\":\"Underlying ERC20 token address\"},\"returns\":{\"isDeployed\":\"whether the super token is deployed AND set in the canonical mapping\",\"superTokenAddress\":\"Super token address\"}},\"createCanonicalERC20Wrapper(address)\":{\"details\":\"salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\",\"params\":{\"_underlyingToken\":\"Underlying ERC20 token\"},\"returns\":{\"_0\":\"ISuperToken the created supertoken\"}},\"createERC20Wrapper(address,uint8,string,string)\":{\"params\":{\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token NOTE: - It assumes token provide the .decimals() function\"}},\"createERC20Wrapper(address,uint8,string,string,address)\":{\"params\":{\"admin\":\"Admin address\",\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token\"}},\"createERC20Wrapper(address,uint8,uint8,string,string)\":{\"params\":{\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingDecimals\":\"Underlying token decimals\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token\"}},\"createERC20Wrapper(address,uint8,uint8,string,string,address)\":{\"params\":{\"admin\":\"Admin address\",\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingDecimals\":\"Underlying token decimals\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token\"}},\"getCanonicalERC20Wrapper(address)\":{\"details\":\"We return the address if it exists and the zero address otherwise\",\"params\":{\"_underlyingTokenAddress\":\"Underlying ERC20 token address\"},\"returns\":{\"superTokenAddress\":\"Super token address\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"initialize()\":{\"details\":\"Initialize the contract\"},\"initializeCustomSuperToken(address)\":{\"details\":\"Creates a new custom super token\",\"params\":{\"customSuperTokenProxy\":\"address of the custom supertoken proxy\"}}},\"title\":\"Super token factory interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeCanonicalERC20WrapperAddress(address)\":{\"notice\":\"Computes/Retrieves wrapper super token address given the underlying token address\"},\"createCanonicalERC20Wrapper(address)\":{\"notice\":\"Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\"},\"createERC20Wrapper(address,uint8,string,string)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token with extra token info\"},\"createERC20Wrapper(address,uint8,string,string,address)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token\"},\"createERC20Wrapper(address,uint8,uint8,string,string)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token\"},\"createERC20Wrapper(address,uint8,uint8,string,string,address)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token\"},\"getCanonicalERC20Wrapper(address)\":{\"notice\":\"Gets the canonical ERC20 wrapper super token address given the underlying token address\"},\"getSuperTokenLogic()\":{\"notice\":\"Get the canonical super token logic.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":\"ISuperTokenFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol\":{\"keccak256\":\"0x114cbccfd652231eb5454ab9c4cfe0d3a7427943dee0cce72d88160f12ed8505\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0837cc47bcd635ab470e336e9448fc1160531220aa8a1d55cea39bbee43af6ab\",\"dweb:/ipfs/QmbpaZcVmSsCeoE3j494TmbWzFriKgUR4TsTK5BwjvxRCw\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol\":{\"keccak256\":\"0x5a52452b00db96398759f1a2017ed8d76390730cb16a0d3e143b1fc7c5b99bed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f3a7c1f327fde03f63058d196f48472f69c0314e77214c6d3661f4b1b85ff99\",\"dweb:/ipfs/Qmf8mJJnPqDPqmDKiofqEhrDFwo9d4zWt5NsToqSH5F6mL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":{\"keccak256\":\"0x1e5604256c5dd52f969b46feea0d708bde11c1a481bf7c50e33c67fd5dbf4262\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7c6c57094abc70ef32b2844b9df403e2c0ca7cee57a90f87038f2f071f7683\",\"dweb:/ipfs/QmSfBSuh3LWKJ3CcfPkVVnxy4uUsaXhgFMU1X7CA5Ym7wS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0xb219bf31e236fe6c2968ecf0f6c3eb24cb6774aaf4fcc83252e9b06bba718f33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c09b0ffff8630ba6a86cdcd17f1ac65f8ba4e5b296e0320d945943e156fdf839\",\"dweb:/ipfs/QmPkBBJBYyYg1xxM4wRKdEpGK3b1beYeKoM6THzYb3qjM7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x15799c1552fa7aad4c1a7197451cd02422a6c768b236ab2904e72f7158a4a2c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c62bb88c0c43ad162c8c226aede16a75c352738aaaf6794fa0c2881dcf59ad42\",\"dweb:/ipfs/QmeWQdFDvzbN8JrCRSRRnZEuw5EbWVzRLM2duhJ515QUXK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d\",\"dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06\",\"dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb37442187735f9a8d6e18d736a5418b1ef6cf8c811fa694d6605ba27a0b9268e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23d7b247a89335a222271af46a62e139aaaa96ba8f74efb03a2bf20d3437e69b\",\"dweb:/ipfs/QmcBn8zmLuDhZDsNydLhx3oJ1vYri2vQKWdDF4KQn2oFi6\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x85b2cae18114b9253080a6f237eb10b5bd47b696ea4ac6f2c6fde17ab09758e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c1324d63067436949c181c27b9fff9f29b4ec4ae142d57a6a8b6eeee481c548\",\"dweb:/ipfs/QmVBdQZEa6icdz4wabr3LDD7BifebmjnvtBDZTGSy2EMds\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1\",\"dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"computeCanonicalERC20WrapperAddress(address)": {
								"notice": "Computes/Retrieves wrapper super token address given the underlying token address"
							},
							"createCanonicalERC20Wrapper(address)": {
								"notice": "Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists"
							},
							"createERC20Wrapper(address,uint8,string,string)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token with extra token info"
							},
							"createERC20Wrapper(address,uint8,string,string,address)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token"
							},
							"createERC20Wrapper(address,uint8,uint8,string,string)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token"
							},
							"createERC20Wrapper(address,uint8,uint8,string,string,address)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token"
							},
							"getCanonicalERC20Wrapper(address)": {
								"notice": "Gets the canonical ERC20 wrapper super token address given the underlying token address"
							},
							"getSuperTokenLogic()": {
								"notice": "Get the canonical super token logic."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ISuperfluidToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementCreated(address,bytes32,bytes32[])": {
								"details": "Agreement created event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"AgreementLiquidated(address,bytes32,address,address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAccount": "Account that collect the reward",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"custom:note": " Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"bailoutAmount": "Amount of liquidation bailouot",
									"bondAccount": "Account that collect the reward or bailout accounts",
									"id": "Agreement ID",
									"liquidatorAccount": "Account of the agent that performed the liquidation.",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": {
								"custom:note": " Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount",
								"details": "Agreement liquidation event v2 (including agent account)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"liquidationTypeData": "The encoded liquidation type data including the version (how to decode)",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the reward recipient account balance should change by",
									"rewardAmountReceiver": "Account that collects the reward or bails out insolvent accounts",
									"targetAccount": "Account of the stream sender",
									"targetAccountBalanceDelta": "The amount the sender account balance should change by"
								}
							},
							"AgreementStateUpdated(address,address,uint256)": {
								"details": "Agreement account state updated event",
								"params": {
									"account": "Account updated",
									"agreementClass": "Contract address of the agreement",
									"slotId": "slot id of the agreement state"
								}
							},
							"AgreementTerminated(address,bytes32)": {
								"details": "Agreement terminated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								}
							},
							"AgreementUpdated(address,bytes32,bytes32[])": {
								"details": "Agreement updated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"Bailout(address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"bailoutAccount": "Account that bailout the penalty account",
									"bailoutAmount": "Amount of account bailout"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							}
						},
						"title": "Superfluid token interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"settleBalance(address,int256)": "cf97256d",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementCreated(address,bytes32,bytes32[])\":{\"details\":\"Agreement created event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"AgreementLiquidated(address,bytes32,address,address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAccount\":\"Account that collect the reward\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"custom:note\":\" Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"bailoutAmount\":\"Amount of liquidation bailouot\",\"bondAccount\":\"Account that collect the reward or bailout accounts\",\"id\":\"Agreement ID\",\"liquidatorAccount\":\"Account of the agent that performed the liquidation.\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)\":{\"custom:note\":\" Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount\",\"details\":\"Agreement liquidation event v2 (including agent account)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"liquidationTypeData\":\"The encoded liquidation type data including the version (how to decode)\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the reward recipient account balance should change by\",\"rewardAmountReceiver\":\"Account that collects the reward or bails out insolvent accounts\",\"targetAccount\":\"Account of the stream sender\",\"targetAccountBalanceDelta\":\"The amount the sender account balance should change by\"}},\"AgreementStateUpdated(address,address,uint256)\":{\"details\":\"Agreement account state updated event\",\"params\":{\"account\":\"Account updated\",\"agreementClass\":\"Contract address of the agreement\",\"slotId\":\"slot id of the agreement state\"}},\"AgreementTerminated(address,bytes32)\":{\"details\":\"Agreement terminated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"}},\"AgreementUpdated(address,bytes32,bytes32[])\":{\"details\":\"Agreement updated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"Bailout(address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"bailoutAccount\":\"Account that bailout the penalty account\",\"bailoutAmount\":\"Amount of account bailout\"}}},\"kind\":\"dev\",\"methods\":{\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}}},\"title\":\"Superfluid token interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":\"ISuperfluidToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06\",\"dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1\",\"dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"PureSuperToken.sol": {
				"PureSuperToken": {
					"abi": [
						{
							"inputs": [],
							"name": "Initialized",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddress",
							"type": "error"
						},
						{
							"stateMutability": "payable",
							"type": "fallback"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "factory",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "initialSupply",
									"type": "uint256"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialAddress",
									"type": "address"
								}
							],
							"name": "initializeProxy",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "jtriley.eth",
						"kind": "dev",
						"methods": {
							"initialize(address,string,string,address,uint256)": {
								"details": "Upgrades the super token with the factory, then initializes.",
								"params": {
									"factory": "super token factory for initialization",
									"initialSupply": "Initial token supply to pre-mint",
									"name": "super token name",
									"receiver": "Receiver of pre-mint",
									"symbol": "super token symbol"
								}
							},
							"initializeProxy(address)": {
								"details": "Called by the SuperTokenFactory contract on upgrade",
								"params": {
									"initialAddress": "logic contract address"
								}
							}
						},
						"title": "Minimal Pure Super Token",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"PureSuperToken.sol\":277:905  contract PureSuperToken is SuperTokenBase {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"PureSuperToken.sol\":277:905  contract PureSuperToken is SuperTokenBase {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x4a0687ef\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x75b30be6\n      eq\n      tag_4\n      jumpi\n      jump(tag_2)\n    tag_1:\n    tag_2:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2649:2660  _fallback() */\n      tag_7\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2649:2658  _fallback */\n      tag_8\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2649:2660  _fallback() */\n      jump\t// in\n    tag_7:\n        /* \"PureSuperToken.sol\":277:905  contract PureSuperToken is SuperTokenBase {... */\n      stop\n        /* \"base/UUPSProxy.sol\":1049:1295  function initializeProxy(address initialAddress) external {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_9:\n      pop\n      tag_10\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_11\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_11:\n      tag_13\n      jump\t// in\n    tag_10:\n      stop\n        /* \"PureSuperToken.sol\":632:902  function initialize(... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      pop\n      tag_15\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      tag_18\n      jump\t// in\n    tag_15:\n      stop\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2323:2406  function _fallback() internal virtual {... */\n    tag_8:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2371:2399  _delegate(_implementation()) */\n      tag_20\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2381:2398  _implementation() */\n      tag_21\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2381:2396  _implementation */\n      tag_22\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2381:2398  _implementation() */\n      jump\t// in\n    tag_21:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2371:2380  _delegate */\n      tag_23\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2371:2399  _delegate(_implementation()) */\n      jump\t// in\n    tag_20:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2323:2406  function _fallback() internal virtual {... */\n      jump\t// out\n        /* \"base/UUPSProxy.sol\":1049:1295  function initializeProxy(address initialAddress) external {... */\n    tag_13:\n        /* \"base/UUPSProxy.sol\":1141:1142  0 */\n      0x00\n        /* \"base/UUPSProxy.sol\":1115:1143  initialAddress == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"base/UUPSProxy.sol\":1115:1129  initialAddress */\n      dup2\n        /* \"base/UUPSProxy.sol\":1115:1143  initialAddress == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"base/UUPSProxy.sol\":1111:1165  if (initialAddress == address(0)) revert ZeroAddress() */\n      tag_25\n      jumpi\n        /* \"base/UUPSProxy.sol\":1152:1165  ZeroAddress() */\n      mload(0x40)\n      0xd92e233d00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"base/UUPSProxy.sol\":1111:1165  if (initialAddress == address(0)) revert ZeroAddress() */\n    tag_25:\n        /* \"base/UUPSProxy.sol\":1202:1203  0 */\n      0x00\n        /* \"base/UUPSProxy.sol\":1173:1204  _implementation() != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"base/UUPSProxy.sol\":1173:1190  _implementation() */\n      tag_26\n        /* \"base/UUPSProxy.sol\":1173:1188  _implementation */\n      tag_22\n        /* \"base/UUPSProxy.sol\":1173:1190  _implementation() */\n      jump\t// in\n    tag_26:\n        /* \"base/UUPSProxy.sol\":1173:1204  _implementation() != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"base/UUPSProxy.sol\":1169:1226  if (_implementation() != address(0)) revert Initialized() */\n      tag_27\n      jumpi\n        /* \"base/UUPSProxy.sol\":1213:1226  Initialized() */\n      mload(0x40)\n      0x5daa87a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"base/UUPSProxy.sol\":1169:1226  if (_implementation() != address(0)) revert Initialized() */\n    tag_27:\n        /* \"base/UUPSProxy.sol\":1273:1287  initialAddress */\n      dup1\n        /* \"base/UUPSProxy.sol\":1251:1271  _IMPLEMENTATION_SLOT */\n      0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n        /* \"base/UUPSProxy.sol\":1244:1288  sstore(_IMPLEMENTATION_SLOT, initialAddress) */\n      sstore\n        /* \"base/UUPSProxy.sol\":1049:1295  function initializeProxy(address initialAddress) external {... */\n      pop\n      jump\t// out\n        /* \"PureSuperToken.sol\":632:902  function initialize(... */\n    tag_18:\n        /* \"PureSuperToken.sol\":817:851  _initialize(factory, name, symbol) */\n      tag_29\n        /* \"PureSuperToken.sol\":829:836  factory */\n      dup6\n        /* \"PureSuperToken.sol\":838:842  name */\n      dup6\n        /* \"PureSuperToken.sol\":844:850  symbol */\n      dup6\n        /* \"PureSuperToken.sol\":817:828  _initialize */\n      tag_30\n        /* \"PureSuperToken.sol\":817:851  _initialize(factory, name, symbol) */\n      jump\t// in\n    tag_29:\n        /* \"PureSuperToken.sol\":861:895  _mint(receiver, initialSupply, \"\") */\n      tag_31\n        /* \"PureSuperToken.sol\":867:875  receiver */\n      dup3\n        /* \"PureSuperToken.sol\":877:890  initialSupply */\n      dup3\n        /* \"PureSuperToken.sol\":861:895  _mint(receiver, initialSupply, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"PureSuperToken.sol\":861:866  _mint */\n      tag_32\n        /* \"PureSuperToken.sol\":861:895  _mint(receiver, initialSupply, \"\") */\n      jump\t// in\n    tag_31:\n        /* \"PureSuperToken.sol\":632:902  function initialize(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"base/UUPSProxy.sol\":1395:1547  function _implementation()... */\n    tag_22:\n        /* \"base/UUPSProxy.sol\":1472:1484  address impl */\n      0x00\n        /* \"base/UUPSProxy.sol\":1519:1539  _IMPLEMENTATION_SLOT */\n      0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n        /* \"base/UUPSProxy.sol\":1513:1540  sload(_IMPLEMENTATION_SLOT) */\n      sload\n        /* \"base/UUPSProxy.sol\":1505:1540  impl := sload(_IMPLEMENTATION_SLOT) */\n      swap1\n      pop\n        /* \"base/UUPSProxy.sol\":1395:1547  function _implementation()... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":949:1844  function _delegate(address implementation) internal virtual {... */\n    tag_23:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1287:1301  calldatasize() */\n      calldatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1284:1285  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1281:1282  0 */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1268:1302  calldatacopy(0, 0, calldatasize()) */\n      calldatacopy\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1501:1502  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1498:1499  0 */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1482:1496  calldatasize() */\n      calldatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1479:1480  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1463:1477  implementation */\n      dup5\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1456:1461  gas() */\n      gas\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1443:1503  delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) */\n      delegatecall\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1577:1593  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1574:1575  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1571:1572  0 */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1556:1594  returndatacopy(0, 0, returndatasize()) */\n      returndatacopy\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1615:1621  result */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1687:1688  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1682:1748  case 0 {... */\n      dup2\n      eq\n      tag_36\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1797:1813  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1794:1795  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1787:1814  return(0, returndatasize()) */\n      return\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1682:1748  case 0 {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1717:1733  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1714:1715  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1707:1734  revert(0, returndatasize()) */\n      revert\n        /* \"base/SuperTokenBase.sol\":1021:1266  function _initialize(address factory, string memory name, string memory symbol) internal {... */\n    tag_30:\n        /* \"base/SuperTokenBase.sol\":1133:1140  factory */\n      dup3\n        /* \"base/SuperTokenBase.sol\":1114:1168  ISuperTokenFactory(factory).initializeCustomSuperToken */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xd412d344\n        /* \"base/SuperTokenBase.sol\":1177:1181  this */\n      address\n        /* \"base/SuperTokenBase.sol\":1114:1183  ISuperTokenFactory(factory).initializeCustomSuperToken(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_40\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_42\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_42:\n      pop\n      pop\n      pop\n      pop\n        /* \"base/SuperTokenBase.sol\":1207:1211  this */\n      address\n        /* \"base/SuperTokenBase.sol\":1187:1224  ISuperToken(address(this)).initialize */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x42fe0980\n        /* \"base/SuperTokenBase.sol\":1240:1241  0 */\n      0x00\n        /* \"base/SuperTokenBase.sol\":1245:1247  18 */\n      0x12\n        /* \"base/SuperTokenBase.sol\":1249:1253  name */\n      dup6\n        /* \"base/SuperTokenBase.sol\":1255:1261  symbol */\n      dup6\n        /* \"base/SuperTokenBase.sol\":1187:1262  ISuperToken(address(this)).initialize(IERC20(address(0)), 18, name, symbol) */\n      mload(0x40)\n      dup6\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_43\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_47\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_47:\n      pop\n      pop\n      pop\n      pop\n        /* \"base/SuperTokenBase.sol\":1021:1266  function _initialize(address factory, string memory name, string memory symbol) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"base/SuperTokenBase.sol\":1676:1826  function _mint(address account, uint256 amount, bytes memory userData) internal {... */\n    tag_32:\n        /* \"base/SuperTokenBase.sol\":1780:1784  this */\n      address\n        /* \"base/SuperTokenBase.sol\":1760:1795  ISuperToken(address(this)).selfMint */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xc68d4283\n        /* \"base/SuperTokenBase.sol\":1796:1803  account */\n      dup5\n        /* \"base/SuperTokenBase.sol\":1805:1811  amount */\n      dup5\n        /* \"base/SuperTokenBase.sol\":1813:1821  userData */\n      dup5\n        /* \"base/SuperTokenBase.sol\":1760:1822  ISuperToken(address(this)).selfMint(account, amount, userData) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_49\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_51\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_51:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_53\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_53:\n      pop\n      pop\n      pop\n      pop\n        /* \"base/SuperTokenBase.sol\":1676:1826  function _mint(address account, uint256 amount, bytes memory userData) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:82   */\n    tag_54:\n        /* \"#utility.yul\":40:46   */\n      0x00\n        /* \"#utility.yul\":73:75   */\n      0x40\n        /* \"#utility.yul\":67:76   */\n      mload\n        /* \"#utility.yul\":57:76   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:82   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_55:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_56:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_57:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_58:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_98\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_57\n      jump\t// in\n    tag_98:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_59:\n        /* \"#utility.yul\":641:665   */\n      tag_100\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_58\n      jump\t// in\n    tag_100:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_101\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_101:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_60:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_103\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_59\n      jump\t// in\n    tag_103:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:1170   */\n    tag_12:\n        /* \"#utility.yul\":900:906   */\n      0x00\n        /* \"#utility.yul\":949:951   */\n      0x20\n        /* \"#utility.yul\":937:946   */\n      dup3\n        /* \"#utility.yul\":928:935   */\n      dup5\n        /* \"#utility.yul\":924:947   */\n      sub\n        /* \"#utility.yul\":920:952   */\n      slt\n        /* \"#utility.yul\":917:1036   */\n      iszero\n      tag_105\n      jumpi\n        /* \"#utility.yul\":955:1034   */\n      tag_106\n      tag_55\n      jump\t// in\n    tag_106:\n        /* \"#utility.yul\":917:1036   */\n    tag_105:\n        /* \"#utility.yul\":1075:1076   */\n      0x00\n        /* \"#utility.yul\":1100:1153   */\n      tag_107\n        /* \"#utility.yul\":1145:1152   */\n      dup5\n        /* \"#utility.yul\":1136:1142   */\n      dup3\n        /* \"#utility.yul\":1125:1134   */\n      dup6\n        /* \"#utility.yul\":1121:1143   */\n      add\n        /* \"#utility.yul\":1100:1153   */\n      tag_60\n      jump\t// in\n    tag_107:\n        /* \"#utility.yul\":1090:1153   */\n      swap2\n      pop\n        /* \"#utility.yul\":1046:1163   */\n      pop\n        /* \"#utility.yul\":841:1170   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1176:1293   */\n    tag_61:\n        /* \"#utility.yul\":1285:1286   */\n      0x00\n        /* \"#utility.yul\":1282:1283   */\n      dup1\n        /* \"#utility.yul\":1275:1287   */\n      revert\n        /* \"#utility.yul\":1299:1416   */\n    tag_62:\n        /* \"#utility.yul\":1408:1409   */\n      0x00\n        /* \"#utility.yul\":1405:1406   */\n      dup1\n        /* \"#utility.yul\":1398:1410   */\n      revert\n        /* \"#utility.yul\":1422:1524   */\n    tag_63:\n        /* \"#utility.yul\":1463:1469   */\n      0x00\n        /* \"#utility.yul\":1514:1516   */\n      0x1f\n        /* \"#utility.yul\":1510:1517   */\n      not\n        /* \"#utility.yul\":1505:1507   */\n      0x1f\n        /* \"#utility.yul\":1498:1503   */\n      dup4\n        /* \"#utility.yul\":1494:1508   */\n      add\n        /* \"#utility.yul\":1490:1518   */\n      and\n        /* \"#utility.yul\":1480:1518   */\n      swap1\n      pop\n        /* \"#utility.yul\":1422:1524   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1530:1710   */\n    tag_64:\n        /* \"#utility.yul\":1578:1655   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1575:1576   */\n      0x00\n        /* \"#utility.yul\":1568:1656   */\n      mstore\n        /* \"#utility.yul\":1675:1679   */\n      0x41\n        /* \"#utility.yul\":1672:1673   */\n      0x04\n        /* \"#utility.yul\":1665:1680   */\n      mstore\n        /* \"#utility.yul\":1699:1703   */\n      0x24\n        /* \"#utility.yul\":1696:1697   */\n      0x00\n        /* \"#utility.yul\":1689:1704   */\n      revert\n        /* \"#utility.yul\":1716:1997   */\n    tag_65:\n        /* \"#utility.yul\":1799:1826   */\n      tag_113\n        /* \"#utility.yul\":1821:1825   */\n      dup3\n        /* \"#utility.yul\":1799:1826   */\n      tag_63\n      jump\t// in\n    tag_113:\n        /* \"#utility.yul\":1791:1797   */\n      dup2\n        /* \"#utility.yul\":1787:1827   */\n      add\n        /* \"#utility.yul\":1929:1935   */\n      dup2\n        /* \"#utility.yul\":1917:1927   */\n      dup2\n        /* \"#utility.yul\":1914:1936   */\n      lt\n        /* \"#utility.yul\":1893:1911   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1881:1891   */\n      dup3\n        /* \"#utility.yul\":1878:1912   */\n      gt\n        /* \"#utility.yul\":1875:1937   */\n      or\n        /* \"#utility.yul\":1872:1960   */\n      iszero\n      tag_114\n      jumpi\n        /* \"#utility.yul\":1940:1958   */\n      tag_115\n      tag_64\n      jump\t// in\n    tag_115:\n        /* \"#utility.yul\":1872:1960   */\n    tag_114:\n        /* \"#utility.yul\":1980:1990   */\n      dup1\n        /* \"#utility.yul\":1976:1978   */\n      0x40\n        /* \"#utility.yul\":1969:1991   */\n      mstore\n        /* \"#utility.yul\":1759:1997   */\n      pop\n        /* \"#utility.yul\":1716:1997   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2003:2132   */\n    tag_66:\n        /* \"#utility.yul\":2037:2043   */\n      0x00\n        /* \"#utility.yul\":2064:2084   */\n      tag_117\n      tag_54\n      jump\t// in\n    tag_117:\n        /* \"#utility.yul\":2054:2084   */\n      swap1\n      pop\n        /* \"#utility.yul\":2093:2126   */\n      tag_118\n        /* \"#utility.yul\":2121:2125   */\n      dup3\n        /* \"#utility.yul\":2113:2119   */\n      dup3\n        /* \"#utility.yul\":2093:2126   */\n      tag_65\n      jump\t// in\n    tag_118:\n        /* \"#utility.yul\":2003:2132   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2138:2446   */\n    tag_67:\n        /* \"#utility.yul\":2200:2204   */\n      0x00\n        /* \"#utility.yul\":2290:2308   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2282:2288   */\n      dup3\n        /* \"#utility.yul\":2279:2309   */\n      gt\n        /* \"#utility.yul\":2276:2332   */\n      iszero\n      tag_120\n      jumpi\n        /* \"#utility.yul\":2312:2330   */\n      tag_121\n      tag_64\n      jump\t// in\n    tag_121:\n        /* \"#utility.yul\":2276:2332   */\n    tag_120:\n        /* \"#utility.yul\":2350:2379   */\n      tag_122\n        /* \"#utility.yul\":2372:2378   */\n      dup3\n        /* \"#utility.yul\":2350:2379   */\n      tag_63\n      jump\t// in\n    tag_122:\n        /* \"#utility.yul\":2342:2379   */\n      swap1\n      pop\n        /* \"#utility.yul\":2434:2438   */\n      0x20\n        /* \"#utility.yul\":2428:2432   */\n      dup2\n        /* \"#utility.yul\":2424:2439   */\n      add\n        /* \"#utility.yul\":2416:2439   */\n      swap1\n      pop\n        /* \"#utility.yul\":2138:2446   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2452:2598   */\n    tag_68:\n        /* \"#utility.yul\":2549:2555   */\n      dup3\n        /* \"#utility.yul\":2544:2547   */\n      dup2\n        /* \"#utility.yul\":2539:2542   */\n      dup4\n        /* \"#utility.yul\":2526:2556   */\n      calldatacopy\n        /* \"#utility.yul\":2590:2591   */\n      0x00\n        /* \"#utility.yul\":2581:2587   */\n      dup4\n        /* \"#utility.yul\":2576:2579   */\n      dup4\n        /* \"#utility.yul\":2572:2588   */\n      add\n        /* \"#utility.yul\":2565:2592   */\n      mstore\n        /* \"#utility.yul\":2452:2598   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2604:3029   */\n    tag_69:\n        /* \"#utility.yul\":2682:2687   */\n      0x00\n        /* \"#utility.yul\":2707:2773   */\n      tag_125\n        /* \"#utility.yul\":2723:2772   */\n      tag_126\n        /* \"#utility.yul\":2765:2771   */\n      dup5\n        /* \"#utility.yul\":2723:2772   */\n      tag_67\n      jump\t// in\n    tag_126:\n        /* \"#utility.yul\":2707:2773   */\n      tag_66\n      jump\t// in\n    tag_125:\n        /* \"#utility.yul\":2698:2773   */\n      swap1\n      pop\n        /* \"#utility.yul\":2796:2802   */\n      dup3\n        /* \"#utility.yul\":2789:2794   */\n      dup2\n        /* \"#utility.yul\":2782:2803   */\n      mstore\n        /* \"#utility.yul\":2834:2838   */\n      0x20\n        /* \"#utility.yul\":2827:2832   */\n      dup2\n        /* \"#utility.yul\":2823:2839   */\n      add\n        /* \"#utility.yul\":2872:2875   */\n      dup5\n        /* \"#utility.yul\":2863:2869   */\n      dup5\n        /* \"#utility.yul\":2858:2861   */\n      dup5\n        /* \"#utility.yul\":2854:2870   */\n      add\n        /* \"#utility.yul\":2851:2876   */\n      gt\n        /* \"#utility.yul\":2848:2960   */\n      iszero\n      tag_127\n      jumpi\n        /* \"#utility.yul\":2879:2958   */\n      tag_128\n      tag_62\n      jump\t// in\n    tag_128:\n        /* \"#utility.yul\":2848:2960   */\n    tag_127:\n        /* \"#utility.yul\":2969:3023   */\n      tag_129\n        /* \"#utility.yul\":3016:3022   */\n      dup5\n        /* \"#utility.yul\":3011:3014   */\n      dup3\n        /* \"#utility.yul\":3006:3009   */\n      dup6\n        /* \"#utility.yul\":2969:3023   */\n      tag_68\n      jump\t// in\n    tag_129:\n        /* \"#utility.yul\":2688:3029   */\n      pop\n        /* \"#utility.yul\":2604:3029   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3049:3389   */\n    tag_70:\n        /* \"#utility.yul\":3105:3110   */\n      0x00\n        /* \"#utility.yul\":3154:3157   */\n      dup3\n        /* \"#utility.yul\":3147:3151   */\n      0x1f\n        /* \"#utility.yul\":3139:3145   */\n      dup4\n        /* \"#utility.yul\":3135:3152   */\n      add\n        /* \"#utility.yul\":3131:3158   */\n      slt\n        /* \"#utility.yul\":3121:3243   */\n      tag_131\n      jumpi\n        /* \"#utility.yul\":3162:3241   */\n      tag_132\n      tag_61\n      jump\t// in\n    tag_132:\n        /* \"#utility.yul\":3121:3243   */\n    tag_131:\n        /* \"#utility.yul\":3279:3285   */\n      dup2\n        /* \"#utility.yul\":3266:3286   */\n      calldataload\n        /* \"#utility.yul\":3304:3383   */\n      tag_133\n        /* \"#utility.yul\":3379:3382   */\n      dup5\n        /* \"#utility.yul\":3371:3377   */\n      dup3\n        /* \"#utility.yul\":3364:3368   */\n      0x20\n        /* \"#utility.yul\":3356:3362   */\n      dup7\n        /* \"#utility.yul\":3352:3369   */\n      add\n        /* \"#utility.yul\":3304:3383   */\n      tag_69\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":3295:3383   */\n      swap2\n      pop\n        /* \"#utility.yul\":3111:3389   */\n      pop\n        /* \"#utility.yul\":3049:3389   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3395:3472   */\n    tag_71:\n        /* \"#utility.yul\":3432:3439   */\n      0x00\n        /* \"#utility.yul\":3461:3466   */\n      dup2\n        /* \"#utility.yul\":3450:3466   */\n      swap1\n      pop\n        /* \"#utility.yul\":3395:3472   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3478:3600   */\n    tag_72:\n        /* \"#utility.yul\":3551:3575   */\n      tag_136\n        /* \"#utility.yul\":3569:3574   */\n      dup2\n        /* \"#utility.yul\":3551:3575   */\n      tag_71\n      jump\t// in\n    tag_136:\n        /* \"#utility.yul\":3544:3549   */\n      dup2\n        /* \"#utility.yul\":3541:3576   */\n      eq\n        /* \"#utility.yul\":3531:3594   */\n      tag_137\n      jumpi\n        /* \"#utility.yul\":3590:3591   */\n      0x00\n        /* \"#utility.yul\":3587:3588   */\n      dup1\n        /* \"#utility.yul\":3580:3592   */\n      revert\n        /* \"#utility.yul\":3531:3594   */\n    tag_137:\n        /* \"#utility.yul\":3478:3600   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3606:3745   */\n    tag_73:\n        /* \"#utility.yul\":3652:3657   */\n      0x00\n        /* \"#utility.yul\":3690:3696   */\n      dup2\n        /* \"#utility.yul\":3677:3697   */\n      calldataload\n        /* \"#utility.yul\":3668:3697   */\n      swap1\n      pop\n        /* \"#utility.yul\":3706:3739   */\n      tag_139\n        /* \"#utility.yul\":3733:3738   */\n      dup2\n        /* \"#utility.yul\":3706:3739   */\n      tag_72\n      jump\t// in\n    tag_139:\n        /* \"#utility.yul\":3606:3745   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3751:5022   */\n    tag_17:\n        /* \"#utility.yul\":3866:3872   */\n      0x00\n        /* \"#utility.yul\":3874:3880   */\n      dup1\n        /* \"#utility.yul\":3882:3888   */\n      0x00\n        /* \"#utility.yul\":3890:3896   */\n      dup1\n        /* \"#utility.yul\":3898:3904   */\n      0x00\n        /* \"#utility.yul\":3947:3950   */\n      0xa0\n        /* \"#utility.yul\":3935:3944   */\n      dup7\n        /* \"#utility.yul\":3926:3933   */\n      dup9\n        /* \"#utility.yul\":3922:3945   */\n      sub\n        /* \"#utility.yul\":3918:3951   */\n      slt\n        /* \"#utility.yul\":3915:4035   */\n      iszero\n      tag_141\n      jumpi\n        /* \"#utility.yul\":3954:4033   */\n      tag_142\n      tag_55\n      jump\t// in\n    tag_142:\n        /* \"#utility.yul\":3915:4035   */\n    tag_141:\n        /* \"#utility.yul\":4074:4075   */\n      0x00\n        /* \"#utility.yul\":4099:4152   */\n      tag_143\n        /* \"#utility.yul\":4144:4151   */\n      dup9\n        /* \"#utility.yul\":4135:4141   */\n      dup3\n        /* \"#utility.yul\":4124:4133   */\n      dup10\n        /* \"#utility.yul\":4120:4142   */\n      add\n        /* \"#utility.yul\":4099:4152   */\n      tag_60\n      jump\t// in\n    tag_143:\n        /* \"#utility.yul\":4089:4152   */\n      swap6\n      pop\n        /* \"#utility.yul\":4045:4162   */\n      pop\n        /* \"#utility.yul\":4229:4231   */\n      0x20\n        /* \"#utility.yul\":4218:4227   */\n      dup7\n        /* \"#utility.yul\":4214:4232   */\n      add\n        /* \"#utility.yul\":4201:4233   */\n      calldataload\n        /* \"#utility.yul\":4260:4278   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4252:4258   */\n      dup2\n        /* \"#utility.yul\":4249:4279   */\n      gt\n        /* \"#utility.yul\":4246:4363   */\n      iszero\n      tag_144\n      jumpi\n        /* \"#utility.yul\":4282:4361   */\n      tag_145\n      tag_56\n      jump\t// in\n    tag_145:\n        /* \"#utility.yul\":4246:4363   */\n    tag_144:\n        /* \"#utility.yul\":4387:4450   */\n      tag_146\n        /* \"#utility.yul\":4442:4449   */\n      dup9\n        /* \"#utility.yul\":4433:4439   */\n      dup3\n        /* \"#utility.yul\":4422:4431   */\n      dup10\n        /* \"#utility.yul\":4418:4440   */\n      add\n        /* \"#utility.yul\":4387:4450   */\n      tag_70\n      jump\t// in\n    tag_146:\n        /* \"#utility.yul\":4377:4450   */\n      swap5\n      pop\n        /* \"#utility.yul\":4172:4460   */\n      pop\n        /* \"#utility.yul\":4527:4529   */\n      0x40\n        /* \"#utility.yul\":4516:4525   */\n      dup7\n        /* \"#utility.yul\":4512:4530   */\n      add\n        /* \"#utility.yul\":4499:4531   */\n      calldataload\n        /* \"#utility.yul\":4558:4576   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4550:4556   */\n      dup2\n        /* \"#utility.yul\":4547:4577   */\n      gt\n        /* \"#utility.yul\":4544:4661   */\n      iszero\n      tag_147\n      jumpi\n        /* \"#utility.yul\":4580:4659   */\n      tag_148\n      tag_56\n      jump\t// in\n    tag_148:\n        /* \"#utility.yul\":4544:4661   */\n    tag_147:\n        /* \"#utility.yul\":4685:4748   */\n      tag_149\n        /* \"#utility.yul\":4740:4747   */\n      dup9\n        /* \"#utility.yul\":4731:4737   */\n      dup3\n        /* \"#utility.yul\":4720:4729   */\n      dup10\n        /* \"#utility.yul\":4716:4738   */\n      add\n        /* \"#utility.yul\":4685:4748   */\n      tag_70\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":4675:4748   */\n      swap4\n      pop\n        /* \"#utility.yul\":4470:4758   */\n      pop\n        /* \"#utility.yul\":4797:4799   */\n      0x60\n        /* \"#utility.yul\":4823:4876   */\n      tag_150\n        /* \"#utility.yul\":4868:4875   */\n      dup9\n        /* \"#utility.yul\":4859:4865   */\n      dup3\n        /* \"#utility.yul\":4848:4857   */\n      dup10\n        /* \"#utility.yul\":4844:4866   */\n      add\n        /* \"#utility.yul\":4823:4876   */\n      tag_60\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":4813:4876   */\n      swap3\n      pop\n        /* \"#utility.yul\":4768:4886   */\n      pop\n        /* \"#utility.yul\":4925:4928   */\n      0x80\n        /* \"#utility.yul\":4952:5005   */\n      tag_151\n        /* \"#utility.yul\":4997:5004   */\n      dup9\n        /* \"#utility.yul\":4988:4994   */\n      dup3\n        /* \"#utility.yul\":4977:4986   */\n      dup10\n        /* \"#utility.yul\":4973:4995   */\n      add\n        /* \"#utility.yul\":4952:5005   */\n      tag_73\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":4942:5005   */\n      swap2\n      pop\n        /* \"#utility.yul\":4896:5015   */\n      pop\n        /* \"#utility.yul\":3751:5022   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5028:5146   */\n    tag_74:\n        /* \"#utility.yul\":5115:5139   */\n      tag_153\n        /* \"#utility.yul\":5133:5138   */\n      dup2\n        /* \"#utility.yul\":5115:5139   */\n      tag_58\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":5110:5113   */\n      dup3\n        /* \"#utility.yul\":5103:5140   */\n      mstore\n        /* \"#utility.yul\":5028:5146   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5152:5374   */\n    tag_39:\n        /* \"#utility.yul\":5245:5249   */\n      0x00\n        /* \"#utility.yul\":5283:5285   */\n      0x20\n        /* \"#utility.yul\":5272:5281   */\n      dup3\n        /* \"#utility.yul\":5268:5286   */\n      add\n        /* \"#utility.yul\":5260:5286   */\n      swap1\n      pop\n        /* \"#utility.yul\":5296:5367   */\n      tag_155\n        /* \"#utility.yul\":5364:5365   */\n      0x00\n        /* \"#utility.yul\":5353:5362   */\n      dup4\n        /* \"#utility.yul\":5349:5366   */\n      add\n        /* \"#utility.yul\":5340:5346   */\n      dup5\n        /* \"#utility.yul\":5296:5367   */\n      tag_74\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":5152:5374   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5380:5440   */\n    tag_75:\n        /* \"#utility.yul\":5408:5411   */\n      0x00\n        /* \"#utility.yul\":5429:5434   */\n      dup2\n        /* \"#utility.yul\":5422:5434   */\n      swap1\n      pop\n        /* \"#utility.yul\":5380:5440   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5446:5588   */\n    tag_76:\n        /* \"#utility.yul\":5496:5505   */\n      0x00\n        /* \"#utility.yul\":5529:5582   */\n      tag_158\n        /* \"#utility.yul\":5547:5581   */\n      tag_159\n        /* \"#utility.yul\":5556:5580   */\n      tag_160\n        /* \"#utility.yul\":5574:5579   */\n      dup5\n        /* \"#utility.yul\":5556:5580   */\n      tag_57\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":5547:5581   */\n      tag_75\n      jump\t// in\n    tag_159:\n        /* \"#utility.yul\":5529:5582   */\n      tag_57\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":5516:5582   */\n      swap1\n      pop\n        /* \"#utility.yul\":5446:5588   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5594:5720   */\n    tag_77:\n        /* \"#utility.yul\":5644:5653   */\n      0x00\n        /* \"#utility.yul\":5677:5714   */\n      tag_162\n        /* \"#utility.yul\":5708:5713   */\n      dup3\n        /* \"#utility.yul\":5677:5714   */\n      tag_76\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":5664:5714   */\n      swap1\n      pop\n        /* \"#utility.yul\":5594:5720   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5726:5866   */\n    tag_78:\n        /* \"#utility.yul\":5790:5799   */\n      0x00\n        /* \"#utility.yul\":5823:5860   */\n      tag_164\n        /* \"#utility.yul\":5854:5859   */\n      dup3\n        /* \"#utility.yul\":5823:5860   */\n      tag_77\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":5810:5860   */\n      swap1\n      pop\n        /* \"#utility.yul\":5726:5866   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5872:6031   */\n    tag_79:\n        /* \"#utility.yul\":5973:6024   */\n      tag_166\n        /* \"#utility.yul\":6018:6023   */\n      dup2\n        /* \"#utility.yul\":5973:6024   */\n      tag_78\n      jump\t// in\n    tag_166:\n        /* \"#utility.yul\":5968:5971   */\n      dup3\n        /* \"#utility.yul\":5961:6025   */\n      mstore\n        /* \"#utility.yul\":5872:6031   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6037:6123   */\n    tag_80:\n        /* \"#utility.yul\":6083:6090   */\n      0x00\n        /* \"#utility.yul\":6112:6117   */\n      dup2\n        /* \"#utility.yul\":6101:6117   */\n      swap1\n      pop\n        /* \"#utility.yul\":6037:6123   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6129:6215   */\n    tag_81:\n        /* \"#utility.yul\":6164:6171   */\n      0x00\n        /* \"#utility.yul\":6204:6208   */\n      0xff\n        /* \"#utility.yul\":6197:6202   */\n      dup3\n        /* \"#utility.yul\":6193:6209   */\n      and\n        /* \"#utility.yul\":6182:6209   */\n      swap1\n      pop\n        /* \"#utility.yul\":6129:6215   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6221:6377   */\n    tag_82:\n        /* \"#utility.yul\":6278:6287   */\n      0x00\n        /* \"#utility.yul\":6311:6371   */\n      tag_170\n        /* \"#utility.yul\":6327:6370   */\n      tag_171\n        /* \"#utility.yul\":6336:6369   */\n      tag_172\n        /* \"#utility.yul\":6363:6368   */\n      dup5\n        /* \"#utility.yul\":6336:6369   */\n      tag_80\n      jump\t// in\n    tag_172:\n        /* \"#utility.yul\":6327:6370   */\n      tag_75\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":6311:6371   */\n      tag_81\n      jump\t// in\n    tag_170:\n        /* \"#utility.yul\":6298:6371   */\n      swap1\n      pop\n        /* \"#utility.yul\":6221:6377   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6383:6528   */\n    tag_83:\n        /* \"#utility.yul\":6477:6521   */\n      tag_174\n        /* \"#utility.yul\":6515:6520   */\n      dup2\n        /* \"#utility.yul\":6477:6521   */\n      tag_82\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":6472:6475   */\n      dup3\n        /* \"#utility.yul\":6465:6522   */\n      mstore\n        /* \"#utility.yul\":6383:6528   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6534:6633   */\n    tag_84:\n        /* \"#utility.yul\":6586:6592   */\n      0x00\n        /* \"#utility.yul\":6620:6625   */\n      dup2\n        /* \"#utility.yul\":6614:6626   */\n      mload\n        /* \"#utility.yul\":6604:6626   */\n      swap1\n      pop\n        /* \"#utility.yul\":6534:6633   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6639:6808   */\n    tag_85:\n        /* \"#utility.yul\":6723:6734   */\n      0x00\n        /* \"#utility.yul\":6757:6763   */\n      dup3\n        /* \"#utility.yul\":6752:6755   */\n      dup3\n        /* \"#utility.yul\":6745:6764   */\n      mstore\n        /* \"#utility.yul\":6797:6801   */\n      0x20\n        /* \"#utility.yul\":6792:6795   */\n      dup3\n        /* \"#utility.yul\":6788:6802   */\n      add\n        /* \"#utility.yul\":6773:6802   */\n      swap1\n      pop\n        /* \"#utility.yul\":6639:6808   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6814:7060   */\n    tag_86:\n        /* \"#utility.yul\":6895:6896   */\n      0x00\n        /* \"#utility.yul\":6905:7018   */\n    tag_178:\n        /* \"#utility.yul\":6919:6925   */\n      dup4\n        /* \"#utility.yul\":6916:6917   */\n      dup2\n        /* \"#utility.yul\":6913:6926   */\n      lt\n        /* \"#utility.yul\":6905:7018   */\n      iszero\n      tag_180\n      jumpi\n        /* \"#utility.yul\":7004:7005   */\n      dup1\n        /* \"#utility.yul\":6999:7002   */\n      dup3\n        /* \"#utility.yul\":6995:7006   */\n      add\n        /* \"#utility.yul\":6989:7007   */\n      mload\n        /* \"#utility.yul\":6985:6986   */\n      dup2\n        /* \"#utility.yul\":6980:6983   */\n      dup5\n        /* \"#utility.yul\":6976:6987   */\n      add\n        /* \"#utility.yul\":6969:7008   */\n      mstore\n        /* \"#utility.yul\":6941:6943   */\n      0x20\n        /* \"#utility.yul\":6938:6939   */\n      dup2\n        /* \"#utility.yul\":6934:6944   */\n      add\n        /* \"#utility.yul\":6929:6944   */\n      swap1\n      pop\n        /* \"#utility.yul\":6905:7018   */\n      jump(tag_178)\n    tag_180:\n        /* \"#utility.yul\":7052:7053   */\n      0x00\n        /* \"#utility.yul\":7043:7049   */\n      dup5\n        /* \"#utility.yul\":7038:7041   */\n      dup5\n        /* \"#utility.yul\":7034:7050   */\n      add\n        /* \"#utility.yul\":7027:7054   */\n      mstore\n        /* \"#utility.yul\":6876:7060   */\n      pop\n        /* \"#utility.yul\":6814:7060   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7066:7443   */\n    tag_87:\n        /* \"#utility.yul\":7154:7157   */\n      0x00\n        /* \"#utility.yul\":7182:7221   */\n      tag_182\n        /* \"#utility.yul\":7215:7220   */\n      dup3\n        /* \"#utility.yul\":7182:7221   */\n      tag_84\n      jump\t// in\n    tag_182:\n        /* \"#utility.yul\":7237:7308   */\n      tag_183\n        /* \"#utility.yul\":7301:7307   */\n      dup2\n        /* \"#utility.yul\":7296:7299   */\n      dup6\n        /* \"#utility.yul\":7237:7308   */\n      tag_85\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":7230:7308   */\n      swap4\n      pop\n        /* \"#utility.yul\":7317:7382   */\n      tag_184\n        /* \"#utility.yul\":7375:7381   */\n      dup2\n        /* \"#utility.yul\":7370:7373   */\n      dup6\n        /* \"#utility.yul\":7363:7367   */\n      0x20\n        /* \"#utility.yul\":7356:7361   */\n      dup7\n        /* \"#utility.yul\":7352:7368   */\n      add\n        /* \"#utility.yul\":7317:7382   */\n      tag_86\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":7407:7436   */\n      tag_185\n        /* \"#utility.yul\":7429:7435   */\n      dup2\n        /* \"#utility.yul\":7407:7436   */\n      tag_63\n      jump\t// in\n    tag_185:\n        /* \"#utility.yul\":7402:7405   */\n      dup5\n        /* \"#utility.yul\":7398:7437   */\n      add\n        /* \"#utility.yul\":7391:7437   */\n      swap2\n      pop\n        /* \"#utility.yul\":7158:7443   */\n      pop\n        /* \"#utility.yul\":7066:7443   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7449:8226   */\n    tag_44:\n        /* \"#utility.yul\":7687:7691   */\n      0x00\n        /* \"#utility.yul\":7725:7728   */\n      0x80\n        /* \"#utility.yul\":7714:7723   */\n      dup3\n        /* \"#utility.yul\":7710:7729   */\n      add\n        /* \"#utility.yul\":7702:7729   */\n      swap1\n      pop\n        /* \"#utility.yul\":7739:7824   */\n      tag_187\n        /* \"#utility.yul\":7821:7822   */\n      0x00\n        /* \"#utility.yul\":7810:7819   */\n      dup4\n        /* \"#utility.yul\":7806:7823   */\n      add\n        /* \"#utility.yul\":7797:7803   */\n      dup8\n        /* \"#utility.yul\":7739:7824   */\n      tag_79\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":7834:7913   */\n      tag_188\n        /* \"#utility.yul\":7909:7911   */\n      0x20\n        /* \"#utility.yul\":7898:7907   */\n      dup4\n        /* \"#utility.yul\":7894:7912   */\n      add\n        /* \"#utility.yul\":7885:7891   */\n      dup7\n        /* \"#utility.yul\":7834:7913   */\n      tag_83\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":7960:7969   */\n      dup2\n        /* \"#utility.yul\":7954:7958   */\n      dup2\n        /* \"#utility.yul\":7950:7970   */\n      sub\n        /* \"#utility.yul\":7945:7947   */\n      0x40\n        /* \"#utility.yul\":7934:7943   */\n      dup4\n        /* \"#utility.yul\":7930:7948   */\n      add\n        /* \"#utility.yul\":7923:7971   */\n      mstore\n        /* \"#utility.yul\":7988:8066   */\n      tag_189\n        /* \"#utility.yul\":8061:8065   */\n      dup2\n        /* \"#utility.yul\":8052:8058   */\n      dup6\n        /* \"#utility.yul\":7988:8066   */\n      tag_87\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":7980:8066   */\n      swap1\n      pop\n        /* \"#utility.yul\":8113:8122   */\n      dup2\n        /* \"#utility.yul\":8107:8111   */\n      dup2\n        /* \"#utility.yul\":8103:8123   */\n      sub\n        /* \"#utility.yul\":8098:8100   */\n      0x60\n        /* \"#utility.yul\":8087:8096   */\n      dup4\n        /* \"#utility.yul\":8083:8101   */\n      add\n        /* \"#utility.yul\":8076:8124   */\n      mstore\n        /* \"#utility.yul\":8141:8219   */\n      tag_190\n        /* \"#utility.yul\":8214:8218   */\n      dup2\n        /* \"#utility.yul\":8205:8211   */\n      dup5\n        /* \"#utility.yul\":8141:8219   */\n      tag_87\n      jump\t// in\n    tag_190:\n        /* \"#utility.yul\":8133:8219   */\n      swap1\n      pop\n        /* \"#utility.yul\":7449:8226   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8232:8350   */\n    tag_88:\n        /* \"#utility.yul\":8319:8343   */\n      tag_192\n        /* \"#utility.yul\":8337:8342   */\n      dup2\n        /* \"#utility.yul\":8319:8343   */\n      tag_71\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":8314:8317   */\n      dup3\n        /* \"#utility.yul\":8307:8344   */\n      mstore\n        /* \"#utility.yul\":8232:8350   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8356:8454   */\n    tag_89:\n        /* \"#utility.yul\":8407:8413   */\n      0x00\n        /* \"#utility.yul\":8441:8446   */\n      dup2\n        /* \"#utility.yul\":8435:8447   */\n      mload\n        /* \"#utility.yul\":8425:8447   */\n      swap1\n      pop\n        /* \"#utility.yul\":8356:8454   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8460:8628   */\n    tag_90:\n        /* \"#utility.yul\":8543:8554   */\n      0x00\n        /* \"#utility.yul\":8577:8583   */\n      dup3\n        /* \"#utility.yul\":8572:8575   */\n      dup3\n        /* \"#utility.yul\":8565:8584   */\n      mstore\n        /* \"#utility.yul\":8617:8621   */\n      0x20\n        /* \"#utility.yul\":8612:8615   */\n      dup3\n        /* \"#utility.yul\":8608:8622   */\n      add\n        /* \"#utility.yul\":8593:8622   */\n      swap1\n      pop\n        /* \"#utility.yul\":8460:8628   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8634:9007   */\n    tag_91:\n        /* \"#utility.yul\":8720:8723   */\n      0x00\n        /* \"#utility.yul\":8748:8786   */\n      tag_196\n        /* \"#utility.yul\":8780:8785   */\n      dup3\n        /* \"#utility.yul\":8748:8786   */\n      tag_89\n      jump\t// in\n    tag_196:\n        /* \"#utility.yul\":8802:8872   */\n      tag_197\n        /* \"#utility.yul\":8865:8871   */\n      dup2\n        /* \"#utility.yul\":8860:8863   */\n      dup6\n        /* \"#utility.yul\":8802:8872   */\n      tag_90\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":8795:8872   */\n      swap4\n      pop\n        /* \"#utility.yul\":8881:8946   */\n      tag_198\n        /* \"#utility.yul\":8939:8945   */\n      dup2\n        /* \"#utility.yul\":8934:8937   */\n      dup6\n        /* \"#utility.yul\":8927:8931   */\n      0x20\n        /* \"#utility.yul\":8920:8925   */\n      dup7\n        /* \"#utility.yul\":8916:8932   */\n      add\n        /* \"#utility.yul\":8881:8946   */\n      tag_86\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":8971:9000   */\n      tag_199\n        /* \"#utility.yul\":8993:8999   */\n      dup2\n        /* \"#utility.yul\":8971:9000   */\n      tag_63\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":8966:8969   */\n      dup5\n        /* \"#utility.yul\":8962:9001   */\n      add\n        /* \"#utility.yul\":8955:9001   */\n      swap2\n      pop\n        /* \"#utility.yul\":8724:9007   */\n      pop\n        /* \"#utility.yul\":8634:9007   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9013:9542   */\n    tag_50:\n        /* \"#utility.yul\":9180:9184   */\n      0x00\n        /* \"#utility.yul\":9218:9220   */\n      0x60\n        /* \"#utility.yul\":9207:9216   */\n      dup3\n        /* \"#utility.yul\":9203:9221   */\n      add\n        /* \"#utility.yul\":9195:9221   */\n      swap1\n      pop\n        /* \"#utility.yul\":9231:9302   */\n      tag_201\n        /* \"#utility.yul\":9299:9300   */\n      0x00\n        /* \"#utility.yul\":9288:9297   */\n      dup4\n        /* \"#utility.yul\":9284:9301   */\n      add\n        /* \"#utility.yul\":9275:9281   */\n      dup7\n        /* \"#utility.yul\":9231:9302   */\n      tag_74\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":9312:9384   */\n      tag_202\n        /* \"#utility.yul\":9380:9382   */\n      0x20\n        /* \"#utility.yul\":9369:9378   */\n      dup4\n        /* \"#utility.yul\":9365:9383   */\n      add\n        /* \"#utility.yul\":9356:9362   */\n      dup6\n        /* \"#utility.yul\":9312:9384   */\n      tag_88\n      jump\t// in\n    tag_202:\n        /* \"#utility.yul\":9431:9440   */\n      dup2\n        /* \"#utility.yul\":9425:9429   */\n      dup2\n        /* \"#utility.yul\":9421:9441   */\n      sub\n        /* \"#utility.yul\":9416:9418   */\n      0x40\n        /* \"#utility.yul\":9405:9414   */\n      dup4\n        /* \"#utility.yul\":9401:9419   */\n      add\n        /* \"#utility.yul\":9394:9442   */\n      mstore\n        /* \"#utility.yul\":9459:9535   */\n      tag_203\n        /* \"#utility.yul\":9530:9534   */\n      dup2\n        /* \"#utility.yul\":9521:9527   */\n      dup5\n        /* \"#utility.yul\":9459:9535   */\n      tag_91\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":9451:9535   */\n      swap1\n      pop\n        /* \"#utility.yul\":9013:9542   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220426d2a610499caf65837793a6d181713be0c2085bd4f450281ec8602c8dfafea64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506108638061001d5f395ff3fe60806040526004361061002c575f3560e01c80634a0687ef1461003757806375b30be61461005f5761002d565b5b610035610087565b005b348015610042575f80fd5b5061005d600480360381019061005891906103b4565b610099565b005b34801561006a575f80fd5b506100856004803603810190610080919061054e565b610190565b005b6100976100926101bb565b6101e3565b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100fe576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1661011d6101bb565b73ffffffffffffffffffffffffffffffffffffffff161461016a576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550565b61019b858585610202565b6101b4828260405180602001604052805f8152506102da565b5050505050565b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54905090565b365f80375f80365f845af43d5f803e805f81146101fe573d5ff35b3d5ffd5b8273ffffffffffffffffffffffffffffffffffffffff1663d412d344306040518263ffffffff1660e01b815260040161023b919061060c565b5f604051808303815f87803b158015610252575f80fd5b505af1158015610264573d5f803e3d5ffd5b505050503073ffffffffffffffffffffffffffffffffffffffff166342fe09805f601285856040518563ffffffff1660e01b81526004016102a8949392919061073f565b5f604051808303815f87803b1580156102bf575f80fd5b505af11580156102d1573d5f803e3d5ffd5b50505050505050565b3073ffffffffffffffffffffffffffffffffffffffff1663c68d42838484846040518463ffffffff1660e01b8152600401610317939291906107f1565b5f604051808303815f87803b15801561032e575f80fd5b505af1158015610340573d5f803e3d5ffd5b50505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103838261035a565b9050919050565b61039381610379565b811461039d575f80fd5b50565b5f813590506103ae8161038a565b92915050565b5f602082840312156103c9576103c8610352565b5b5f6103d6848285016103a0565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61042d826103e7565b810181811067ffffffffffffffff8211171561044c5761044b6103f7565b5b80604052505050565b5f61045e610349565b905061046a8282610424565b919050565b5f67ffffffffffffffff821115610489576104886103f7565b5b610492826103e7565b9050602081019050919050565b828183375f83830152505050565b5f6104bf6104ba8461046f565b610455565b9050828152602081018484840111156104db576104da6103e3565b5b6104e684828561049f565b509392505050565b5f82601f830112610502576105016103df565b5b81356105128482602086016104ad565b91505092915050565b5f819050919050565b61052d8161051b565b8114610537575f80fd5b50565b5f8135905061054881610524565b92915050565b5f805f805f60a0868803121561056757610566610352565b5b5f610574888289016103a0565b955050602086013567ffffffffffffffff81111561059557610594610356565b5b6105a1888289016104ee565b945050604086013567ffffffffffffffff8111156105c2576105c1610356565b5b6105ce888289016104ee565b93505060606105df888289016103a0565b92505060806105f08882890161053a565b9150509295509295909350565b61060681610379565b82525050565b5f60208201905061061f5f8301846105fd565b92915050565b5f819050919050565b5f61064861064361063e8461035a565b610625565b61035a565b9050919050565b5f6106598261062e565b9050919050565b5f61066a8261064f565b9050919050565b61067a81610660565b82525050565b5f819050919050565b5f60ff82169050919050565b5f6106af6106aa6106a584610680565b610625565b610689565b9050919050565b6106bf81610695565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156106fc5780820151818401526020810190506106e1565b5f8484015250505050565b5f610711826106c5565b61071b81856106cf565b935061072b8185602086016106df565b610734816103e7565b840191505092915050565b5f6080820190506107525f830187610671565b61075f60208301866106b6565b81810360408301526107718185610707565b905081810360608301526107858184610707565b905095945050505050565b6107998161051b565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f6107c38261079f565b6107cd81856107a9565b93506107dd8185602086016106df565b6107e6816103e7565b840191505092915050565b5f6060820190506108045f8301866105fd565b6108116020830185610790565b818103604083015261082381846107b9565b905094935050505056fea2646970667358221220426d2a610499caf65837793a6d181713be0c2085bd4f450281ec8602c8dfafea64736f6c63430008160033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x863 DUP1 PUSH2 0x1D PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2C JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4A0687EF EQ PUSH2 0x37 JUMPI DUP1 PUSH4 0x75B30BE6 EQ PUSH2 0x5F JUMPI PUSH2 0x2D JUMP JUMPDEST JUMPDEST PUSH2 0x35 PUSH2 0x87 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x58 SWAP2 SWAP1 PUSH2 0x3B4 JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x85 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x80 SWAP2 SWAP1 PUSH2 0x54E JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x97 PUSH2 0x92 PUSH2 0x1BB JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xFE JUMPI PUSH1 0x40 MLOAD PUSH32 0xD92E233D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11D PUSH2 0x1BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16A JUMPI PUSH1 0x40 MLOAD PUSH32 0x5DAA87A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SSTORE POP JUMP JUMPDEST PUSH2 0x19B DUP6 DUP6 DUP6 PUSH2 0x202 JUMP JUMPDEST PUSH2 0x1B4 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x2DA JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH0 DUP1 CALLDATACOPY PUSH0 DUP1 CALLDATASIZE PUSH0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY DUP1 PUSH0 DUP2 EQ PUSH2 0x1FE JUMPI RETURNDATASIZE PUSH0 RETURN JUMPDEST RETURNDATASIZE PUSH0 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD412D344 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x60C JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x252 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x264 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42FE0980 PUSH0 PUSH1 0x12 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x73F JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D1 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC68D4283 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x340 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x383 DUP3 PUSH2 0x35A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x393 DUP2 PUSH2 0x379 JUMP JUMPDEST DUP2 EQ PUSH2 0x39D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3AE DUP2 PUSH2 0x38A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C9 JUMPI PUSH2 0x3C8 PUSH2 0x352 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x3D6 DUP5 DUP3 DUP6 ADD PUSH2 0x3A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x42D DUP3 PUSH2 0x3E7 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x44C JUMPI PUSH2 0x44B PUSH2 0x3F7 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x45E PUSH2 0x349 JUMP JUMPDEST SWAP1 POP PUSH2 0x46A DUP3 DUP3 PUSH2 0x424 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x489 JUMPI PUSH2 0x488 PUSH2 0x3F7 JUMP JUMPDEST JUMPDEST PUSH2 0x492 DUP3 PUSH2 0x3E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4BF PUSH2 0x4BA DUP5 PUSH2 0x46F JUMP JUMPDEST PUSH2 0x455 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x4DB JUMPI PUSH2 0x4DA PUSH2 0x3E3 JUMP JUMPDEST JUMPDEST PUSH2 0x4E6 DUP5 DUP3 DUP6 PUSH2 0x49F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x502 JUMPI PUSH2 0x501 PUSH2 0x3DF JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x512 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x4AD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x52D DUP2 PUSH2 0x51B JUMP JUMPDEST DUP2 EQ PUSH2 0x537 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x548 DUP2 PUSH2 0x524 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x567 JUMPI PUSH2 0x566 PUSH2 0x352 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x574 DUP9 DUP3 DUP10 ADD PUSH2 0x3A0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x595 JUMPI PUSH2 0x594 PUSH2 0x356 JUMP JUMPDEST JUMPDEST PUSH2 0x5A1 DUP9 DUP3 DUP10 ADD PUSH2 0x4EE JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5C2 JUMPI PUSH2 0x5C1 PUSH2 0x356 JUMP JUMPDEST JUMPDEST PUSH2 0x5CE DUP9 DUP3 DUP10 ADD PUSH2 0x4EE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x5DF DUP9 DUP3 DUP10 ADD PUSH2 0x3A0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x5F0 DUP9 DUP3 DUP10 ADD PUSH2 0x53A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x606 DUP2 PUSH2 0x379 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x61F PUSH0 DUP4 ADD DUP5 PUSH2 0x5FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x648 PUSH2 0x643 PUSH2 0x63E DUP5 PUSH2 0x35A JUMP JUMPDEST PUSH2 0x625 JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x659 DUP3 PUSH2 0x62E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x66A DUP3 PUSH2 0x64F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x67A DUP2 PUSH2 0x660 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x6AF PUSH2 0x6AA PUSH2 0x6A5 DUP5 PUSH2 0x680 JUMP JUMPDEST PUSH2 0x625 JUMP JUMPDEST PUSH2 0x689 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6BF DUP2 PUSH2 0x695 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6FC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6E1 JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x711 DUP3 PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0x71B DUP2 DUP6 PUSH2 0x6CF JUMP JUMPDEST SWAP4 POP PUSH2 0x72B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH2 0x734 DUP2 PUSH2 0x3E7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x752 PUSH0 DUP4 ADD DUP8 PUSH2 0x671 JUMP JUMPDEST PUSH2 0x75F PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x6B6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x771 DUP2 DUP6 PUSH2 0x707 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x785 DUP2 DUP5 PUSH2 0x707 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x799 DUP2 PUSH2 0x51B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7C3 DUP3 PUSH2 0x79F JUMP JUMPDEST PUSH2 0x7CD DUP2 DUP6 PUSH2 0x7A9 JUMP JUMPDEST SWAP4 POP PUSH2 0x7DD DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH2 0x7E6 DUP2 PUSH2 0x3E7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x804 PUSH0 DUP4 ADD DUP7 PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x811 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x790 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x823 DUP2 DUP5 PUSH2 0x7B9 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP PUSH14 0x2A610499CAF65837793A6D181713 0xBE 0xC KECCAK256 DUP6 0xBD 0x4F GASLIMIT MUL DUP2 0xEC DUP7 MUL 0xC8 0xDF 0xAF 0xEA PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "277:628:17:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_34": {
									"entryPoint": null,
									"id": 34,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_delegate_10": {
									"entryPoint": 483,
									"id": 10,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_fallback_26": {
									"entryPoint": 135,
									"id": 26,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_implementation_2031": {
									"entryPoint": 443,
									"id": 2031,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_initialize_1856": {
									"entryPoint": 514,
									"id": 1856,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_mint_1895": {
									"entryPoint": 730,
									"id": 1895,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@initializeProxy_2022": {
									"entryPoint": 153,
									"id": 2022,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@initialize_1799": {
									"entryPoint": 400,
									"id": 1799,
									"parameterSlots": 5,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_string_memory_ptr": {
									"entryPoint": 1197,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 928,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_string_memory_ptr": {
									"entryPoint": 1262,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 1338,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 948,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_addresst_uint256": {
									"entryPoint": 1358,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 1533,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 1977,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_contract$_IERC20_$113_to_t_address_fromStack": {
									"entryPoint": 1649,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_rational_18_by_1_to_t_uint8_fromStack": {
									"entryPoint": 1718,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 1799,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 1936,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 1548,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 2033,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$113_t_rational_18_by_1_t_string_memory_ptr_t_string_memory_ptr__to_t_address_t_uint8_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1855,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 1109,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 841,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_string_memory_ptr": {
									"entryPoint": 1135,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 1951,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 1733,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 1961,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 1743,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 889,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_rational_18_by_1": {
									"entryPoint": 1664,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 858,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1307,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 1673,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IERC20_$113_to_t_address": {
									"entryPoint": 1632,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_rational_18_by_1_to_t_uint8": {
									"entryPoint": 1685,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 1615,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 1582,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory_with_cleanup": {
									"entryPoint": 1183,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 1759,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 1060,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"identity": {
									"entryPoint": 1573,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 1015,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 991,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 995,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 854,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 850,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 999,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 906,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 1316,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:9545:21",
										"nodeType": "YulBlock",
										"src": "0:9545:21",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:21",
													"nodeType": "YulBlock",
													"src": "47:35:21",
													"statements": [
														{
															"nativeSrc": "57:19:21",
															"nodeType": "YulAssignment",
															"src": "57:19:21",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:21",
																		"nodeType": "YulLiteral",
																		"src": "73:2:21",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:21"
																},
																"nativeSrc": "67:9:21",
																"nodeType": "YulFunctionCall",
																"src": "67:9:21"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:21"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:21",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:21",
														"nodeType": "YulTypedName",
														"src": "40:6:21",
														"type": ""
													}
												],
												"src": "7:75:21"
											},
											{
												"body": {
													"nativeSrc": "177:28:21",
													"nodeType": "YulBlock",
													"src": "177:28:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:21",
																		"nodeType": "YulLiteral",
																		"src": "194:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:21",
																		"nodeType": "YulLiteral",
																		"src": "197:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:21"
																},
																"nativeSrc": "187:12:21",
																"nodeType": "YulFunctionCall",
																"src": "187:12:21"
															},
															"nativeSrc": "187:12:21",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:21"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:21",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:21"
											},
											{
												"body": {
													"nativeSrc": "300:28:21",
													"nodeType": "YulBlock",
													"src": "300:28:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:21",
																		"nodeType": "YulLiteral",
																		"src": "317:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:21",
																		"nodeType": "YulLiteral",
																		"src": "320:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:21"
																},
																"nativeSrc": "310:12:21",
																"nodeType": "YulFunctionCall",
																"src": "310:12:21"
															},
															"nativeSrc": "310:12:21",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:21"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:21",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:21"
											},
											{
												"body": {
													"nativeSrc": "379:81:21",
													"nodeType": "YulBlock",
													"src": "379:81:21",
													"statements": [
														{
															"nativeSrc": "389:65:21",
															"nodeType": "YulAssignment",
															"src": "389:65:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:21",
																		"nodeType": "YulLiteral",
																		"src": "411:42:21",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:21"
																},
																"nativeSrc": "400:54:21",
																"nodeType": "YulFunctionCall",
																"src": "400:54:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:21",
														"nodeType": "YulTypedName",
														"src": "361:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:21",
														"nodeType": "YulTypedName",
														"src": "371:7:21",
														"type": ""
													}
												],
												"src": "334:126:21"
											},
											{
												"body": {
													"nativeSrc": "511:51:21",
													"nodeType": "YulBlock",
													"src": "511:51:21",
													"statements": [
														{
															"nativeSrc": "521:35:21",
															"nodeType": "YulAssignment",
															"src": "521:35:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:21",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:21"
																},
																"nativeSrc": "532:24:21",
																"nodeType": "YulFunctionCall",
																"src": "532:24:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:21",
														"nodeType": "YulTypedName",
														"src": "493:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:21",
														"nodeType": "YulTypedName",
														"src": "503:7:21",
														"type": ""
													}
												],
												"src": "466:96:21"
											},
											{
												"body": {
													"nativeSrc": "611:79:21",
													"nodeType": "YulBlock",
													"src": "611:79:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:21",
																"nodeType": "YulBlock",
																"src": "668:16:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:21",
																					"nodeType": "YulLiteral",
																					"src": "677:1:21",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:21",
																					"nodeType": "YulLiteral",
																					"src": "680:1:21",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:21"
																			},
																			"nativeSrc": "670:12:21",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:21"
																		},
																		"nativeSrc": "670:12:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:21"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:21",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:21"
																				},
																				"nativeSrc": "641:24:21",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:21"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:21"
																		},
																		"nativeSrc": "631:35:21",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:21"
																},
																"nativeSrc": "624:43:21",
																"nodeType": "YulFunctionCall",
																"src": "624:43:21"
															},
															"nativeSrc": "621:63:21",
															"nodeType": "YulIf",
															"src": "621:63:21"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:21",
														"nodeType": "YulTypedName",
														"src": "604:5:21",
														"type": ""
													}
												],
												"src": "568:122:21"
											},
											{
												"body": {
													"nativeSrc": "748:87:21",
													"nodeType": "YulBlock",
													"src": "748:87:21",
													"statements": [
														{
															"nativeSrc": "758:29:21",
															"nodeType": "YulAssignment",
															"src": "758:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "780:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:21"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "767:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:21"
																},
																"nativeSrc": "767:20:21",
																"nodeType": "YulFunctionCall",
																"src": "767:20:21"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "758:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "823:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:21"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "796:26:21",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:21"
																},
																"nativeSrc": "796:33:21",
																"nodeType": "YulFunctionCall",
																"src": "796:33:21"
															},
															"nativeSrc": "796:33:21",
															"nodeType": "YulExpressionStatement",
															"src": "796:33:21"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "696:139:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "726:6:21",
														"nodeType": "YulTypedName",
														"src": "726:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "734:3:21",
														"nodeType": "YulTypedName",
														"src": "734:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "742:5:21",
														"nodeType": "YulTypedName",
														"src": "742:5:21",
														"type": ""
													}
												],
												"src": "696:139:21"
											},
											{
												"body": {
													"nativeSrc": "907:263:21",
													"nodeType": "YulBlock",
													"src": "907:263:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "953:83:21",
																"nodeType": "YulBlock",
																"src": "953:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "955:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "955:77:21"
																			},
																			"nativeSrc": "955:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "955:79:21"
																		},
																		"nativeSrc": "955:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "955:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "928:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "928:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "937:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "937:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "924:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "924:3:21"
																		},
																		"nativeSrc": "924:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "924:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "949:2:21",
																		"nodeType": "YulLiteral",
																		"src": "949:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "920:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "920:3:21"
																},
																"nativeSrc": "920:32:21",
																"nodeType": "YulFunctionCall",
																"src": "920:32:21"
															},
															"nativeSrc": "917:119:21",
															"nodeType": "YulIf",
															"src": "917:119:21"
														},
														{
															"nativeSrc": "1046:117:21",
															"nodeType": "YulBlock",
															"src": "1046:117:21",
															"statements": [
																{
																	"nativeSrc": "1061:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1061:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1075:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1075:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1065:6:21",
																			"nodeType": "YulTypedName",
																			"src": "1065:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1090:63:21",
																	"nodeType": "YulAssignment",
																	"src": "1090:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1125:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "1125:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1136:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "1136:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1121:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "1121:3:21"
																				},
																				"nativeSrc": "1121:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "1121:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1145:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "1145:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "1100:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "1100:20:21"
																		},
																		"nativeSrc": "1100:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1100:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1090:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "1090:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "841:329:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "877:9:21",
														"nodeType": "YulTypedName",
														"src": "877:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "888:7:21",
														"nodeType": "YulTypedName",
														"src": "888:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "900:6:21",
														"nodeType": "YulTypedName",
														"src": "900:6:21",
														"type": ""
													}
												],
												"src": "841:329:21"
											},
											{
												"body": {
													"nativeSrc": "1265:28:21",
													"nodeType": "YulBlock",
													"src": "1265:28:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1282:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1282:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1285:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1285:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1275:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1275:6:21"
																},
																"nativeSrc": "1275:12:21",
																"nodeType": "YulFunctionCall",
																"src": "1275:12:21"
															},
															"nativeSrc": "1275:12:21",
															"nodeType": "YulExpressionStatement",
															"src": "1275:12:21"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nativeSrc": "1176:117:21",
												"nodeType": "YulFunctionDefinition",
												"src": "1176:117:21"
											},
											{
												"body": {
													"nativeSrc": "1388:28:21",
													"nodeType": "YulBlock",
													"src": "1388:28:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1405:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1405:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1408:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1408:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1398:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1398:6:21"
																},
																"nativeSrc": "1398:12:21",
																"nodeType": "YulFunctionCall",
																"src": "1398:12:21"
															},
															"nativeSrc": "1398:12:21",
															"nodeType": "YulExpressionStatement",
															"src": "1398:12:21"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nativeSrc": "1299:117:21",
												"nodeType": "YulFunctionDefinition",
												"src": "1299:117:21"
											},
											{
												"body": {
													"nativeSrc": "1470:54:21",
													"nodeType": "YulBlock",
													"src": "1470:54:21",
													"statements": [
														{
															"nativeSrc": "1480:38:21",
															"nodeType": "YulAssignment",
															"src": "1480:38:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1498:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "1498:5:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1505:2:21",
																				"nodeType": "YulLiteral",
																				"src": "1505:2:21",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1494:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "1494:3:21"
																		},
																		"nativeSrc": "1494:14:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1494:14:21"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1514:2:21",
																				"nodeType": "YulLiteral",
																				"src": "1514:2:21",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "1510:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "1510:3:21"
																		},
																		"nativeSrc": "1510:7:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1510:7:21"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1490:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "1490:3:21"
																},
																"nativeSrc": "1490:28:21",
																"nodeType": "YulFunctionCall",
																"src": "1490:28:21"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "1480:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1480:6:21"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "1422:102:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1453:5:21",
														"nodeType": "YulTypedName",
														"src": "1453:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "1463:6:21",
														"nodeType": "YulTypedName",
														"src": "1463:6:21",
														"type": ""
													}
												],
												"src": "1422:102:21"
											},
											{
												"body": {
													"nativeSrc": "1558:152:21",
													"nodeType": "YulBlock",
													"src": "1558:152:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1575:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1575:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1578:77:21",
																		"nodeType": "YulLiteral",
																		"src": "1578:77:21",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1568:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1568:6:21"
																},
																"nativeSrc": "1568:88:21",
																"nodeType": "YulFunctionCall",
																"src": "1568:88:21"
															},
															"nativeSrc": "1568:88:21",
															"nodeType": "YulExpressionStatement",
															"src": "1568:88:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1672:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1672:1:21",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1675:4:21",
																		"nodeType": "YulLiteral",
																		"src": "1675:4:21",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1665:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1665:6:21"
																},
																"nativeSrc": "1665:15:21",
																"nodeType": "YulFunctionCall",
																"src": "1665:15:21"
															},
															"nativeSrc": "1665:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "1665:15:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1696:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1696:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1699:4:21",
																		"nodeType": "YulLiteral",
																		"src": "1699:4:21",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1689:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1689:6:21"
																},
																"nativeSrc": "1689:15:21",
																"nodeType": "YulFunctionCall",
																"src": "1689:15:21"
															},
															"nativeSrc": "1689:15:21",
															"nodeType": "YulExpressionStatement",
															"src": "1689:15:21"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "1530:180:21",
												"nodeType": "YulFunctionDefinition",
												"src": "1530:180:21"
											},
											{
												"body": {
													"nativeSrc": "1759:238:21",
													"nodeType": "YulBlock",
													"src": "1759:238:21",
													"statements": [
														{
															"nativeSrc": "1769:58:21",
															"nodeType": "YulVariableDeclaration",
															"src": "1769:58:21",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "1791:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "1791:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nativeSrc": "1821:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "1821:4:21"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "1799:21:21",
																			"nodeType": "YulIdentifier",
																			"src": "1799:21:21"
																		},
																		"nativeSrc": "1799:27:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1799:27:21"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1787:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "1787:3:21"
																},
																"nativeSrc": "1787:40:21",
																"nodeType": "YulFunctionCall",
																"src": "1787:40:21"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nativeSrc": "1773:10:21",
																	"nodeType": "YulTypedName",
																	"src": "1773:10:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1938:22:21",
																"nodeType": "YulBlock",
																"src": "1938:22:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1940:16:21",
																				"nodeType": "YulIdentifier",
																				"src": "1940:16:21"
																			},
																			"nativeSrc": "1940:18:21",
																			"nodeType": "YulFunctionCall",
																			"src": "1940:18:21"
																		},
																		"nativeSrc": "1940:18:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "1940:18:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "1881:10:21",
																				"nodeType": "YulIdentifier",
																				"src": "1881:10:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1893:18:21",
																				"nodeType": "YulLiteral",
																				"src": "1893:18:21",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "1878:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "1878:2:21"
																		},
																		"nativeSrc": "1878:34:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1878:34:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "1917:10:21",
																				"nodeType": "YulIdentifier",
																				"src": "1917:10:21"
																			},
																			{
																				"name": "memPtr",
																				"nativeSrc": "1929:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "1929:6:21"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "1914:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "1914:2:21"
																		},
																		"nativeSrc": "1914:22:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1914:22:21"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "1875:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "1875:2:21"
																},
																"nativeSrc": "1875:62:21",
																"nodeType": "YulFunctionCall",
																"src": "1875:62:21"
															},
															"nativeSrc": "1872:88:21",
															"nodeType": "YulIf",
															"src": "1872:88:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1976:2:21",
																		"nodeType": "YulLiteral",
																		"src": "1976:2:21",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nativeSrc": "1980:10:21",
																		"nodeType": "YulIdentifier",
																		"src": "1980:10:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1969:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "1969:6:21"
																},
																"nativeSrc": "1969:22:21",
																"nodeType": "YulFunctionCall",
																"src": "1969:22:21"
															},
															"nativeSrc": "1969:22:21",
															"nodeType": "YulExpressionStatement",
															"src": "1969:22:21"
														}
													]
												},
												"name": "finalize_allocation",
												"nativeSrc": "1716:281:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "1745:6:21",
														"nodeType": "YulTypedName",
														"src": "1745:6:21",
														"type": ""
													},
													{
														"name": "size",
														"nativeSrc": "1753:4:21",
														"nodeType": "YulTypedName",
														"src": "1753:4:21",
														"type": ""
													}
												],
												"src": "1716:281:21"
											},
											{
												"body": {
													"nativeSrc": "2044:88:21",
													"nodeType": "YulBlock",
													"src": "2044:88:21",
													"statements": [
														{
															"nativeSrc": "2054:30:21",
															"nodeType": "YulAssignment",
															"src": "2054:30:21",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nativeSrc": "2064:18:21",
																	"nodeType": "YulIdentifier",
																	"src": "2064:18:21"
																},
																"nativeSrc": "2064:20:21",
																"nodeType": "YulFunctionCall",
																"src": "2064:20:21"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "2054:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "2054:6:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "2113:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "2113:6:21"
																	},
																	{
																		"name": "size",
																		"nativeSrc": "2121:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "2121:4:21"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nativeSrc": "2093:19:21",
																	"nodeType": "YulIdentifier",
																	"src": "2093:19:21"
																},
																"nativeSrc": "2093:33:21",
																"nodeType": "YulFunctionCall",
																"src": "2093:33:21"
															},
															"nativeSrc": "2093:33:21",
															"nodeType": "YulExpressionStatement",
															"src": "2093:33:21"
														}
													]
												},
												"name": "allocate_memory",
												"nativeSrc": "2003:129:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nativeSrc": "2028:4:21",
														"nodeType": "YulTypedName",
														"src": "2028:4:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "2037:6:21",
														"nodeType": "YulTypedName",
														"src": "2037:6:21",
														"type": ""
													}
												],
												"src": "2003:129:21"
											},
											{
												"body": {
													"nativeSrc": "2205:241:21",
													"nodeType": "YulBlock",
													"src": "2205:241:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "2310:22:21",
																"nodeType": "YulBlock",
																"src": "2310:22:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "2312:16:21",
																				"nodeType": "YulIdentifier",
																				"src": "2312:16:21"
																			},
																			"nativeSrc": "2312:18:21",
																			"nodeType": "YulFunctionCall",
																			"src": "2312:18:21"
																		},
																		"nativeSrc": "2312:18:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "2312:18:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "2282:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "2282:6:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2290:18:21",
																		"nodeType": "YulLiteral",
																		"src": "2290:18:21",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2279:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "2279:2:21"
																},
																"nativeSrc": "2279:30:21",
																"nodeType": "YulFunctionCall",
																"src": "2279:30:21"
															},
															"nativeSrc": "2276:56:21",
															"nodeType": "YulIf",
															"src": "2276:56:21"
														},
														{
															"nativeSrc": "2342:37:21",
															"nodeType": "YulAssignment",
															"src": "2342:37:21",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "2372:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "2372:6:21"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nativeSrc": "2350:21:21",
																	"nodeType": "YulIdentifier",
																	"src": "2350:21:21"
																},
																"nativeSrc": "2350:29:21",
																"nodeType": "YulFunctionCall",
																"src": "2350:29:21"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nativeSrc": "2342:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "2342:4:21"
																}
															]
														},
														{
															"nativeSrc": "2416:23:21",
															"nodeType": "YulAssignment",
															"src": "2416:23:21",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nativeSrc": "2428:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "2428:4:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2434:4:21",
																		"nodeType": "YulLiteral",
																		"src": "2434:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2424:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "2424:3:21"
																},
																"nativeSrc": "2424:15:21",
																"nodeType": "YulFunctionCall",
																"src": "2424:15:21"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nativeSrc": "2416:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "2416:4:21"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_string_memory_ptr",
												"nativeSrc": "2138:308:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nativeSrc": "2189:6:21",
														"nodeType": "YulTypedName",
														"src": "2189:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nativeSrc": "2200:4:21",
														"nodeType": "YulTypedName",
														"src": "2200:4:21",
														"type": ""
													}
												],
												"src": "2138:308:21"
											},
											{
												"body": {
													"nativeSrc": "2516:82:21",
													"nodeType": "YulBlock",
													"src": "2516:82:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "2539:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "2539:3:21"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "2544:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "2544:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2549:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "2549:6:21"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nativeSrc": "2526:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "2526:12:21"
																},
																"nativeSrc": "2526:30:21",
																"nodeType": "YulFunctionCall",
																"src": "2526:30:21"
															},
															"nativeSrc": "2526:30:21",
															"nodeType": "YulExpressionStatement",
															"src": "2526:30:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "2576:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "2576:3:21"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "2581:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "2581:6:21"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2572:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "2572:3:21"
																		},
																		"nativeSrc": "2572:16:21",
																		"nodeType": "YulFunctionCall",
																		"src": "2572:16:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2590:1:21",
																		"nodeType": "YulLiteral",
																		"src": "2590:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2565:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "2565:6:21"
																},
																"nativeSrc": "2565:27:21",
																"nodeType": "YulFunctionCall",
																"src": "2565:27:21"
															},
															"nativeSrc": "2565:27:21",
															"nodeType": "YulExpressionStatement",
															"src": "2565:27:21"
														}
													]
												},
												"name": "copy_calldata_to_memory_with_cleanup",
												"nativeSrc": "2452:146:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "2498:3:21",
														"nodeType": "YulTypedName",
														"src": "2498:3:21",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "2503:3:21",
														"nodeType": "YulTypedName",
														"src": "2503:3:21",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "2508:6:21",
														"nodeType": "YulTypedName",
														"src": "2508:6:21",
														"type": ""
													}
												],
												"src": "2452:146:21"
											},
											{
												"body": {
													"nativeSrc": "2688:341:21",
													"nodeType": "YulBlock",
													"src": "2688:341:21",
													"statements": [
														{
															"nativeSrc": "2698:75:21",
															"nodeType": "YulAssignment",
															"src": "2698:75:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2765:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "2765:6:21"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_string_memory_ptr",
																			"nativeSrc": "2723:41:21",
																			"nodeType": "YulIdentifier",
																			"src": "2723:41:21"
																		},
																		"nativeSrc": "2723:49:21",
																		"nodeType": "YulFunctionCall",
																		"src": "2723:49:21"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nativeSrc": "2707:15:21",
																	"nodeType": "YulIdentifier",
																	"src": "2707:15:21"
																},
																"nativeSrc": "2707:66:21",
																"nodeType": "YulFunctionCall",
																"src": "2707:66:21"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "2698:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "2698:5:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "2789:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "2789:5:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2796:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "2796:6:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2782:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "2782:6:21"
																},
																"nativeSrc": "2782:21:21",
																"nodeType": "YulFunctionCall",
																"src": "2782:21:21"
															},
															"nativeSrc": "2782:21:21",
															"nodeType": "YulExpressionStatement",
															"src": "2782:21:21"
														},
														{
															"nativeSrc": "2812:27:21",
															"nodeType": "YulVariableDeclaration",
															"src": "2812:27:21",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "2827:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "2827:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2834:4:21",
																		"nodeType": "YulLiteral",
																		"src": "2834:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2823:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "2823:3:21"
																},
																"nativeSrc": "2823:16:21",
																"nodeType": "YulFunctionCall",
																"src": "2823:16:21"
															},
															"variables": [
																{
																	"name": "dst",
																	"nativeSrc": "2816:3:21",
																	"nodeType": "YulTypedName",
																	"src": "2816:3:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2877:83:21",
																"nodeType": "YulBlock",
																"src": "2877:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nativeSrc": "2879:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "2879:77:21"
																			},
																			"nativeSrc": "2879:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "2879:79:21"
																		},
																		"nativeSrc": "2879:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "2879:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nativeSrc": "2858:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "2858:3:21"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "2863:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "2863:6:21"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2854:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "2854:3:21"
																		},
																		"nativeSrc": "2854:16:21",
																		"nodeType": "YulFunctionCall",
																		"src": "2854:16:21"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "2872:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "2872:3:21"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2851:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "2851:2:21"
																},
																"nativeSrc": "2851:25:21",
																"nodeType": "YulFunctionCall",
																"src": "2851:25:21"
															},
															"nativeSrc": "2848:112:21",
															"nodeType": "YulIf",
															"src": "2848:112:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "3006:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "3006:3:21"
																	},
																	{
																		"name": "dst",
																		"nativeSrc": "3011:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "3011:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3016:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "3016:6:21"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory_with_cleanup",
																	"nativeSrc": "2969:36:21",
																	"nodeType": "YulIdentifier",
																	"src": "2969:36:21"
																},
																"nativeSrc": "2969:54:21",
																"nodeType": "YulFunctionCall",
																"src": "2969:54:21"
															},
															"nativeSrc": "2969:54:21",
															"nodeType": "YulExpressionStatement",
															"src": "2969:54:21"
														}
													]
												},
												"name": "abi_decode_available_length_t_string_memory_ptr",
												"nativeSrc": "2604:425:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "2661:3:21",
														"nodeType": "YulTypedName",
														"src": "2661:3:21",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "2666:6:21",
														"nodeType": "YulTypedName",
														"src": "2666:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2674:3:21",
														"nodeType": "YulTypedName",
														"src": "2674:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "2682:5:21",
														"nodeType": "YulTypedName",
														"src": "2682:5:21",
														"type": ""
													}
												],
												"src": "2604:425:21"
											},
											{
												"body": {
													"nativeSrc": "3111:278:21",
													"nodeType": "YulBlock",
													"src": "3111:278:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "3160:83:21",
																"nodeType": "YulBlock",
																"src": "3160:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nativeSrc": "3162:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "3162:77:21"
																			},
																			"nativeSrc": "3162:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "3162:79:21"
																		},
																		"nativeSrc": "3162:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "3162:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "3139:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "3139:6:21"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3147:4:21",
																						"nodeType": "YulLiteral",
																						"src": "3147:4:21",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3135:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "3135:3:21"
																				},
																				"nativeSrc": "3135:17:21",
																				"nodeType": "YulFunctionCall",
																				"src": "3135:17:21"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "3154:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "3154:3:21"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "3131:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "3131:3:21"
																		},
																		"nativeSrc": "3131:27:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3131:27:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3124:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "3124:6:21"
																},
																"nativeSrc": "3124:35:21",
																"nodeType": "YulFunctionCall",
																"src": "3124:35:21"
															},
															"nativeSrc": "3121:122:21",
															"nodeType": "YulIf",
															"src": "3121:122:21"
														},
														{
															"nativeSrc": "3252:34:21",
															"nodeType": "YulVariableDeclaration",
															"src": "3252:34:21",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3279:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "3279:6:21"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3266:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "3266:12:21"
																},
																"nativeSrc": "3266:20:21",
																"nodeType": "YulFunctionCall",
																"src": "3266:20:21"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3256:6:21",
																	"nodeType": "YulTypedName",
																	"src": "3256:6:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3295:88:21",
															"nodeType": "YulAssignment",
															"src": "3295:88:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "3356:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "3356:6:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3364:4:21",
																				"nodeType": "YulLiteral",
																				"src": "3364:4:21",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3352:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "3352:3:21"
																		},
																		"nativeSrc": "3352:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3352:17:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3371:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "3371:6:21"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "3379:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "3379:3:21"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_string_memory_ptr",
																	"nativeSrc": "3304:47:21",
																	"nodeType": "YulIdentifier",
																	"src": "3304:47:21"
																},
																"nativeSrc": "3304:79:21",
																"nodeType": "YulFunctionCall",
																"src": "3304:79:21"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "3295:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "3295:5:21"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_memory_ptr",
												"nativeSrc": "3049:340:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "3089:6:21",
														"nodeType": "YulTypedName",
														"src": "3089:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3097:3:21",
														"nodeType": "YulTypedName",
														"src": "3097:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "3105:5:21",
														"nodeType": "YulTypedName",
														"src": "3105:5:21",
														"type": ""
													}
												],
												"src": "3049:340:21"
											},
											{
												"body": {
													"nativeSrc": "3440:32:21",
													"nodeType": "YulBlock",
													"src": "3440:32:21",
													"statements": [
														{
															"nativeSrc": "3450:16:21",
															"nodeType": "YulAssignment",
															"src": "3450:16:21",
															"value": {
																"name": "value",
																"nativeSrc": "3461:5:21",
																"nodeType": "YulIdentifier",
																"src": "3461:5:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "3450:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "3450:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "3395:77:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3422:5:21",
														"nodeType": "YulTypedName",
														"src": "3422:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "3432:7:21",
														"nodeType": "YulTypedName",
														"src": "3432:7:21",
														"type": ""
													}
												],
												"src": "3395:77:21"
											},
											{
												"body": {
													"nativeSrc": "3521:79:21",
													"nodeType": "YulBlock",
													"src": "3521:79:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "3578:16:21",
																"nodeType": "YulBlock",
																"src": "3578:16:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3587:1:21",
																					"nodeType": "YulLiteral",
																					"src": "3587:1:21",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3590:1:21",
																					"nodeType": "YulLiteral",
																					"src": "3590:1:21",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3580:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "3580:6:21"
																			},
																			"nativeSrc": "3580:12:21",
																			"nodeType": "YulFunctionCall",
																			"src": "3580:12:21"
																		},
																		"nativeSrc": "3580:12:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "3580:12:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3544:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "3544:5:21"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "3569:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "3569:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "3551:17:21",
																					"nodeType": "YulIdentifier",
																					"src": "3551:17:21"
																				},
																				"nativeSrc": "3551:24:21",
																				"nodeType": "YulFunctionCall",
																				"src": "3551:24:21"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "3541:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "3541:2:21"
																		},
																		"nativeSrc": "3541:35:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3541:35:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3534:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "3534:6:21"
																},
																"nativeSrc": "3534:43:21",
																"nodeType": "YulFunctionCall",
																"src": "3534:43:21"
															},
															"nativeSrc": "3531:63:21",
															"nodeType": "YulIf",
															"src": "3531:63:21"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "3478:122:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3514:5:21",
														"nodeType": "YulTypedName",
														"src": "3514:5:21",
														"type": ""
													}
												],
												"src": "3478:122:21"
											},
											{
												"body": {
													"nativeSrc": "3658:87:21",
													"nodeType": "YulBlock",
													"src": "3658:87:21",
													"statements": [
														{
															"nativeSrc": "3668:29:21",
															"nodeType": "YulAssignment",
															"src": "3668:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3690:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "3690:6:21"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3677:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "3677:12:21"
																},
																"nativeSrc": "3677:20:21",
																"nodeType": "YulFunctionCall",
																"src": "3677:20:21"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "3668:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "3668:5:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3733:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "3733:5:21"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "3706:26:21",
																	"nodeType": "YulIdentifier",
																	"src": "3706:26:21"
																},
																"nativeSrc": "3706:33:21",
																"nodeType": "YulFunctionCall",
																"src": "3706:33:21"
															},
															"nativeSrc": "3706:33:21",
															"nodeType": "YulExpressionStatement",
															"src": "3706:33:21"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "3606:139:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "3636:6:21",
														"nodeType": "YulTypedName",
														"src": "3636:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3644:3:21",
														"nodeType": "YulTypedName",
														"src": "3644:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "3652:5:21",
														"nodeType": "YulTypedName",
														"src": "3652:5:21",
														"type": ""
													}
												],
												"src": "3606:139:21"
											},
											{
												"body": {
													"nativeSrc": "3905:1117:21",
													"nodeType": "YulBlock",
													"src": "3905:1117:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "3952:83:21",
																"nodeType": "YulBlock",
																"src": "3952:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3954:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "3954:77:21"
																			},
																			"nativeSrc": "3954:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "3954:79:21"
																		},
																		"nativeSrc": "3954:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "3954:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3926:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "3926:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3935:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "3935:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3922:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "3922:3:21"
																		},
																		"nativeSrc": "3922:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "3922:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3947:3:21",
																		"nodeType": "YulLiteral",
																		"src": "3947:3:21",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3918:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "3918:3:21"
																},
																"nativeSrc": "3918:33:21",
																"nodeType": "YulFunctionCall",
																"src": "3918:33:21"
															},
															"nativeSrc": "3915:120:21",
															"nodeType": "YulIf",
															"src": "3915:120:21"
														},
														{
															"nativeSrc": "4045:117:21",
															"nodeType": "YulBlock",
															"src": "4045:117:21",
															"statements": [
																{
																	"nativeSrc": "4060:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4060:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4074:1:21",
																		"nodeType": "YulLiteral",
																		"src": "4074:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4064:6:21",
																			"nodeType": "YulTypedName",
																			"src": "4064:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4089:63:21",
																	"nodeType": "YulAssignment",
																	"src": "4089:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4124:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4124:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4135:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4135:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4120:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4120:3:21"
																				},
																				"nativeSrc": "4120:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4120:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4144:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "4144:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4099:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "4099:20:21"
																		},
																		"nativeSrc": "4099:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4099:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4089:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "4089:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4172:288:21",
															"nodeType": "YulBlock",
															"src": "4172:288:21",
															"statements": [
																{
																	"nativeSrc": "4187:46:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4187:46:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4218:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4218:9:21"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4229:2:21",
																						"nodeType": "YulLiteral",
																						"src": "4229:2:21",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4214:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4214:3:21"
																				},
																				"nativeSrc": "4214:18:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4214:18:21"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nativeSrc": "4201:12:21",
																			"nodeType": "YulIdentifier",
																			"src": "4201:12:21"
																		},
																		"nativeSrc": "4201:32:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4201:32:21"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4191:6:21",
																			"nodeType": "YulTypedName",
																			"src": "4191:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nativeSrc": "4280:83:21",
																		"nodeType": "YulBlock",
																		"src": "4280:83:21",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nativeSrc": "4282:77:21",
																						"nodeType": "YulIdentifier",
																						"src": "4282:77:21"
																					},
																					"nativeSrc": "4282:79:21",
																					"nodeType": "YulFunctionCall",
																					"src": "4282:79:21"
																				},
																				"nativeSrc": "4282:79:21",
																				"nodeType": "YulExpressionStatement",
																				"src": "4282:79:21"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "4252:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "4252:6:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4260:18:21",
																				"nodeType": "YulLiteral",
																				"src": "4260:18:21",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "4249:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "4249:2:21"
																		},
																		"nativeSrc": "4249:30:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4249:30:21"
																	},
																	"nativeSrc": "4246:117:21",
																	"nodeType": "YulIf",
																	"src": "4246:117:21"
																},
																{
																	"nativeSrc": "4377:73:21",
																	"nodeType": "YulAssignment",
																	"src": "4377:73:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4422:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4422:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4433:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4433:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4418:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4418:3:21"
																				},
																				"nativeSrc": "4418:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4418:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4442:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "4442:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr",
																			"nativeSrc": "4387:30:21",
																			"nodeType": "YulIdentifier",
																			"src": "4387:30:21"
																		},
																		"nativeSrc": "4387:63:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4387:63:21"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4377:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "4377:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4470:288:21",
															"nodeType": "YulBlock",
															"src": "4470:288:21",
															"statements": [
																{
																	"nativeSrc": "4485:46:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4485:46:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4516:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4516:9:21"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4527:2:21",
																						"nodeType": "YulLiteral",
																						"src": "4527:2:21",
																						"type": "",
																						"value": "64"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4512:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4512:3:21"
																				},
																				"nativeSrc": "4512:18:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4512:18:21"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nativeSrc": "4499:12:21",
																			"nodeType": "YulIdentifier",
																			"src": "4499:12:21"
																		},
																		"nativeSrc": "4499:32:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4499:32:21"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4489:6:21",
																			"nodeType": "YulTypedName",
																			"src": "4489:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nativeSrc": "4578:83:21",
																		"nodeType": "YulBlock",
																		"src": "4578:83:21",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nativeSrc": "4580:77:21",
																						"nodeType": "YulIdentifier",
																						"src": "4580:77:21"
																					},
																					"nativeSrc": "4580:79:21",
																					"nodeType": "YulFunctionCall",
																					"src": "4580:79:21"
																				},
																				"nativeSrc": "4580:79:21",
																				"nodeType": "YulExpressionStatement",
																				"src": "4580:79:21"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "4550:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "4550:6:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4558:18:21",
																				"nodeType": "YulLiteral",
																				"src": "4558:18:21",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "4547:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "4547:2:21"
																		},
																		"nativeSrc": "4547:30:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4547:30:21"
																	},
																	"nativeSrc": "4544:117:21",
																	"nodeType": "YulIf",
																	"src": "4544:117:21"
																},
																{
																	"nativeSrc": "4675:73:21",
																	"nodeType": "YulAssignment",
																	"src": "4675:73:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4720:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4720:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4731:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4731:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4716:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4716:3:21"
																				},
																				"nativeSrc": "4716:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4716:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4740:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "4740:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr",
																			"nativeSrc": "4685:30:21",
																			"nodeType": "YulIdentifier",
																			"src": "4685:30:21"
																		},
																		"nativeSrc": "4685:63:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4685:63:21"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4675:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "4675:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4768:118:21",
															"nodeType": "YulBlock",
															"src": "4768:118:21",
															"statements": [
																{
																	"nativeSrc": "4783:16:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4783:16:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4797:2:21",
																		"nodeType": "YulLiteral",
																		"src": "4797:2:21",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4787:6:21",
																			"nodeType": "YulTypedName",
																			"src": "4787:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4813:63:21",
																	"nodeType": "YulAssignment",
																	"src": "4813:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4848:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4848:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4859:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4859:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4844:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4844:3:21"
																				},
																				"nativeSrc": "4844:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4844:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4868:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "4868:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4823:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "4823:20:21"
																		},
																		"nativeSrc": "4823:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4823:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nativeSrc": "4813:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "4813:6:21"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4896:119:21",
															"nodeType": "YulBlock",
															"src": "4896:119:21",
															"statements": [
																{
																	"nativeSrc": "4911:17:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4911:17:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4925:3:21",
																		"nodeType": "YulLiteral",
																		"src": "4925:3:21",
																		"type": "",
																		"value": "128"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4915:6:21",
																			"nodeType": "YulTypedName",
																			"src": "4915:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4942:63:21",
																	"nodeType": "YulAssignment",
																	"src": "4942:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4977:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "4977:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4988:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "4988:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4973:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "4973:3:21"
																				},
																				"nativeSrc": "4973:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "4973:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4997:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "4997:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4952:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "4952:20:21"
																		},
																		"nativeSrc": "4952:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "4952:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nativeSrc": "4942:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "4942:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_addresst_uint256",
												"nativeSrc": "3751:1271:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3843:9:21",
														"nodeType": "YulTypedName",
														"src": "3843:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3854:7:21",
														"nodeType": "YulTypedName",
														"src": "3854:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3866:6:21",
														"nodeType": "YulTypedName",
														"src": "3866:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3874:6:21",
														"nodeType": "YulTypedName",
														"src": "3874:6:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3882:6:21",
														"nodeType": "YulTypedName",
														"src": "3882:6:21",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "3890:6:21",
														"nodeType": "YulTypedName",
														"src": "3890:6:21",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "3898:6:21",
														"nodeType": "YulTypedName",
														"src": "3898:6:21",
														"type": ""
													}
												],
												"src": "3751:1271:21"
											},
											{
												"body": {
													"nativeSrc": "5093:53:21",
													"nodeType": "YulBlock",
													"src": "5093:53:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5110:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "5110:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5133:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "5133:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "5115:17:21",
																			"nodeType": "YulIdentifier",
																			"src": "5115:17:21"
																		},
																		"nativeSrc": "5115:24:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5115:24:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5103:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "5103:6:21"
																},
																"nativeSrc": "5103:37:21",
																"nodeType": "YulFunctionCall",
																"src": "5103:37:21"
															},
															"nativeSrc": "5103:37:21",
															"nodeType": "YulExpressionStatement",
															"src": "5103:37:21"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "5028:118:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5081:5:21",
														"nodeType": "YulTypedName",
														"src": "5081:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5088:3:21",
														"nodeType": "YulTypedName",
														"src": "5088:3:21",
														"type": ""
													}
												],
												"src": "5028:118:21"
											},
											{
												"body": {
													"nativeSrc": "5250:124:21",
													"nodeType": "YulBlock",
													"src": "5250:124:21",
													"statements": [
														{
															"nativeSrc": "5260:26:21",
															"nodeType": "YulAssignment",
															"src": "5260:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5272:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "5272:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5283:2:21",
																		"nodeType": "YulLiteral",
																		"src": "5283:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5268:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "5268:3:21"
																},
																"nativeSrc": "5268:18:21",
																"nodeType": "YulFunctionCall",
																"src": "5268:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5260:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "5260:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5340:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "5340:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5353:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "5353:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5364:1:21",
																				"nodeType": "YulLiteral",
																				"src": "5364:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5349:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "5349:3:21"
																		},
																		"nativeSrc": "5349:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5349:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "5296:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "5296:43:21"
																},
																"nativeSrc": "5296:71:21",
																"nodeType": "YulFunctionCall",
																"src": "5296:71:21"
															},
															"nativeSrc": "5296:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "5296:71:21"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "5152:222:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5222:9:21",
														"nodeType": "YulTypedName",
														"src": "5222:9:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5234:6:21",
														"nodeType": "YulTypedName",
														"src": "5234:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5245:4:21",
														"nodeType": "YulTypedName",
														"src": "5245:4:21",
														"type": ""
													}
												],
												"src": "5152:222:21"
											},
											{
												"body": {
													"nativeSrc": "5412:28:21",
													"nodeType": "YulBlock",
													"src": "5412:28:21",
													"statements": [
														{
															"nativeSrc": "5422:12:21",
															"nodeType": "YulAssignment",
															"src": "5422:12:21",
															"value": {
																"name": "value",
																"nativeSrc": "5429:5:21",
																"nodeType": "YulIdentifier",
																"src": "5429:5:21"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "5422:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "5422:3:21"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "5380:60:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5398:5:21",
														"nodeType": "YulTypedName",
														"src": "5398:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "5408:3:21",
														"nodeType": "YulTypedName",
														"src": "5408:3:21",
														"type": ""
													}
												],
												"src": "5380:60:21"
											},
											{
												"body": {
													"nativeSrc": "5506:82:21",
													"nodeType": "YulBlock",
													"src": "5506:82:21",
													"statements": [
														{
															"nativeSrc": "5516:66:21",
															"nodeType": "YulAssignment",
															"src": "5516:66:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "5574:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "5574:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nativeSrc": "5556:17:21",
																					"nodeType": "YulIdentifier",
																					"src": "5556:17:21"
																				},
																				"nativeSrc": "5556:24:21",
																				"nodeType": "YulFunctionCall",
																				"src": "5556:24:21"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "5547:8:21",
																			"nodeType": "YulIdentifier",
																			"src": "5547:8:21"
																		},
																		"nativeSrc": "5547:34:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5547:34:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "5529:17:21",
																	"nodeType": "YulIdentifier",
																	"src": "5529:17:21"
																},
																"nativeSrc": "5529:53:21",
																"nodeType": "YulFunctionCall",
																"src": "5529:53:21"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "5516:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "5516:9:21"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nativeSrc": "5446:142:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5486:5:21",
														"nodeType": "YulTypedName",
														"src": "5486:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "5496:9:21",
														"nodeType": "YulTypedName",
														"src": "5496:9:21",
														"type": ""
													}
												],
												"src": "5446:142:21"
											},
											{
												"body": {
													"nativeSrc": "5654:66:21",
													"nodeType": "YulBlock",
													"src": "5654:66:21",
													"statements": [
														{
															"nativeSrc": "5664:50:21",
															"nodeType": "YulAssignment",
															"src": "5664:50:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "5708:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "5708:5:21"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nativeSrc": "5677:30:21",
																	"nodeType": "YulIdentifier",
																	"src": "5677:30:21"
																},
																"nativeSrc": "5677:37:21",
																"nodeType": "YulFunctionCall",
																"src": "5677:37:21"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "5664:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "5664:9:21"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nativeSrc": "5594:126:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5634:5:21",
														"nodeType": "YulTypedName",
														"src": "5634:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "5644:9:21",
														"nodeType": "YulTypedName",
														"src": "5644:9:21",
														"type": ""
													}
												],
												"src": "5594:126:21"
											},
											{
												"body": {
													"nativeSrc": "5800:66:21",
													"nodeType": "YulBlock",
													"src": "5800:66:21",
													"statements": [
														{
															"nativeSrc": "5810:50:21",
															"nodeType": "YulAssignment",
															"src": "5810:50:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "5854:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "5854:5:21"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nativeSrc": "5823:30:21",
																	"nodeType": "YulIdentifier",
																	"src": "5823:30:21"
																},
																"nativeSrc": "5823:37:21",
																"nodeType": "YulFunctionCall",
																"src": "5823:37:21"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "5810:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "5810:9:21"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC20_$113_to_t_address",
												"nativeSrc": "5726:140:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5780:5:21",
														"nodeType": "YulTypedName",
														"src": "5780:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "5790:9:21",
														"nodeType": "YulTypedName",
														"src": "5790:9:21",
														"type": ""
													}
												],
												"src": "5726:140:21"
											},
											{
												"body": {
													"nativeSrc": "5951:80:21",
													"nodeType": "YulBlock",
													"src": "5951:80:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5968:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "5968:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6018:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "6018:5:21"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IERC20_$113_to_t_address",
																			"nativeSrc": "5973:44:21",
																			"nodeType": "YulIdentifier",
																			"src": "5973:44:21"
																		},
																		"nativeSrc": "5973:51:21",
																		"nodeType": "YulFunctionCall",
																		"src": "5973:51:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5961:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "5961:6:21"
																},
																"nativeSrc": "5961:64:21",
																"nodeType": "YulFunctionCall",
																"src": "5961:64:21"
															},
															"nativeSrc": "5961:64:21",
															"nodeType": "YulExpressionStatement",
															"src": "5961:64:21"
														}
													]
												},
												"name": "abi_encode_t_contract$_IERC20_$113_to_t_address_fromStack",
												"nativeSrc": "5872:159:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5939:5:21",
														"nodeType": "YulTypedName",
														"src": "5939:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5946:3:21",
														"nodeType": "YulTypedName",
														"src": "5946:3:21",
														"type": ""
													}
												],
												"src": "5872:159:21"
											},
											{
												"body": {
													"nativeSrc": "6091:32:21",
													"nodeType": "YulBlock",
													"src": "6091:32:21",
													"statements": [
														{
															"nativeSrc": "6101:16:21",
															"nodeType": "YulAssignment",
															"src": "6101:16:21",
															"value": {
																"name": "value",
																"nativeSrc": "6112:5:21",
																"nodeType": "YulIdentifier",
																"src": "6112:5:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "6101:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "6101:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_rational_18_by_1",
												"nativeSrc": "6037:86:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6073:5:21",
														"nodeType": "YulTypedName",
														"src": "6073:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "6083:7:21",
														"nodeType": "YulTypedName",
														"src": "6083:7:21",
														"type": ""
													}
												],
												"src": "6037:86:21"
											},
											{
												"body": {
													"nativeSrc": "6172:43:21",
													"nodeType": "YulBlock",
													"src": "6172:43:21",
													"statements": [
														{
															"nativeSrc": "6182:27:21",
															"nodeType": "YulAssignment",
															"src": "6182:27:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6197:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "6197:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6204:4:21",
																		"nodeType": "YulLiteral",
																		"src": "6204:4:21",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "6193:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "6193:3:21"
																},
																"nativeSrc": "6193:16:21",
																"nodeType": "YulFunctionCall",
																"src": "6193:16:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "6182:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "6182:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "6129:86:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6154:5:21",
														"nodeType": "YulTypedName",
														"src": "6154:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "6164:7:21",
														"nodeType": "YulTypedName",
														"src": "6164:7:21",
														"type": ""
													}
												],
												"src": "6129:86:21"
											},
											{
												"body": {
													"nativeSrc": "6288:89:21",
													"nodeType": "YulBlock",
													"src": "6288:89:21",
													"statements": [
														{
															"nativeSrc": "6298:73:21",
															"nodeType": "YulAssignment",
															"src": "6298:73:21",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "6363:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "6363:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_rational_18_by_1",
																					"nativeSrc": "6336:26:21",
																					"nodeType": "YulIdentifier",
																					"src": "6336:26:21"
																				},
																				"nativeSrc": "6336:33:21",
																				"nodeType": "YulFunctionCall",
																				"src": "6336:33:21"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "6327:8:21",
																			"nodeType": "YulIdentifier",
																			"src": "6327:8:21"
																		},
																		"nativeSrc": "6327:43:21",
																		"nodeType": "YulFunctionCall",
																		"src": "6327:43:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nativeSrc": "6311:15:21",
																	"nodeType": "YulIdentifier",
																	"src": "6311:15:21"
																},
																"nativeSrc": "6311:60:21",
																"nodeType": "YulFunctionCall",
																"src": "6311:60:21"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "6298:9:21",
																	"nodeType": "YulIdentifier",
																	"src": "6298:9:21"
																}
															]
														}
													]
												},
												"name": "convert_t_rational_18_by_1_to_t_uint8",
												"nativeSrc": "6221:156:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6268:5:21",
														"nodeType": "YulTypedName",
														"src": "6268:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "6278:9:21",
														"nodeType": "YulTypedName",
														"src": "6278:9:21",
														"type": ""
													}
												],
												"src": "6221:156:21"
											},
											{
												"body": {
													"nativeSrc": "6455:73:21",
													"nodeType": "YulBlock",
													"src": "6455:73:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6472:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6472:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6515:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "6515:5:21"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_rational_18_by_1_to_t_uint8",
																			"nativeSrc": "6477:37:21",
																			"nodeType": "YulIdentifier",
																			"src": "6477:37:21"
																		},
																		"nativeSrc": "6477:44:21",
																		"nodeType": "YulFunctionCall",
																		"src": "6477:44:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6465:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "6465:6:21"
																},
																"nativeSrc": "6465:57:21",
																"nodeType": "YulFunctionCall",
																"src": "6465:57:21"
															},
															"nativeSrc": "6465:57:21",
															"nodeType": "YulExpressionStatement",
															"src": "6465:57:21"
														}
													]
												},
												"name": "abi_encode_t_rational_18_by_1_to_t_uint8_fromStack",
												"nativeSrc": "6383:145:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6443:5:21",
														"nodeType": "YulTypedName",
														"src": "6443:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6450:3:21",
														"nodeType": "YulTypedName",
														"src": "6450:3:21",
														"type": ""
													}
												],
												"src": "6383:145:21"
											},
											{
												"body": {
													"nativeSrc": "6593:40:21",
													"nodeType": "YulBlock",
													"src": "6593:40:21",
													"statements": [
														{
															"nativeSrc": "6604:22:21",
															"nodeType": "YulAssignment",
															"src": "6604:22:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6620:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "6620:5:21"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "6614:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "6614:5:21"
																},
																"nativeSrc": "6614:12:21",
																"nodeType": "YulFunctionCall",
																"src": "6614:12:21"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "6604:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "6604:6:21"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "6534:99:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6576:5:21",
														"nodeType": "YulTypedName",
														"src": "6576:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "6586:6:21",
														"nodeType": "YulTypedName",
														"src": "6586:6:21",
														"type": ""
													}
												],
												"src": "6534:99:21"
											},
											{
												"body": {
													"nativeSrc": "6735:73:21",
													"nodeType": "YulBlock",
													"src": "6735:73:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6752:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6752:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "6757:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "6757:6:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6745:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "6745:6:21"
																},
																"nativeSrc": "6745:19:21",
																"nodeType": "YulFunctionCall",
																"src": "6745:19:21"
															},
															"nativeSrc": "6745:19:21",
															"nodeType": "YulExpressionStatement",
															"src": "6745:19:21"
														},
														{
															"nativeSrc": "6773:29:21",
															"nodeType": "YulAssignment",
															"src": "6773:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6792:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "6792:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6797:4:21",
																		"nodeType": "YulLiteral",
																		"src": "6797:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6788:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "6788:3:21"
																},
																"nativeSrc": "6788:14:21",
																"nodeType": "YulFunctionCall",
																"src": "6788:14:21"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "6773:11:21",
																	"nodeType": "YulIdentifier",
																	"src": "6773:11:21"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "6639:169:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6707:3:21",
														"nodeType": "YulTypedName",
														"src": "6707:3:21",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6712:6:21",
														"nodeType": "YulTypedName",
														"src": "6712:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "6723:11:21",
														"nodeType": "YulTypedName",
														"src": "6723:11:21",
														"type": ""
													}
												],
												"src": "6639:169:21"
											},
											{
												"body": {
													"nativeSrc": "6876:184:21",
													"nodeType": "YulBlock",
													"src": "6876:184:21",
													"statements": [
														{
															"nativeSrc": "6886:10:21",
															"nodeType": "YulVariableDeclaration",
															"src": "6886:10:21",
															"value": {
																"kind": "number",
																"nativeSrc": "6895:1:21",
																"nodeType": "YulLiteral",
																"src": "6895:1:21",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "6890:1:21",
																	"nodeType": "YulTypedName",
																	"src": "6890:1:21",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6955:63:21",
																"nodeType": "YulBlock",
																"src": "6955:63:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nativeSrc": "6980:3:21",
																							"nodeType": "YulIdentifier",
																							"src": "6980:3:21"
																						},
																						{
																							"name": "i",
																							"nativeSrc": "6985:1:21",
																							"nodeType": "YulIdentifier",
																							"src": "6985:1:21"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6976:3:21",
																						"nodeType": "YulIdentifier",
																						"src": "6976:3:21"
																					},
																					"nativeSrc": "6976:11:21",
																					"nodeType": "YulFunctionCall",
																					"src": "6976:11:21"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "6999:3:21",
																									"nodeType": "YulIdentifier",
																									"src": "6999:3:21"
																								},
																								{
																									"name": "i",
																									"nativeSrc": "7004:1:21",
																									"nodeType": "YulIdentifier",
																									"src": "7004:1:21"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "6995:3:21",
																								"nodeType": "YulIdentifier",
																								"src": "6995:3:21"
																							},
																							"nativeSrc": "6995:11:21",
																							"nodeType": "YulFunctionCall",
																							"src": "6995:11:21"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "6989:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "6989:5:21"
																					},
																					"nativeSrc": "6989:18:21",
																					"nodeType": "YulFunctionCall",
																					"src": "6989:18:21"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "6969:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "6969:6:21"
																			},
																			"nativeSrc": "6969:39:21",
																			"nodeType": "YulFunctionCall",
																			"src": "6969:39:21"
																		},
																		"nativeSrc": "6969:39:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "6969:39:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "6916:1:21",
																		"nodeType": "YulIdentifier",
																		"src": "6916:1:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "6919:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "6919:6:21"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "6913:2:21",
																	"nodeType": "YulIdentifier",
																	"src": "6913:2:21"
																},
																"nativeSrc": "6913:13:21",
																"nodeType": "YulFunctionCall",
																"src": "6913:13:21"
															},
															"nativeSrc": "6905:113:21",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "6927:19:21",
																"nodeType": "YulBlock",
																"src": "6927:19:21",
																"statements": [
																	{
																		"nativeSrc": "6929:15:21",
																		"nodeType": "YulAssignment",
																		"src": "6929:15:21",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "6938:1:21",
																					"nodeType": "YulIdentifier",
																					"src": "6938:1:21"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6941:2:21",
																					"nodeType": "YulLiteral",
																					"src": "6941:2:21",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "6934:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "6934:3:21"
																			},
																			"nativeSrc": "6934:10:21",
																			"nodeType": "YulFunctionCall",
																			"src": "6934:10:21"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "6929:1:21",
																				"nodeType": "YulIdentifier",
																				"src": "6929:1:21"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "6909:3:21",
																"nodeType": "YulBlock",
																"src": "6909:3:21",
																"statements": []
															},
															"src": "6905:113:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "7038:3:21",
																				"nodeType": "YulIdentifier",
																				"src": "7038:3:21"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "7043:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "7043:6:21"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7034:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "7034:3:21"
																		},
																		"nativeSrc": "7034:16:21",
																		"nodeType": "YulFunctionCall",
																		"src": "7034:16:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7052:1:21",
																		"nodeType": "YulLiteral",
																		"src": "7052:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7027:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "7027:6:21"
																},
																"nativeSrc": "7027:27:21",
																"nodeType": "YulFunctionCall",
																"src": "7027:27:21"
															},
															"nativeSrc": "7027:27:21",
															"nodeType": "YulExpressionStatement",
															"src": "7027:27:21"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "6814:246:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "6858:3:21",
														"nodeType": "YulTypedName",
														"src": "6858:3:21",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "6863:3:21",
														"nodeType": "YulTypedName",
														"src": "6863:3:21",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6868:6:21",
														"nodeType": "YulTypedName",
														"src": "6868:6:21",
														"type": ""
													}
												],
												"src": "6814:246:21"
											},
											{
												"body": {
													"nativeSrc": "7158:285:21",
													"nodeType": "YulBlock",
													"src": "7158:285:21",
													"statements": [
														{
															"nativeSrc": "7168:53:21",
															"nodeType": "YulVariableDeclaration",
															"src": "7168:53:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7215:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "7215:5:21"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "7182:32:21",
																	"nodeType": "YulIdentifier",
																	"src": "7182:32:21"
																},
																"nativeSrc": "7182:39:21",
																"nodeType": "YulFunctionCall",
																"src": "7182:39:21"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "7172:6:21",
																	"nodeType": "YulTypedName",
																	"src": "7172:6:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7230:78:21",
															"nodeType": "YulAssignment",
															"src": "7230:78:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7296:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "7296:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7301:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "7301:6:21"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "7237:58:21",
																	"nodeType": "YulIdentifier",
																	"src": "7237:58:21"
																},
																"nativeSrc": "7237:71:21",
																"nodeType": "YulFunctionCall",
																"src": "7237:71:21"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7230:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "7230:3:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7356:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "7356:5:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7363:4:21",
																				"nodeType": "YulLiteral",
																				"src": "7363:4:21",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7352:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "7352:3:21"
																		},
																		"nativeSrc": "7352:16:21",
																		"nodeType": "YulFunctionCall",
																		"src": "7352:16:21"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "7370:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "7370:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7375:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "7375:6:21"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "7317:34:21",
																	"nodeType": "YulIdentifier",
																	"src": "7317:34:21"
																},
																"nativeSrc": "7317:65:21",
																"nodeType": "YulFunctionCall",
																"src": "7317:65:21"
															},
															"nativeSrc": "7317:65:21",
															"nodeType": "YulExpressionStatement",
															"src": "7317:65:21"
														},
														{
															"nativeSrc": "7391:46:21",
															"nodeType": "YulAssignment",
															"src": "7391:46:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7402:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "7402:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "7429:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "7429:6:21"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "7407:21:21",
																			"nodeType": "YulIdentifier",
																			"src": "7407:21:21"
																		},
																		"nativeSrc": "7407:29:21",
																		"nodeType": "YulFunctionCall",
																		"src": "7407:29:21"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7398:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "7398:3:21"
																},
																"nativeSrc": "7398:39:21",
																"nodeType": "YulFunctionCall",
																"src": "7398:39:21"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7391:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "7391:3:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "7066:377:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7139:5:21",
														"nodeType": "YulTypedName",
														"src": "7139:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "7146:3:21",
														"nodeType": "YulTypedName",
														"src": "7146:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7154:3:21",
														"nodeType": "YulTypedName",
														"src": "7154:3:21",
														"type": ""
													}
												],
												"src": "7066:377:21"
											},
											{
												"body": {
													"nativeSrc": "7692:534:21",
													"nodeType": "YulBlock",
													"src": "7692:534:21",
													"statements": [
														{
															"nativeSrc": "7702:27:21",
															"nodeType": "YulAssignment",
															"src": "7702:27:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7714:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "7714:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7725:3:21",
																		"nodeType": "YulLiteral",
																		"src": "7725:3:21",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7710:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "7710:3:21"
																},
																"nativeSrc": "7710:19:21",
																"nodeType": "YulFunctionCall",
																"src": "7710:19:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7702:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "7702:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "7797:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "7797:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7810:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "7810:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7821:1:21",
																				"nodeType": "YulLiteral",
																				"src": "7821:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7806:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "7806:3:21"
																		},
																		"nativeSrc": "7806:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "7806:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC20_$113_to_t_address_fromStack",
																	"nativeSrc": "7739:57:21",
																	"nodeType": "YulIdentifier",
																	"src": "7739:57:21"
																},
																"nativeSrc": "7739:85:21",
																"nodeType": "YulFunctionCall",
																"src": "7739:85:21"
															},
															"nativeSrc": "7739:85:21",
															"nodeType": "YulExpressionStatement",
															"src": "7739:85:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "7885:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "7885:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7898:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "7898:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7909:2:21",
																				"nodeType": "YulLiteral",
																				"src": "7909:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7894:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "7894:3:21"
																		},
																		"nativeSrc": "7894:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "7894:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_rational_18_by_1_to_t_uint8_fromStack",
																	"nativeSrc": "7834:50:21",
																	"nodeType": "YulIdentifier",
																	"src": "7834:50:21"
																},
																"nativeSrc": "7834:79:21",
																"nodeType": "YulFunctionCall",
																"src": "7834:79:21"
															},
															"nativeSrc": "7834:79:21",
															"nodeType": "YulExpressionStatement",
															"src": "7834:79:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7934:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "7934:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7945:2:21",
																				"nodeType": "YulLiteral",
																				"src": "7945:2:21",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7930:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "7930:3:21"
																		},
																		"nativeSrc": "7930:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "7930:18:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "7954:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "7954:4:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "7960:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "7960:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7950:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "7950:3:21"
																		},
																		"nativeSrc": "7950:20:21",
																		"nodeType": "YulFunctionCall",
																		"src": "7950:20:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7923:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "7923:6:21"
																},
																"nativeSrc": "7923:48:21",
																"nodeType": "YulFunctionCall",
																"src": "7923:48:21"
															},
															"nativeSrc": "7923:48:21",
															"nodeType": "YulExpressionStatement",
															"src": "7923:48:21"
														},
														{
															"nativeSrc": "7980:86:21",
															"nodeType": "YulAssignment",
															"src": "7980:86:21",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "8052:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8052:6:21"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "8061:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "8061:4:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "7988:63:21",
																	"nodeType": "YulIdentifier",
																	"src": "7988:63:21"
																},
																"nativeSrc": "7988:78:21",
																"nodeType": "YulFunctionCall",
																"src": "7988:78:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7980:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "7980:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8087:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8087:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8098:2:21",
																				"nodeType": "YulLiteral",
																				"src": "8098:2:21",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8083:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8083:3:21"
																		},
																		"nativeSrc": "8083:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8083:18:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "8107:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "8107:4:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8113:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "8113:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8103:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8103:3:21"
																		},
																		"nativeSrc": "8103:20:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8103:20:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8076:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "8076:6:21"
																},
																"nativeSrc": "8076:48:21",
																"nodeType": "YulFunctionCall",
																"src": "8076:48:21"
															},
															"nativeSrc": "8076:48:21",
															"nodeType": "YulExpressionStatement",
															"src": "8076:48:21"
														},
														{
															"nativeSrc": "8133:86:21",
															"nodeType": "YulAssignment",
															"src": "8133:86:21",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "8205:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8205:6:21"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "8214:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "8214:4:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8141:63:21",
																	"nodeType": "YulIdentifier",
																	"src": "8141:63:21"
																},
																"nativeSrc": "8141:78:21",
																"nodeType": "YulFunctionCall",
																"src": "8141:78:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8133:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "8133:4:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$113_t_rational_18_by_1_t_string_memory_ptr_t_string_memory_ptr__to_t_address_t_uint8_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "7449:777:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7640:9:21",
														"nodeType": "YulTypedName",
														"src": "7640:9:21",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7652:6:21",
														"nodeType": "YulTypedName",
														"src": "7652:6:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7660:6:21",
														"nodeType": "YulTypedName",
														"src": "7660:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7668:6:21",
														"nodeType": "YulTypedName",
														"src": "7668:6:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7676:6:21",
														"nodeType": "YulTypedName",
														"src": "7676:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7687:4:21",
														"nodeType": "YulTypedName",
														"src": "7687:4:21",
														"type": ""
													}
												],
												"src": "7449:777:21"
											},
											{
												"body": {
													"nativeSrc": "8297:53:21",
													"nodeType": "YulBlock",
													"src": "8297:53:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8314:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "8314:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "8337:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "8337:5:21"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "8319:17:21",
																			"nodeType": "YulIdentifier",
																			"src": "8319:17:21"
																		},
																		"nativeSrc": "8319:24:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8319:24:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8307:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "8307:6:21"
																},
																"nativeSrc": "8307:37:21",
																"nodeType": "YulFunctionCall",
																"src": "8307:37:21"
															},
															"nativeSrc": "8307:37:21",
															"nodeType": "YulExpressionStatement",
															"src": "8307:37:21"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "8232:118:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8285:5:21",
														"nodeType": "YulTypedName",
														"src": "8285:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "8292:3:21",
														"nodeType": "YulTypedName",
														"src": "8292:3:21",
														"type": ""
													}
												],
												"src": "8232:118:21"
											},
											{
												"body": {
													"nativeSrc": "8414:40:21",
													"nodeType": "YulBlock",
													"src": "8414:40:21",
													"statements": [
														{
															"nativeSrc": "8425:22:21",
															"nodeType": "YulAssignment",
															"src": "8425:22:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8441:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "8441:5:21"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8435:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "8435:5:21"
																},
																"nativeSrc": "8435:12:21",
																"nodeType": "YulFunctionCall",
																"src": "8435:12:21"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "8425:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "8425:6:21"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "8356:98:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8397:5:21",
														"nodeType": "YulTypedName",
														"src": "8397:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "8407:6:21",
														"nodeType": "YulTypedName",
														"src": "8407:6:21",
														"type": ""
													}
												],
												"src": "8356:98:21"
											},
											{
												"body": {
													"nativeSrc": "8555:73:21",
													"nodeType": "YulBlock",
													"src": "8555:73:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8572:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "8572:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "8577:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8577:6:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8565:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "8565:6:21"
																},
																"nativeSrc": "8565:19:21",
																"nodeType": "YulFunctionCall",
																"src": "8565:19:21"
															},
															"nativeSrc": "8565:19:21",
															"nodeType": "YulExpressionStatement",
															"src": "8565:19:21"
														},
														{
															"nativeSrc": "8593:29:21",
															"nodeType": "YulAssignment",
															"src": "8593:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8612:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "8612:3:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8617:4:21",
																		"nodeType": "YulLiteral",
																		"src": "8617:4:21",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8608:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "8608:3:21"
																},
																"nativeSrc": "8608:14:21",
																"nodeType": "YulFunctionCall",
																"src": "8608:14:21"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "8593:11:21",
																	"nodeType": "YulIdentifier",
																	"src": "8593:11:21"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nativeSrc": "8460:168:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "8527:3:21",
														"nodeType": "YulTypedName",
														"src": "8527:3:21",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "8532:6:21",
														"nodeType": "YulTypedName",
														"src": "8532:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "8543:11:21",
														"nodeType": "YulTypedName",
														"src": "8543:11:21",
														"type": ""
													}
												],
												"src": "8460:168:21"
											},
											{
												"body": {
													"nativeSrc": "8724:283:21",
													"nodeType": "YulBlock",
													"src": "8724:283:21",
													"statements": [
														{
															"nativeSrc": "8734:52:21",
															"nodeType": "YulVariableDeclaration",
															"src": "8734:52:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8780:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "8780:5:21"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nativeSrc": "8748:31:21",
																	"nodeType": "YulIdentifier",
																	"src": "8748:31:21"
																},
																"nativeSrc": "8748:38:21",
																"nodeType": "YulFunctionCall",
																"src": "8748:38:21"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "8738:6:21",
																	"nodeType": "YulTypedName",
																	"src": "8738:6:21",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "8795:77:21",
															"nodeType": "YulAssignment",
															"src": "8795:77:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8860:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "8860:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "8865:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8865:6:21"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
																	"nativeSrc": "8802:57:21",
																	"nodeType": "YulIdentifier",
																	"src": "8802:57:21"
																},
																"nativeSrc": "8802:70:21",
																"nodeType": "YulFunctionCall",
																"src": "8802:70:21"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "8795:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "8795:3:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "8920:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "8920:5:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8927:4:21",
																				"nodeType": "YulLiteral",
																				"src": "8927:4:21",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8916:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "8916:3:21"
																		},
																		"nativeSrc": "8916:16:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8916:16:21"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "8934:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "8934:3:21"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "8939:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "8939:6:21"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "8881:34:21",
																	"nodeType": "YulIdentifier",
																	"src": "8881:34:21"
																},
																"nativeSrc": "8881:65:21",
																"nodeType": "YulFunctionCall",
																"src": "8881:65:21"
															},
															"nativeSrc": "8881:65:21",
															"nodeType": "YulExpressionStatement",
															"src": "8881:65:21"
														},
														{
															"nativeSrc": "8955:46:21",
															"nodeType": "YulAssignment",
															"src": "8955:46:21",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8966:3:21",
																		"nodeType": "YulIdentifier",
																		"src": "8966:3:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "8993:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "8993:6:21"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "8971:21:21",
																			"nodeType": "YulIdentifier",
																			"src": "8971:21:21"
																		},
																		"nativeSrc": "8971:29:21",
																		"nodeType": "YulFunctionCall",
																		"src": "8971:29:21"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8962:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "8962:3:21"
																},
																"nativeSrc": "8962:39:21",
																"nodeType": "YulFunctionCall",
																"src": "8962:39:21"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "8955:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "8955:3:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
												"nativeSrc": "8634:373:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8705:5:21",
														"nodeType": "YulTypedName",
														"src": "8705:5:21",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "8712:3:21",
														"nodeType": "YulTypedName",
														"src": "8712:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "8720:3:21",
														"nodeType": "YulTypedName",
														"src": "8720:3:21",
														"type": ""
													}
												],
												"src": "8634:373:21"
											},
											{
												"body": {
													"nativeSrc": "9185:357:21",
													"nodeType": "YulBlock",
													"src": "9185:357:21",
													"statements": [
														{
															"nativeSrc": "9195:26:21",
															"nodeType": "YulAssignment",
															"src": "9195:26:21",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9207:9:21",
																		"nodeType": "YulIdentifier",
																		"src": "9207:9:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9218:2:21",
																		"nodeType": "YulLiteral",
																		"src": "9218:2:21",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9203:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "9203:3:21"
																},
																"nativeSrc": "9203:18:21",
																"nodeType": "YulFunctionCall",
																"src": "9203:18:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9195:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "9195:4:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "9275:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "9275:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9288:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "9288:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9299:1:21",
																				"nodeType": "YulLiteral",
																				"src": "9299:1:21",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9284:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "9284:3:21"
																		},
																		"nativeSrc": "9284:17:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9284:17:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "9231:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "9231:43:21"
																},
																"nativeSrc": "9231:71:21",
																"nodeType": "YulFunctionCall",
																"src": "9231:71:21"
															},
															"nativeSrc": "9231:71:21",
															"nodeType": "YulExpressionStatement",
															"src": "9231:71:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "9356:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "9356:6:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9369:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "9369:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9380:2:21",
																				"nodeType": "YulLiteral",
																				"src": "9380:2:21",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9365:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "9365:3:21"
																		},
																		"nativeSrc": "9365:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9365:18:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "9312:43:21",
																	"nodeType": "YulIdentifier",
																	"src": "9312:43:21"
																},
																"nativeSrc": "9312:72:21",
																"nodeType": "YulFunctionCall",
																"src": "9312:72:21"
															},
															"nativeSrc": "9312:72:21",
															"nodeType": "YulExpressionStatement",
															"src": "9312:72:21"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9405:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "9405:9:21"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9416:2:21",
																				"nodeType": "YulLiteral",
																				"src": "9416:2:21",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9401:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "9401:3:21"
																		},
																		"nativeSrc": "9401:18:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9401:18:21"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "9425:4:21",
																				"nodeType": "YulIdentifier",
																				"src": "9425:4:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "9431:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "9431:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "9421:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "9421:3:21"
																		},
																		"nativeSrc": "9421:20:21",
																		"nodeType": "YulFunctionCall",
																		"src": "9421:20:21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9394:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "9394:6:21"
																},
																"nativeSrc": "9394:48:21",
																"nodeType": "YulFunctionCall",
																"src": "9394:48:21"
															},
															"nativeSrc": "9394:48:21",
															"nodeType": "YulExpressionStatement",
															"src": "9394:48:21"
														},
														{
															"nativeSrc": "9451:84:21",
															"nodeType": "YulAssignment",
															"src": "9451:84:21",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "9521:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "9521:6:21"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "9530:4:21",
																		"nodeType": "YulIdentifier",
																		"src": "9530:4:21"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
																	"nativeSrc": "9459:61:21",
																	"nodeType": "YulIdentifier",
																	"src": "9459:61:21"
																},
																"nativeSrc": "9459:76:21",
																"nodeType": "YulFunctionCall",
																"src": "9459:76:21"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9451:4:21",
																	"nodeType": "YulIdentifier",
																	"src": "9451:4:21"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nativeSrc": "9013:529:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9141:9:21",
														"nodeType": "YulTypedName",
														"src": "9141:9:21",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "9153:6:21",
														"nodeType": "YulTypedName",
														"src": "9153:6:21",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9161:6:21",
														"nodeType": "YulTypedName",
														"src": "9161:6:21",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9169:6:21",
														"nodeType": "YulTypedName",
														"src": "9169:6:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9180:4:21",
														"nodeType": "YulTypedName",
														"src": "9180:4:21",
														"type": ""
													}
												],
												"src": "9013:529:21"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IERC20_$113_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20_$113_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$113_to_t_address(value))\n    }\n\n    function cleanup_t_rational_18_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function convert_t_rational_18_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_18_by_1(value)))\n    }\n\n    function abi_encode_t_rational_18_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_18_by_1_to_t_uint8(value))\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$113_t_rational_18_by_1_t_string_memory_ptr_t_string_memory_ptr__to_t_address_t_uint8_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_contract$_IERC20_$113_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_rational_18_by_1_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value2,  tail)\n\n    }\n\n}\n",
									"id": 21,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361061002c575f3560e01c80634a0687ef1461003757806375b30be61461005f5761002d565b5b610035610087565b005b348015610042575f80fd5b5061005d600480360381019061005891906103b4565b610099565b005b34801561006a575f80fd5b506100856004803603810190610080919061054e565b610190565b005b6100976100926101bb565b6101e3565b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100fe576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1661011d6101bb565b73ffffffffffffffffffffffffffffffffffffffff161461016a576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550565b61019b858585610202565b6101b4828260405180602001604052805f8152506102da565b5050505050565b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54905090565b365f80375f80365f845af43d5f803e805f81146101fe573d5ff35b3d5ffd5b8273ffffffffffffffffffffffffffffffffffffffff1663d412d344306040518263ffffffff1660e01b815260040161023b919061060c565b5f604051808303815f87803b158015610252575f80fd5b505af1158015610264573d5f803e3d5ffd5b505050503073ffffffffffffffffffffffffffffffffffffffff166342fe09805f601285856040518563ffffffff1660e01b81526004016102a8949392919061073f565b5f604051808303815f87803b1580156102bf575f80fd5b505af11580156102d1573d5f803e3d5ffd5b50505050505050565b3073ffffffffffffffffffffffffffffffffffffffff1663c68d42838484846040518463ffffffff1660e01b8152600401610317939291906107f1565b5f604051808303815f87803b15801561032e575f80fd5b505af1158015610340573d5f803e3d5ffd5b50505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103838261035a565b9050919050565b61039381610379565b811461039d575f80fd5b50565b5f813590506103ae8161038a565b92915050565b5f602082840312156103c9576103c8610352565b5b5f6103d6848285016103a0565b91505092915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61042d826103e7565b810181811067ffffffffffffffff8211171561044c5761044b6103f7565b5b80604052505050565b5f61045e610349565b905061046a8282610424565b919050565b5f67ffffffffffffffff821115610489576104886103f7565b5b610492826103e7565b9050602081019050919050565b828183375f83830152505050565b5f6104bf6104ba8461046f565b610455565b9050828152602081018484840111156104db576104da6103e3565b5b6104e684828561049f565b509392505050565b5f82601f830112610502576105016103df565b5b81356105128482602086016104ad565b91505092915050565b5f819050919050565b61052d8161051b565b8114610537575f80fd5b50565b5f8135905061054881610524565b92915050565b5f805f805f60a0868803121561056757610566610352565b5b5f610574888289016103a0565b955050602086013567ffffffffffffffff81111561059557610594610356565b5b6105a1888289016104ee565b945050604086013567ffffffffffffffff8111156105c2576105c1610356565b5b6105ce888289016104ee565b93505060606105df888289016103a0565b92505060806105f08882890161053a565b9150509295509295909350565b61060681610379565b82525050565b5f60208201905061061f5f8301846105fd565b92915050565b5f819050919050565b5f61064861064361063e8461035a565b610625565b61035a565b9050919050565b5f6106598261062e565b9050919050565b5f61066a8261064f565b9050919050565b61067a81610660565b82525050565b5f819050919050565b5f60ff82169050919050565b5f6106af6106aa6106a584610680565b610625565b610689565b9050919050565b6106bf81610695565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156106fc5780820151818401526020810190506106e1565b5f8484015250505050565b5f610711826106c5565b61071b81856106cf565b935061072b8185602086016106df565b610734816103e7565b840191505092915050565b5f6080820190506107525f830187610671565b61075f60208301866106b6565b81810360408301526107718185610707565b905081810360608301526107858184610707565b905095945050505050565b6107998161051b565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f6107c38261079f565b6107cd81856107a9565b93506107dd8185602086016106df565b6107e6816103e7565b840191505092915050565b5f6060820190506108045f8301866105fd565b6108116020830185610790565b818103604083015261082381846107b9565b905094935050505056fea2646970667358221220426d2a610499caf65837793a6d181713be0c2085bd4f450281ec8602c8dfafea64736f6c63430008160033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2C JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4A0687EF EQ PUSH2 0x37 JUMPI DUP1 PUSH4 0x75B30BE6 EQ PUSH2 0x5F JUMPI PUSH2 0x2D JUMP JUMPDEST JUMPDEST PUSH2 0x35 PUSH2 0x87 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x58 SWAP2 SWAP1 PUSH2 0x3B4 JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x85 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x80 SWAP2 SWAP1 PUSH2 0x54E JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x97 PUSH2 0x92 PUSH2 0x1BB JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xFE JUMPI PUSH1 0x40 MLOAD PUSH32 0xD92E233D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x11D PUSH2 0x1BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16A JUMPI PUSH1 0x40 MLOAD PUSH32 0x5DAA87A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SSTORE POP JUMP JUMPDEST PUSH2 0x19B DUP6 DUP6 DUP6 PUSH2 0x202 JUMP JUMPDEST PUSH2 0x1B4 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x2DA JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH0 DUP1 CALLDATACOPY PUSH0 DUP1 CALLDATASIZE PUSH0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY DUP1 PUSH0 DUP2 EQ PUSH2 0x1FE JUMPI RETURNDATASIZE PUSH0 RETURN JUMPDEST RETURNDATASIZE PUSH0 REVERT JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD412D344 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x60C JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x252 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x264 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42FE0980 PUSH0 PUSH1 0x12 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x73F JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D1 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC68D4283 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x340 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x383 DUP3 PUSH2 0x35A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x393 DUP2 PUSH2 0x379 JUMP JUMPDEST DUP2 EQ PUSH2 0x39D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3AE DUP2 PUSH2 0x38A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C9 JUMPI PUSH2 0x3C8 PUSH2 0x352 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x3D6 DUP5 DUP3 DUP6 ADD PUSH2 0x3A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0x42D DUP3 PUSH2 0x3E7 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x44C JUMPI PUSH2 0x44B PUSH2 0x3F7 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x45E PUSH2 0x349 JUMP JUMPDEST SWAP1 POP PUSH2 0x46A DUP3 DUP3 PUSH2 0x424 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x489 JUMPI PUSH2 0x488 PUSH2 0x3F7 JUMP JUMPDEST JUMPDEST PUSH2 0x492 DUP3 PUSH2 0x3E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4BF PUSH2 0x4BA DUP5 PUSH2 0x46F JUMP JUMPDEST PUSH2 0x455 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x4DB JUMPI PUSH2 0x4DA PUSH2 0x3E3 JUMP JUMPDEST JUMPDEST PUSH2 0x4E6 DUP5 DUP3 DUP6 PUSH2 0x49F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x502 JUMPI PUSH2 0x501 PUSH2 0x3DF JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x512 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x4AD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x52D DUP2 PUSH2 0x51B JUMP JUMPDEST DUP2 EQ PUSH2 0x537 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x548 DUP2 PUSH2 0x524 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x567 JUMPI PUSH2 0x566 PUSH2 0x352 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x574 DUP9 DUP3 DUP10 ADD PUSH2 0x3A0 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x595 JUMPI PUSH2 0x594 PUSH2 0x356 JUMP JUMPDEST JUMPDEST PUSH2 0x5A1 DUP9 DUP3 DUP10 ADD PUSH2 0x4EE JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5C2 JUMPI PUSH2 0x5C1 PUSH2 0x356 JUMP JUMPDEST JUMPDEST PUSH2 0x5CE DUP9 DUP3 DUP10 ADD PUSH2 0x4EE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x5DF DUP9 DUP3 DUP10 ADD PUSH2 0x3A0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x5F0 DUP9 DUP3 DUP10 ADD PUSH2 0x53A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x606 DUP2 PUSH2 0x379 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x61F PUSH0 DUP4 ADD DUP5 PUSH2 0x5FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x648 PUSH2 0x643 PUSH2 0x63E DUP5 PUSH2 0x35A JUMP JUMPDEST PUSH2 0x625 JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x659 DUP3 PUSH2 0x62E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x66A DUP3 PUSH2 0x64F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x67A DUP2 PUSH2 0x660 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x6AF PUSH2 0x6AA PUSH2 0x6A5 DUP5 PUSH2 0x680 JUMP JUMPDEST PUSH2 0x625 JUMP JUMPDEST PUSH2 0x689 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6BF DUP2 PUSH2 0x695 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6FC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6E1 JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x711 DUP3 PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0x71B DUP2 DUP6 PUSH2 0x6CF JUMP JUMPDEST SWAP4 POP PUSH2 0x72B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH2 0x734 DUP2 PUSH2 0x3E7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x752 PUSH0 DUP4 ADD DUP8 PUSH2 0x671 JUMP JUMPDEST PUSH2 0x75F PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x6B6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x771 DUP2 DUP6 PUSH2 0x707 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x785 DUP2 DUP5 PUSH2 0x707 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x799 DUP2 PUSH2 0x51B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x7C3 DUP3 PUSH2 0x79F JUMP JUMPDEST PUSH2 0x7CD DUP2 DUP6 PUSH2 0x7A9 JUMP JUMPDEST SWAP4 POP PUSH2 0x7DD DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x6DF JUMP JUMPDEST PUSH2 0x7E6 DUP2 PUSH2 0x3E7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x804 PUSH0 DUP4 ADD DUP7 PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x811 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x790 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x823 DUP2 DUP5 PUSH2 0x7B9 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 TIMESTAMP PUSH14 0x2A610499CAF65837793A6D181713 0xBE 0xC KECCAK256 DUP6 0xBD 0x4F GASLIMIT MUL DUP2 0xEC DUP7 MUL 0xC8 0xDF 0xAF 0xEA PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "277:628:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;2649:11:0;:9;:11::i;:::-;277:628:17;1049:246:20;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;632:270:17;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2323:83:0;2371:28;2381:17;:15;:17::i;:::-;2371:9;:28::i;:::-;2323:83::o;1049:246:20:-;1141:1;1115:28;;:14;:28;;;1111:54;;1152:13;;;;;;;;;;;;;;1111:54;1202:1;1173:31;;:17;:15;:17::i;:::-;:31;;;1169:57;;1213:13;;;;;;;;;;;;;;1169:57;1273:14;1251:20;1244:44;1049:246;:::o;632:270:17:-;817:34;829:7;838:4;844:6;817:11;:34::i;:::-;861;867:8;877:13;861:34;;;;;;;;;;;;:5;:34::i;:::-;632:270;;;;;:::o;1395:152:20:-;1472:12;1519:20;1513:27;1505:35;;1395:152;:::o;949:895:0:-;1287:14;1284:1;1281;1268:34;1501:1;1498;1482:14;1479:1;1463:14;1456:5;1443:60;1577:16;1574:1;1571;1556:38;1615:6;1687:1;1682:66;;;;1797:16;1794:1;1787:27;1682:66;1717:16;1714:1;1707:27;1021:245:18;1133:7;1114:54;;;1177:4;1114:69;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1207:4;1187:37;;;1240:1;1245:2;1249:4;1255:6;1187:75;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1021:245;;;:::o;1676:150::-;1780:4;1760:35;;;1796:7;1805:6;1813:8;1760:62;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1676:150;;;:::o;7:75:21:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:117::-;1285:1;1282;1275:12;1299:117;1408:1;1405;1398:12;1422:102;1463:6;1514:2;1510:7;1505:2;1498:5;1494:14;1490:28;1480:38;;1422:102;;;:::o;1530:180::-;1578:77;1575:1;1568:88;1675:4;1672:1;1665:15;1699:4;1696:1;1689:15;1716:281;1799:27;1821:4;1799:27;:::i;:::-;1791:6;1787:40;1929:6;1917:10;1914:22;1893:18;1881:10;1878:34;1875:62;1872:88;;;1940:18;;:::i;:::-;1872:88;1980:10;1976:2;1969:22;1759:238;1716:281;;:::o;2003:129::-;2037:6;2064:20;;:::i;:::-;2054:30;;2093:33;2121:4;2113:6;2093:33;:::i;:::-;2003:129;;;:::o;2138:308::-;2200:4;2290:18;2282:6;2279:30;2276:56;;;2312:18;;:::i;:::-;2276:56;2350:29;2372:6;2350:29;:::i;:::-;2342:37;;2434:4;2428;2424:15;2416:23;;2138:308;;;:::o;2452:146::-;2549:6;2544:3;2539;2526:30;2590:1;2581:6;2576:3;2572:16;2565:27;2452:146;;;:::o;2604:425::-;2682:5;2707:66;2723:49;2765:6;2723:49;:::i;:::-;2707:66;:::i;:::-;2698:75;;2796:6;2789:5;2782:21;2834:4;2827:5;2823:16;2872:3;2863:6;2858:3;2854:16;2851:25;2848:112;;;2879:79;;:::i;:::-;2848:112;2969:54;3016:6;3011:3;3006;2969:54;:::i;:::-;2688:341;2604:425;;;;;:::o;3049:340::-;3105:5;3154:3;3147:4;3139:6;3135:17;3131:27;3121:122;;3162:79;;:::i;:::-;3121:122;3279:6;3266:20;3304:79;3379:3;3371:6;3364:4;3356:6;3352:17;3304:79;:::i;:::-;3295:88;;3111:278;3049:340;;;;:::o;3395:77::-;3432:7;3461:5;3450:16;;3395:77;;;:::o;3478:122::-;3551:24;3569:5;3551:24;:::i;:::-;3544:5;3541:35;3531:63;;3590:1;3587;3580:12;3531:63;3478:122;:::o;3606:139::-;3652:5;3690:6;3677:20;3668:29;;3706:33;3733:5;3706:33;:::i;:::-;3606:139;;;;:::o;3751:1271::-;3866:6;3874;3882;3890;3898;3947:3;3935:9;3926:7;3922:23;3918:33;3915:120;;;3954:79;;:::i;:::-;3915:120;4074:1;4099:53;4144:7;4135:6;4124:9;4120:22;4099:53;:::i;:::-;4089:63;;4045:117;4229:2;4218:9;4214:18;4201:32;4260:18;4252:6;4249:30;4246:117;;;4282:79;;:::i;:::-;4246:117;4387:63;4442:7;4433:6;4422:9;4418:22;4387:63;:::i;:::-;4377:73;;4172:288;4527:2;4516:9;4512:18;4499:32;4558:18;4550:6;4547:30;4544:117;;;4580:79;;:::i;:::-;4544:117;4685:63;4740:7;4731:6;4720:9;4716:22;4685:63;:::i;:::-;4675:73;;4470:288;4797:2;4823:53;4868:7;4859:6;4848:9;4844:22;4823:53;:::i;:::-;4813:63;;4768:118;4925:3;4952:53;4997:7;4988:6;4977:9;4973:22;4952:53;:::i;:::-;4942:63;;4896:119;3751:1271;;;;;;;;:::o;5028:118::-;5115:24;5133:5;5115:24;:::i;:::-;5110:3;5103:37;5028:118;;:::o;5152:222::-;5245:4;5283:2;5272:9;5268:18;5260:26;;5296:71;5364:1;5353:9;5349:17;5340:6;5296:71;:::i;:::-;5152:222;;;;:::o;5380:60::-;5408:3;5429:5;5422:12;;5380:60;;;:::o;5446:142::-;5496:9;5529:53;5547:34;5556:24;5574:5;5556:24;:::i;:::-;5547:34;:::i;:::-;5529:53;:::i;:::-;5516:66;;5446:142;;;:::o;5594:126::-;5644:9;5677:37;5708:5;5677:37;:::i;:::-;5664:50;;5594:126;;;:::o;5726:140::-;5790:9;5823:37;5854:5;5823:37;:::i;:::-;5810:50;;5726:140;;;:::o;5872:159::-;5973:51;6018:5;5973:51;:::i;:::-;5968:3;5961:64;5872:159;;:::o;6037:86::-;6083:7;6112:5;6101:16;;6037:86;;;:::o;6129:::-;6164:7;6204:4;6197:5;6193:16;6182:27;;6129:86;;;:::o;6221:156::-;6278:9;6311:60;6327:43;6336:33;6363:5;6336:33;:::i;:::-;6327:43;:::i;:::-;6311:60;:::i;:::-;6298:73;;6221:156;;;:::o;6383:145::-;6477:44;6515:5;6477:44;:::i;:::-;6472:3;6465:57;6383:145;;:::o;6534:99::-;6586:6;6620:5;6614:12;6604:22;;6534:99;;;:::o;6639:169::-;6723:11;6757:6;6752:3;6745:19;6797:4;6792:3;6788:14;6773:29;;6639:169;;;;:::o;6814:246::-;6895:1;6905:113;6919:6;6916:1;6913:13;6905:113;;;7004:1;6999:3;6995:11;6989:18;6985:1;6980:3;6976:11;6969:39;6941:2;6938:1;6934:10;6929:15;;6905:113;;;7052:1;7043:6;7038:3;7034:16;7027:27;6876:184;6814:246;;;:::o;7066:377::-;7154:3;7182:39;7215:5;7182:39;:::i;:::-;7237:71;7301:6;7296:3;7237:71;:::i;:::-;7230:78;;7317:65;7375:6;7370:3;7363:4;7356:5;7352:16;7317:65;:::i;:::-;7407:29;7429:6;7407:29;:::i;:::-;7402:3;7398:39;7391:46;;7158:285;7066:377;;;;:::o;7449:777::-;7687:4;7725:3;7714:9;7710:19;7702:27;;7739:85;7821:1;7810:9;7806:17;7797:6;7739:85;:::i;:::-;7834:79;7909:2;7898:9;7894:18;7885:6;7834:79;:::i;:::-;7960:9;7954:4;7950:20;7945:2;7934:9;7930:18;7923:48;7988:78;8061:4;8052:6;7988:78;:::i;:::-;7980:86;;8113:9;8107:4;8103:20;8098:2;8087:9;8083:18;8076:48;8141:78;8214:4;8205:6;8141:78;:::i;:::-;8133:86;;7449:777;;;;;;;:::o;8232:118::-;8319:24;8337:5;8319:24;:::i;:::-;8314:3;8307:37;8232:118;;:::o;8356:98::-;8407:6;8441:5;8435:12;8425:22;;8356:98;;;:::o;8460:168::-;8543:11;8577:6;8572:3;8565:19;8617:4;8612:3;8608:14;8593:29;;8460:168;;;;:::o;8634:373::-;8720:3;8748:38;8780:5;8748:38;:::i;:::-;8802:70;8865:6;8860:3;8802:70;:::i;:::-;8795:77;;8881:65;8939:6;8934:3;8927:4;8920:5;8916:16;8881:65;:::i;:::-;8971:29;8993:6;8971:29;:::i;:::-;8966:3;8962:39;8955:46;;8724:283;8634:373;;;;:::o;9013:529::-;9180:4;9218:2;9207:9;9203:18;9195:26;;9231:71;9299:1;9288:9;9284:17;9275:6;9231:71;:::i;:::-;9312:72;9380:2;9369:9;9365:18;9356:6;9312:72;:::i;:::-;9431:9;9425:4;9421:20;9416:2;9405:9;9401:18;9394:48;9459:76;9530:4;9521:6;9459:76;:::i;:::-;9451:84;;9013:529;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "429400",
								"executionCost": "466",
								"totalCost": "429866"
							},
							"external": {
								"": "infinite",
								"initialize(address,string,string,address,uint256)": "infinite",
								"initializeProxy(address)": "24735"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 277,
									"end": 905,
									"name": "PUSH",
									"source": 17,
									"value": "80"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "CALLVALUE",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "ISZERO",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 277,
									"end": 905,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 277,
									"end": 905,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220426d2a610499caf65837793a6d181713be0c2085bd4f450281ec8602c8dfafea64736f6c63430008160033",
									".code": [
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "LT",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "CALLDATALOAD",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH",
											"source": 17,
											"value": "E0"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "SHR",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH",
											"source": 17,
											"value": "4A0687EF"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH",
											"source": 17,
											"value": "75B30BE6"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "tag",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 277,
											"end": 905,
											"name": "tag",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 277,
											"end": 905,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 2649,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2649,
											"end": 2658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2649,
											"end": 2660,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2649,
											"end": 2660,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2649,
											"end": 2660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 277,
											"end": 905,
											"name": "STOP",
											"source": 17
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "3"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "CALLVALUE",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "9"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "9"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "10"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 1049,
											"end": 1295,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "13"
										},
										{
											"begin": 1049,
											"end": 1295,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "10"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "STOP",
											"source": 20
										},
										{
											"begin": 632,
											"end": 902,
											"name": "tag",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "CALLVALUE",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "14"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "tag",
											"source": 17,
											"value": "14"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "17"
										},
										{
											"begin": 632,
											"end": 902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "tag",
											"source": 17,
											"value": "16"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 632,
											"end": 902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "tag",
											"source": 17,
											"value": "15"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "STOP",
											"source": 17
										},
										{
											"begin": 2323,
											"end": 2406,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2323,
											"end": 2406,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2371,
											"end": 2399,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 2381,
											"end": 2396,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2381,
											"end": 2398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2371,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2371,
											"end": 2399,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2371,
											"end": 2399,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2371,
											"end": 2399,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2406,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "13"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1141,
											"end": 1142,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1115,
											"end": 1129,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1111,
											"end": 1165,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "25"
										},
										{
											"begin": 1111,
											"end": 1165,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "PUSH",
											"source": 20,
											"value": "D92E233D00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1111,
											"end": 1165,
											"name": "tag",
											"source": 20,
											"value": "25"
										},
										{
											"begin": 1111,
											"end": 1165,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1202,
											"end": 1203,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "26"
										},
										{
											"begin": 1173,
											"end": 1188,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "22"
										},
										{
											"begin": 1173,
											"end": 1190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1190,
											"name": "tag",
											"source": 20,
											"value": "26"
										},
										{
											"begin": 1173,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 1169,
											"end": 1226,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 1169,
											"end": 1226,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "PUSH",
											"source": 20,
											"value": "5DAA87A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1169,
											"end": 1226,
											"name": "tag",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 1169,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1273,
											"end": 1287,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1251,
											"end": 1271,
											"name": "PUSH",
											"source": 20,
											"value": "360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC"
										},
										{
											"begin": 1244,
											"end": 1288,
											"name": "SSTORE",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 632,
											"end": 902,
											"name": "tag",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 632,
											"end": 902,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 817,
											"end": 851,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "29"
										},
										{
											"begin": 829,
											"end": 836,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 838,
											"end": 842,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 844,
											"end": 850,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 817,
											"end": 828,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "30"
										},
										{
											"begin": 817,
											"end": 851,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 817,
											"end": 851,
											"name": "tag",
											"source": 17,
											"value": "29"
										},
										{
											"begin": 817,
											"end": 851,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "31"
										},
										{
											"begin": 867,
											"end": 875,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 877,
											"end": 890,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 861,
											"end": 895,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 861,
											"end": 895,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 861,
											"end": 895,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 861,
											"end": 895,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 861,
											"end": 866,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "32"
										},
										{
											"begin": 861,
											"end": 895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 861,
											"end": 895,
											"name": "tag",
											"source": 17,
											"value": "31"
										},
										{
											"begin": 861,
											"end": 895,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 632,
											"end": 902,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1395,
											"end": 1547,
											"name": "tag",
											"source": 20,
											"value": "22"
										},
										{
											"begin": 1395,
											"end": 1547,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1472,
											"end": 1484,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1519,
											"end": 1539,
											"name": "PUSH",
											"source": 20,
											"value": "360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC"
										},
										{
											"begin": 1513,
											"end": 1540,
											"name": "SLOAD",
											"source": 20
										},
										{
											"begin": 1505,
											"end": 1540,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1505,
											"end": 1540,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1395,
											"end": 1547,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1395,
											"end": 1547,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 949,
											"end": 1844,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 949,
											"end": 1844,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1287,
											"end": 1301,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1284,
											"end": 1285,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1282,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1268,
											"end": 1302,
											"name": "CALLDATACOPY",
											"source": 0
										},
										{
											"begin": 1501,
											"end": 1502,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1498,
											"end": 1499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 1496,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1479,
											"end": 1480,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1463,
											"end": 1477,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1456,
											"end": 1461,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1443,
											"end": 1503,
											"name": "DELEGATECALL",
											"source": 0
										},
										{
											"begin": 1577,
											"end": 1593,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1575,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1571,
											"end": 1572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1556,
											"end": 1594,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1615,
											"end": 1621,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1687,
											"end": 1688,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1797,
											"end": 1813,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1794,
											"end": 1795,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1787,
											"end": 1814,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1733,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1714,
											"end": 1715,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1266,
											"name": "tag",
											"source": 18,
											"value": "30"
										},
										{
											"begin": 1021,
											"end": 1266,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1133,
											"end": 1140,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1168,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1114,
											"end": 1168,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1168,
											"name": "PUSH",
											"source": 18,
											"value": "D412D344"
										},
										{
											"begin": 1177,
											"end": 1181,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "38"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 1114,
											"end": 1183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "tag",
											"source": 18,
											"value": "38"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "EXTCODESIZE",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "tag",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "CALL",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "42"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "tag",
											"source": 18,
											"value": "42"
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1114,
											"end": 1183,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1207,
											"end": 1211,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1224,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1187,
											"end": 1224,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1224,
											"name": "PUSH",
											"source": 18,
											"value": "42FE0980"
										},
										{
											"begin": 1240,
											"end": 1241,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1245,
											"end": 1247,
											"name": "PUSH",
											"source": 18,
											"value": "12"
										},
										{
											"begin": 1249,
											"end": 1253,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1255,
											"end": 1261,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 1187,
											"end": 1262,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "tag",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "EXTCODESIZE",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "45"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "tag",
											"source": 18,
											"value": "45"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "CALL",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "47"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "tag",
											"source": 18,
											"value": "47"
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1187,
											"end": 1262,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1021,
											"end": 1266,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1021,
											"end": 1266,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1021,
											"end": 1266,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1021,
											"end": 1266,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1676,
											"end": 1826,
											"name": "tag",
											"source": 18,
											"value": "32"
										},
										{
											"begin": 1676,
											"end": 1826,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1780,
											"end": 1784,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1795,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1760,
											"end": 1795,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1795,
											"name": "PUSH",
											"source": 18,
											"value": "C68D4283"
										},
										{
											"begin": 1796,
											"end": 1803,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1805,
											"end": 1811,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1813,
											"end": 1821,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "49"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "50"
										},
										{
											"begin": 1760,
											"end": 1822,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "tag",
											"source": 18,
											"value": "49"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "EXTCODESIZE",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "51"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "tag",
											"source": 18,
											"value": "51"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "CALL",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "53"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "tag",
											"source": 18,
											"value": "53"
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1760,
											"end": 1822,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1676,
											"end": 1826,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1676,
											"end": 1826,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1676,
											"end": 1826,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1676,
											"end": 1826,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 7,
											"end": 82,
											"name": "tag",
											"source": 21,
											"value": "54"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 40,
											"end": 46,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 75,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 76,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 57,
											"end": 76,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 57,
											"end": 76,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7,
											"end": 82,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 7,
											"end": 82,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 21,
											"value": "55"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 21,
											"value": "56"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 21,
											"value": "58"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "98"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 21,
											"value": "98"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 21,
											"value": "59"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "100"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "58"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 21,
											"value": "100"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "101"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 21,
											"value": "101"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "103"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "59"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 21,
											"value": "103"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "tag",
											"source": 21,
											"value": "12"
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 900,
											"end": 906,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 949,
											"end": 951,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 937,
											"end": 946,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 928,
											"end": 935,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 924,
											"end": 947,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 920,
											"end": 952,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "105"
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "106"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "55"
										},
										{
											"begin": 955,
											"end": 1034,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "tag",
											"source": 21,
											"value": "106"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "tag",
											"source": 21,
											"value": "105"
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1075,
											"end": 1076,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "107"
										},
										{
											"begin": 1145,
											"end": 1152,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1125,
											"end": 1134,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 1121,
											"end": 1143,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 1100,
											"end": 1153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "tag",
											"source": 21,
											"value": "107"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1090,
											"end": 1153,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1090,
											"end": 1153,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1046,
											"end": 1163,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1176,
											"end": 1293,
											"name": "tag",
											"source": 21,
											"value": "61"
										},
										{
											"begin": 1176,
											"end": 1293,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1285,
											"end": 1286,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1282,
											"end": 1283,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1275,
											"end": 1287,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1299,
											"end": 1416,
											"name": "tag",
											"source": 21,
											"value": "62"
										},
										{
											"begin": 1299,
											"end": 1416,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1408,
											"end": 1409,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1405,
											"end": 1406,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1398,
											"end": 1410,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1422,
											"end": 1524,
											"name": "tag",
											"source": 21,
											"value": "63"
										},
										{
											"begin": 1422,
											"end": 1524,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1463,
											"end": 1469,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1514,
											"end": 1516,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 1510,
											"end": 1517,
											"name": "NOT",
											"source": 21
										},
										{
											"begin": 1505,
											"end": 1507,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 1498,
											"end": 1503,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1494,
											"end": 1508,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1490,
											"end": 1518,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1480,
											"end": 1518,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1480,
											"end": 1518,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1422,
											"end": 1524,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1422,
											"end": 1524,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1422,
											"end": 1524,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1422,
											"end": 1524,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1530,
											"end": 1710,
											"name": "tag",
											"source": 21,
											"value": "64"
										},
										{
											"begin": 1530,
											"end": 1710,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1578,
											"end": 1655,
											"name": "PUSH",
											"source": 21,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1575,
											"end": 1576,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1568,
											"end": 1656,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1675,
											"end": 1679,
											"name": "PUSH",
											"source": 21,
											"value": "41"
										},
										{
											"begin": 1672,
											"end": 1673,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 1665,
											"end": 1680,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1699,
											"end": 1703,
											"name": "PUSH",
											"source": 21,
											"value": "24"
										},
										{
											"begin": 1696,
											"end": 1697,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1689,
											"end": 1704,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1716,
											"end": 1997,
											"name": "tag",
											"source": 21,
											"value": "65"
										},
										{
											"begin": 1716,
											"end": 1997,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1799,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "113"
										},
										{
											"begin": 1821,
											"end": 1825,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1799,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "63"
										},
										{
											"begin": 1799,
											"end": 1826,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1799,
											"end": 1826,
											"name": "tag",
											"source": 21,
											"value": "113"
										},
										{
											"begin": 1799,
											"end": 1826,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1791,
											"end": 1797,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1787,
											"end": 1827,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1929,
											"end": 1935,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1917,
											"end": 1927,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1914,
											"end": 1936,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 1893,
											"end": 1911,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1881,
											"end": 1891,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1878,
											"end": 1912,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 1875,
											"end": 1937,
											"name": "OR",
											"source": 21
										},
										{
											"begin": 1872,
											"end": 1960,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1872,
											"end": 1960,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "114"
										},
										{
											"begin": 1872,
											"end": 1960,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "115"
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "64"
										},
										{
											"begin": 1940,
											"end": 1958,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "tag",
											"source": 21,
											"value": "115"
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1872,
											"end": 1960,
											"name": "tag",
											"source": 21,
											"value": "114"
										},
										{
											"begin": 1872,
											"end": 1960,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1980,
											"end": 1990,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1976,
											"end": 1978,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1969,
											"end": 1991,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1759,
											"end": 1997,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1716,
											"end": 1997,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1716,
											"end": 1997,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1716,
											"end": 1997,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2003,
											"end": 2132,
											"name": "tag",
											"source": 21,
											"value": "66"
										},
										{
											"begin": 2003,
											"end": 2132,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2037,
											"end": 2043,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2064,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "117"
										},
										{
											"begin": 2064,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "54"
										},
										{
											"begin": 2064,
											"end": 2084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2064,
											"end": 2084,
											"name": "tag",
											"source": 21,
											"value": "117"
										},
										{
											"begin": 2064,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2054,
											"end": 2084,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2054,
											"end": 2084,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2093,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "118"
										},
										{
											"begin": 2121,
											"end": 2125,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2113,
											"end": 2119,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2093,
											"end": 2126,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "65"
										},
										{
											"begin": 2093,
											"end": 2126,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2093,
											"end": 2126,
											"name": "tag",
											"source": 21,
											"value": "118"
										},
										{
											"begin": 2093,
											"end": 2126,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2003,
											"end": 2132,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2003,
											"end": 2132,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2003,
											"end": 2132,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2003,
											"end": 2132,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2138,
											"end": 2446,
											"name": "tag",
											"source": 21,
											"value": "67"
										},
										{
											"begin": 2138,
											"end": 2446,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2200,
											"end": 2204,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2290,
											"end": 2308,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2282,
											"end": 2288,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2279,
											"end": 2309,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 2276,
											"end": 2332,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 2276,
											"end": 2332,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "120"
										},
										{
											"begin": 2276,
											"end": 2332,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2312,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "121"
										},
										{
											"begin": 2312,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "64"
										},
										{
											"begin": 2312,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2312,
											"end": 2330,
											"name": "tag",
											"source": 21,
											"value": "121"
										},
										{
											"begin": 2312,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2276,
											"end": 2332,
											"name": "tag",
											"source": 21,
											"value": "120"
										},
										{
											"begin": 2276,
											"end": 2332,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2350,
											"end": 2379,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "122"
										},
										{
											"begin": 2372,
											"end": 2378,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2350,
											"end": 2379,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "63"
										},
										{
											"begin": 2350,
											"end": 2379,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2350,
											"end": 2379,
											"name": "tag",
											"source": 21,
											"value": "122"
										},
										{
											"begin": 2350,
											"end": 2379,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2342,
											"end": 2379,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2342,
											"end": 2379,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2434,
											"end": 2438,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 2428,
											"end": 2432,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2424,
											"end": 2439,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2416,
											"end": 2439,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2416,
											"end": 2439,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2138,
											"end": 2446,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2138,
											"end": 2446,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2138,
											"end": 2446,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2138,
											"end": 2446,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2452,
											"end": 2598,
											"name": "tag",
											"source": 21,
											"value": "68"
										},
										{
											"begin": 2452,
											"end": 2598,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2549,
											"end": 2555,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2544,
											"end": 2547,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2539,
											"end": 2542,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 2526,
											"end": 2556,
											"name": "CALLDATACOPY",
											"source": 21
										},
										{
											"begin": 2590,
											"end": 2591,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2581,
											"end": 2587,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 2576,
											"end": 2579,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 2572,
											"end": 2588,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2565,
											"end": 2592,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 2452,
											"end": 2598,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2452,
											"end": 2598,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2452,
											"end": 2598,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2452,
											"end": 2598,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2604,
											"end": 3029,
											"name": "tag",
											"source": 21,
											"value": "69"
										},
										{
											"begin": 2604,
											"end": 3029,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2682,
											"end": 2687,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2707,
											"end": 2773,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "125"
										},
										{
											"begin": 2723,
											"end": 2772,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "126"
										},
										{
											"begin": 2765,
											"end": 2771,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 2723,
											"end": 2772,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "67"
										},
										{
											"begin": 2723,
											"end": 2772,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2723,
											"end": 2772,
											"name": "tag",
											"source": 21,
											"value": "126"
										},
										{
											"begin": 2723,
											"end": 2772,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2707,
											"end": 2773,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "66"
										},
										{
											"begin": 2707,
											"end": 2773,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2707,
											"end": 2773,
											"name": "tag",
											"source": 21,
											"value": "125"
										},
										{
											"begin": 2707,
											"end": 2773,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2698,
											"end": 2773,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2698,
											"end": 2773,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2796,
											"end": 2802,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2789,
											"end": 2794,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2782,
											"end": 2803,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 2834,
											"end": 2838,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 2827,
											"end": 2832,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2823,
											"end": 2839,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2872,
											"end": 2875,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 2863,
											"end": 2869,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 2858,
											"end": 2861,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 2854,
											"end": 2870,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2851,
											"end": 2876,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 2848,
											"end": 2960,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 2848,
											"end": 2960,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "127"
										},
										{
											"begin": 2848,
											"end": 2960,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2879,
											"end": 2958,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "128"
										},
										{
											"begin": 2879,
											"end": 2958,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "62"
										},
										{
											"begin": 2879,
											"end": 2958,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2879,
											"end": 2958,
											"name": "tag",
											"source": 21,
											"value": "128"
										},
										{
											"begin": 2879,
											"end": 2958,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2848,
											"end": 2960,
											"name": "tag",
											"source": 21,
											"value": "127"
										},
										{
											"begin": 2848,
											"end": 2960,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2969,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "129"
										},
										{
											"begin": 3016,
											"end": 3022,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 3011,
											"end": 3014,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 3006,
											"end": 3009,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 2969,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "68"
										},
										{
											"begin": 2969,
											"end": 3023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 2969,
											"end": 3023,
											"name": "tag",
											"source": 21,
											"value": "129"
										},
										{
											"begin": 2969,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2688,
											"end": 3029,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2604,
											"end": 3029,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 2604,
											"end": 3029,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 2604,
											"end": 3029,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2604,
											"end": 3029,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2604,
											"end": 3029,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2604,
											"end": 3029,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3049,
											"end": 3389,
											"name": "tag",
											"source": 21,
											"value": "70"
										},
										{
											"begin": 3049,
											"end": 3389,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3105,
											"end": 3110,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3154,
											"end": 3157,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 3147,
											"end": 3151,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 3139,
											"end": 3145,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 3135,
											"end": 3152,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 3131,
											"end": 3158,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 3121,
											"end": 3243,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "131"
										},
										{
											"begin": 3121,
											"end": 3243,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 3162,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "132"
										},
										{
											"begin": 3162,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "61"
										},
										{
											"begin": 3162,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3162,
											"end": 3241,
											"name": "tag",
											"source": 21,
											"value": "132"
										},
										{
											"begin": 3162,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3121,
											"end": 3243,
											"name": "tag",
											"source": 21,
											"value": "131"
										},
										{
											"begin": 3121,
											"end": 3243,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3279,
											"end": 3285,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3266,
											"end": 3286,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 3304,
											"end": 3383,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "133"
										},
										{
											"begin": 3379,
											"end": 3382,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 3371,
											"end": 3377,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 3364,
											"end": 3368,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 3356,
											"end": 3362,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 3352,
											"end": 3369,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 3304,
											"end": 3383,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "69"
										},
										{
											"begin": 3304,
											"end": 3383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3304,
											"end": 3383,
											"name": "tag",
											"source": 21,
											"value": "133"
										},
										{
											"begin": 3304,
											"end": 3383,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3295,
											"end": 3383,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 3295,
											"end": 3383,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3111,
											"end": 3389,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3049,
											"end": 3389,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3049,
											"end": 3389,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 3049,
											"end": 3389,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3049,
											"end": 3389,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3049,
											"end": 3389,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3395,
											"end": 3472,
											"name": "tag",
											"source": 21,
											"value": "71"
										},
										{
											"begin": 3395,
											"end": 3472,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3432,
											"end": 3439,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3461,
											"end": 3466,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3450,
											"end": 3466,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 3450,
											"end": 3466,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3395,
											"end": 3472,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 3395,
											"end": 3472,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 3395,
											"end": 3472,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3395,
											"end": 3472,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3478,
											"end": 3600,
											"name": "tag",
											"source": 21,
											"value": "72"
										},
										{
											"begin": 3478,
											"end": 3600,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3551,
											"end": 3575,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "136"
										},
										{
											"begin": 3569,
											"end": 3574,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3551,
											"end": 3575,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "71"
										},
										{
											"begin": 3551,
											"end": 3575,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3551,
											"end": 3575,
											"name": "tag",
											"source": 21,
											"value": "136"
										},
										{
											"begin": 3551,
											"end": 3575,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3544,
											"end": 3549,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3541,
											"end": 3576,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "137"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 3590,
											"end": 3591,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3587,
											"end": 3588,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 3580,
											"end": 3592,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "tag",
											"source": 21,
											"value": "137"
										},
										{
											"begin": 3531,
											"end": 3594,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3478,
											"end": 3600,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3478,
											"end": 3600,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3606,
											"end": 3745,
											"name": "tag",
											"source": 21,
											"value": "73"
										},
										{
											"begin": 3606,
											"end": 3745,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3652,
											"end": 3657,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3690,
											"end": 3696,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3677,
											"end": 3697,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 3668,
											"end": 3697,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 3668,
											"end": 3697,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3706,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "139"
										},
										{
											"begin": 3733,
											"end": 3738,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 3706,
											"end": 3739,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "72"
										},
										{
											"begin": 3706,
											"end": 3739,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3706,
											"end": 3739,
											"name": "tag",
											"source": 21,
											"value": "139"
										},
										{
											"begin": 3706,
											"end": 3739,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3606,
											"end": 3745,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3606,
											"end": 3745,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 3606,
											"end": 3745,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3606,
											"end": 3745,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3606,
											"end": 3745,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "tag",
											"source": 21,
											"value": "17"
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3866,
											"end": 3872,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3874,
											"end": 3880,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 3882,
											"end": 3888,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3890,
											"end": 3896,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 3898,
											"end": 3904,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 3947,
											"end": 3950,
											"name": "PUSH",
											"source": 21,
											"value": "A0"
										},
										{
											"begin": 3935,
											"end": 3944,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 3922,
											"end": 3945,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 3918,
											"end": 3951,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 3915,
											"end": 4035,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 3915,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "141"
										},
										{
											"begin": 3915,
											"end": 4035,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 3954,
											"end": 4033,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "142"
										},
										{
											"begin": 3954,
											"end": 4033,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "55"
										},
										{
											"begin": 3954,
											"end": 4033,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 3954,
											"end": 4033,
											"name": "tag",
											"source": 21,
											"value": "142"
										},
										{
											"begin": 3954,
											"end": 4033,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 3915,
											"end": 4035,
											"name": "tag",
											"source": 21,
											"value": "141"
										},
										{
											"begin": 3915,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4074,
											"end": 4075,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 4099,
											"end": 4152,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "143"
										},
										{
											"begin": 4144,
											"end": 4151,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 4135,
											"end": 4141,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4124,
											"end": 4133,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 4120,
											"end": 4142,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4099,
											"end": 4152,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 4099,
											"end": 4152,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4099,
											"end": 4152,
											"name": "tag",
											"source": 21,
											"value": "143"
										},
										{
											"begin": 4099,
											"end": 4152,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4089,
											"end": 4152,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 4089,
											"end": 4152,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4045,
											"end": 4162,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4229,
											"end": 4231,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 4218,
											"end": 4227,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 4214,
											"end": 4232,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4201,
											"end": 4233,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 4260,
											"end": 4278,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4252,
											"end": 4258,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 4249,
											"end": 4279,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 4246,
											"end": 4363,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 4246,
											"end": 4363,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "144"
										},
										{
											"begin": 4246,
											"end": 4363,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 4282,
											"end": 4361,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "145"
										},
										{
											"begin": 4282,
											"end": 4361,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "56"
										},
										{
											"begin": 4282,
											"end": 4361,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4282,
											"end": 4361,
											"name": "tag",
											"source": 21,
											"value": "145"
										},
										{
											"begin": 4282,
											"end": 4361,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4246,
											"end": 4363,
											"name": "tag",
											"source": 21,
											"value": "144"
										},
										{
											"begin": 4246,
											"end": 4363,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4387,
											"end": 4450,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "146"
										},
										{
											"begin": 4442,
											"end": 4449,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 4433,
											"end": 4439,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4422,
											"end": 4431,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 4418,
											"end": 4440,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4387,
											"end": 4450,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "70"
										},
										{
											"begin": 4387,
											"end": 4450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4387,
											"end": 4450,
											"name": "tag",
											"source": 21,
											"value": "146"
										},
										{
											"begin": 4387,
											"end": 4450,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4377,
											"end": 4450,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 4377,
											"end": 4450,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4172,
											"end": 4460,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4527,
											"end": 4529,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 4516,
											"end": 4525,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 4512,
											"end": 4530,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4499,
											"end": 4531,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 4558,
											"end": 4576,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4550,
											"end": 4556,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 4547,
											"end": 4577,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 4544,
											"end": 4661,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 4544,
											"end": 4661,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "147"
										},
										{
											"begin": 4544,
											"end": 4661,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 4580,
											"end": 4659,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "148"
										},
										{
											"begin": 4580,
											"end": 4659,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "56"
										},
										{
											"begin": 4580,
											"end": 4659,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4580,
											"end": 4659,
											"name": "tag",
											"source": 21,
											"value": "148"
										},
										{
											"begin": 4580,
											"end": 4659,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4544,
											"end": 4661,
											"name": "tag",
											"source": 21,
											"value": "147"
										},
										{
											"begin": 4544,
											"end": 4661,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4685,
											"end": 4748,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "149"
										},
										{
											"begin": 4740,
											"end": 4747,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 4731,
											"end": 4737,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4720,
											"end": 4729,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 4716,
											"end": 4738,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4685,
											"end": 4748,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "70"
										},
										{
											"begin": 4685,
											"end": 4748,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4685,
											"end": 4748,
											"name": "tag",
											"source": 21,
											"value": "149"
										},
										{
											"begin": 4685,
											"end": 4748,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4675,
											"end": 4748,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 4675,
											"end": 4748,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4470,
											"end": 4758,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4797,
											"end": 4799,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 4823,
											"end": 4876,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "150"
										},
										{
											"begin": 4868,
											"end": 4875,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 4859,
											"end": 4865,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4848,
											"end": 4857,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 4844,
											"end": 4866,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4823,
											"end": 4876,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 4823,
											"end": 4876,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4823,
											"end": 4876,
											"name": "tag",
											"source": 21,
											"value": "150"
										},
										{
											"begin": 4823,
											"end": 4876,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4813,
											"end": 4876,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 4813,
											"end": 4876,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4768,
											"end": 4886,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4925,
											"end": 4928,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 4952,
											"end": 5005,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "151"
										},
										{
											"begin": 4997,
											"end": 5004,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 4988,
											"end": 4994,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 4977,
											"end": 4986,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 4973,
											"end": 4995,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 4952,
											"end": 5005,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "73"
										},
										{
											"begin": 4952,
											"end": 5005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4952,
											"end": 5005,
											"name": "tag",
											"source": 21,
											"value": "151"
										},
										{
											"begin": 4952,
											"end": 5005,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 4942,
											"end": 5005,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 4942,
											"end": 5005,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 4896,
											"end": 5015,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 3751,
											"end": 5022,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5028,
											"end": 5146,
											"name": "tag",
											"source": 21,
											"value": "74"
										},
										{
											"begin": 5028,
											"end": 5146,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "153"
										},
										{
											"begin": 5133,
											"end": 5138,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "58"
										},
										{
											"begin": 5115,
											"end": 5139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "tag",
											"source": 21,
											"value": "153"
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5110,
											"end": 5113,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5103,
											"end": 5140,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 5028,
											"end": 5146,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5028,
											"end": 5146,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5028,
											"end": 5146,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5152,
											"end": 5374,
											"name": "tag",
											"source": 21,
											"value": "39"
										},
										{
											"begin": 5152,
											"end": 5374,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5245,
											"end": 5249,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5283,
											"end": 5285,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 5272,
											"end": 5281,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5268,
											"end": 5286,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 5260,
											"end": 5286,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5260,
											"end": 5286,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5296,
											"end": 5367,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "155"
										},
										{
											"begin": 5364,
											"end": 5365,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5353,
											"end": 5362,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 5349,
											"end": 5366,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 5340,
											"end": 5346,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 5296,
											"end": 5367,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "74"
										},
										{
											"begin": 5296,
											"end": 5367,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5296,
											"end": 5367,
											"name": "tag",
											"source": 21,
											"value": "155"
										},
										{
											"begin": 5296,
											"end": 5367,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5152,
											"end": 5374,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 5152,
											"end": 5374,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5152,
											"end": 5374,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5152,
											"end": 5374,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5152,
											"end": 5374,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5380,
											"end": 5440,
											"name": "tag",
											"source": 21,
											"value": "75"
										},
										{
											"begin": 5380,
											"end": 5440,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5408,
											"end": 5411,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5429,
											"end": 5434,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 5422,
											"end": 5434,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5422,
											"end": 5434,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5380,
											"end": 5440,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5380,
											"end": 5440,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5380,
											"end": 5440,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5380,
											"end": 5440,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5446,
											"end": 5588,
											"name": "tag",
											"source": 21,
											"value": "76"
										},
										{
											"begin": 5446,
											"end": 5588,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5496,
											"end": 5505,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5529,
											"end": 5582,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "158"
										},
										{
											"begin": 5547,
											"end": 5581,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "159"
										},
										{
											"begin": 5556,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "160"
										},
										{
											"begin": 5574,
											"end": 5579,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 5556,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 5556,
											"end": 5580,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5556,
											"end": 5580,
											"name": "tag",
											"source": 21,
											"value": "160"
										},
										{
											"begin": 5556,
											"end": 5580,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5547,
											"end": 5581,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "75"
										},
										{
											"begin": 5547,
											"end": 5581,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5547,
											"end": 5581,
											"name": "tag",
											"source": 21,
											"value": "159"
										},
										{
											"begin": 5547,
											"end": 5581,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5529,
											"end": 5582,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 5529,
											"end": 5582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5529,
											"end": 5582,
											"name": "tag",
											"source": 21,
											"value": "158"
										},
										{
											"begin": 5529,
											"end": 5582,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5516,
											"end": 5582,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5516,
											"end": 5582,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5446,
											"end": 5588,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5446,
											"end": 5588,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5446,
											"end": 5588,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5446,
											"end": 5588,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5594,
											"end": 5720,
											"name": "tag",
											"source": 21,
											"value": "77"
										},
										{
											"begin": 5594,
											"end": 5720,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5644,
											"end": 5653,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5677,
											"end": 5714,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "162"
										},
										{
											"begin": 5708,
											"end": 5713,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5677,
											"end": 5714,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "76"
										},
										{
											"begin": 5677,
											"end": 5714,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5677,
											"end": 5714,
											"name": "tag",
											"source": 21,
											"value": "162"
										},
										{
											"begin": 5677,
											"end": 5714,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5664,
											"end": 5714,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5664,
											"end": 5714,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5594,
											"end": 5720,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5594,
											"end": 5720,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5594,
											"end": 5720,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5594,
											"end": 5720,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5726,
											"end": 5866,
											"name": "tag",
											"source": 21,
											"value": "78"
										},
										{
											"begin": 5726,
											"end": 5866,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5790,
											"end": 5799,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 5823,
											"end": 5860,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "164"
										},
										{
											"begin": 5854,
											"end": 5859,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5823,
											"end": 5860,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "77"
										},
										{
											"begin": 5823,
											"end": 5860,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5823,
											"end": 5860,
											"name": "tag",
											"source": 21,
											"value": "164"
										},
										{
											"begin": 5823,
											"end": 5860,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5810,
											"end": 5860,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5810,
											"end": 5860,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5726,
											"end": 5866,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 5726,
											"end": 5866,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 5726,
											"end": 5866,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5726,
											"end": 5866,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5872,
											"end": 6031,
											"name": "tag",
											"source": 21,
											"value": "79"
										},
										{
											"begin": 5872,
											"end": 6031,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5973,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "166"
										},
										{
											"begin": 6018,
											"end": 6023,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 5973,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "78"
										},
										{
											"begin": 5973,
											"end": 6024,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5973,
											"end": 6024,
											"name": "tag",
											"source": 21,
											"value": "166"
										},
										{
											"begin": 5973,
											"end": 6024,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 5968,
											"end": 5971,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 5961,
											"end": 6025,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 5872,
											"end": 6031,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5872,
											"end": 6031,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 5872,
											"end": 6031,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6037,
											"end": 6123,
											"name": "tag",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 6037,
											"end": 6123,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6083,
											"end": 6090,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6112,
											"end": 6117,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6101,
											"end": 6117,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6101,
											"end": 6117,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6037,
											"end": 6123,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6037,
											"end": 6123,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6037,
											"end": 6123,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6037,
											"end": 6123,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6129,
											"end": 6215,
											"name": "tag",
											"source": 21,
											"value": "81"
										},
										{
											"begin": 6129,
											"end": 6215,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6164,
											"end": 6171,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6204,
											"end": 6208,
											"name": "PUSH",
											"source": 21,
											"value": "FF"
										},
										{
											"begin": 6197,
											"end": 6202,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6193,
											"end": 6209,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 6182,
											"end": 6209,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6182,
											"end": 6209,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6129,
											"end": 6215,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6129,
											"end": 6215,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6129,
											"end": 6215,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6129,
											"end": 6215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6221,
											"end": 6377,
											"name": "tag",
											"source": 21,
											"value": "82"
										},
										{
											"begin": 6221,
											"end": 6377,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6278,
											"end": 6287,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6311,
											"end": 6371,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "170"
										},
										{
											"begin": 6327,
											"end": 6370,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "171"
										},
										{
											"begin": 6336,
											"end": 6369,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "172"
										},
										{
											"begin": 6363,
											"end": 6368,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 6336,
											"end": 6369,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 6336,
											"end": 6369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6336,
											"end": 6369,
											"name": "tag",
											"source": 21,
											"value": "172"
										},
										{
											"begin": 6336,
											"end": 6369,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6327,
											"end": 6370,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "75"
										},
										{
											"begin": 6327,
											"end": 6370,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6327,
											"end": 6370,
											"name": "tag",
											"source": 21,
											"value": "171"
										},
										{
											"begin": 6327,
											"end": 6370,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6311,
											"end": 6371,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "81"
										},
										{
											"begin": 6311,
											"end": 6371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6311,
											"end": 6371,
											"name": "tag",
											"source": 21,
											"value": "170"
										},
										{
											"begin": 6311,
											"end": 6371,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6298,
											"end": 6371,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6298,
											"end": 6371,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6221,
											"end": 6377,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6221,
											"end": 6377,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6221,
											"end": 6377,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6221,
											"end": 6377,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6383,
											"end": 6528,
											"name": "tag",
											"source": 21,
											"value": "83"
										},
										{
											"begin": 6383,
											"end": 6528,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6477,
											"end": 6521,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "174"
										},
										{
											"begin": 6515,
											"end": 6520,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6477,
											"end": 6521,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "82"
										},
										{
											"begin": 6477,
											"end": 6521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6477,
											"end": 6521,
											"name": "tag",
											"source": 21,
											"value": "174"
										},
										{
											"begin": 6477,
											"end": 6521,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6472,
											"end": 6475,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6465,
											"end": 6522,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 6383,
											"end": 6528,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6383,
											"end": 6528,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6383,
											"end": 6528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6534,
											"end": 6633,
											"name": "tag",
											"source": 21,
											"value": "84"
										},
										{
											"begin": 6534,
											"end": 6633,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6586,
											"end": 6592,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6620,
											"end": 6625,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6614,
											"end": 6626,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 6604,
											"end": 6626,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6604,
											"end": 6626,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6534,
											"end": 6633,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6534,
											"end": 6633,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6534,
											"end": 6633,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6534,
											"end": 6633,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6639,
											"end": 6808,
											"name": "tag",
											"source": 21,
											"value": "85"
										},
										{
											"begin": 6639,
											"end": 6808,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6723,
											"end": 6734,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6757,
											"end": 6763,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6752,
											"end": 6755,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6745,
											"end": 6764,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 6797,
											"end": 6801,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 6792,
											"end": 6795,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6788,
											"end": 6802,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 6773,
											"end": 6802,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6773,
											"end": 6802,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6639,
											"end": 6808,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 6639,
											"end": 6808,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 6639,
											"end": 6808,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6639,
											"end": 6808,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6639,
											"end": 6808,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6814,
											"end": 7060,
											"name": "tag",
											"source": 21,
											"value": "86"
										},
										{
											"begin": 6814,
											"end": 7060,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6895,
											"end": 6896,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "tag",
											"source": 21,
											"value": "178"
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 6919,
											"end": 6925,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 6916,
											"end": 6917,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6913,
											"end": 6926,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "180"
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 7004,
											"end": 7005,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 6999,
											"end": 7002,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 6995,
											"end": 7006,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 6989,
											"end": 7007,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 6985,
											"end": 6986,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6980,
											"end": 6983,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 6976,
											"end": 6987,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 6969,
											"end": 7008,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 6941,
											"end": 6943,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 6938,
											"end": 6939,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 6934,
											"end": 6944,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 6929,
											"end": 6944,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 6929,
											"end": 6944,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "178"
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "tag",
											"source": 21,
											"value": "180"
										},
										{
											"begin": 6905,
											"end": 7018,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7052,
											"end": 7053,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 7043,
											"end": 7049,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 7038,
											"end": 7041,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 7034,
											"end": 7050,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7027,
											"end": 7054,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 6876,
											"end": 7060,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6814,
											"end": 7060,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6814,
											"end": 7060,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6814,
											"end": 7060,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 6814,
											"end": 7060,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7066,
											"end": 7443,
											"name": "tag",
											"source": 21,
											"value": "87"
										},
										{
											"begin": 7066,
											"end": 7443,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7154,
											"end": 7157,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 7182,
											"end": 7221,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "182"
										},
										{
											"begin": 7215,
											"end": 7220,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 7182,
											"end": 7221,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "84"
										},
										{
											"begin": 7182,
											"end": 7221,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7182,
											"end": 7221,
											"name": "tag",
											"source": 21,
											"value": "182"
										},
										{
											"begin": 7182,
											"end": 7221,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7237,
											"end": 7308,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "183"
										},
										{
											"begin": 7301,
											"end": 7307,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7296,
											"end": 7299,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 7237,
											"end": 7308,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "85"
										},
										{
											"begin": 7237,
											"end": 7308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7237,
											"end": 7308,
											"name": "tag",
											"source": 21,
											"value": "183"
										},
										{
											"begin": 7237,
											"end": 7308,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7230,
											"end": 7308,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 7230,
											"end": 7308,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7317,
											"end": 7382,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "184"
										},
										{
											"begin": 7375,
											"end": 7381,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7370,
											"end": 7373,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 7363,
											"end": 7367,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 7356,
											"end": 7361,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 7352,
											"end": 7368,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7317,
											"end": 7382,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "86"
										},
										{
											"begin": 7317,
											"end": 7382,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7317,
											"end": 7382,
											"name": "tag",
											"source": 21,
											"value": "184"
										},
										{
											"begin": 7317,
											"end": 7382,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7407,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "185"
										},
										{
											"begin": 7429,
											"end": 7435,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7407,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "63"
										},
										{
											"begin": 7407,
											"end": 7436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7407,
											"end": 7436,
											"name": "tag",
											"source": 21,
											"value": "185"
										},
										{
											"begin": 7407,
											"end": 7436,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7402,
											"end": 7405,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 7398,
											"end": 7437,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7391,
											"end": 7437,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 7391,
											"end": 7437,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7158,
											"end": 7443,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7066,
											"end": 7443,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 7066,
											"end": 7443,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 7066,
											"end": 7443,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7066,
											"end": 7443,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7066,
											"end": 7443,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "tag",
											"source": 21,
											"value": "44"
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7687,
											"end": 7691,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 7725,
											"end": 7728,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 7714,
											"end": 7723,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 7710,
											"end": 7729,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7702,
											"end": 7729,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 7702,
											"end": 7729,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7739,
											"end": 7824,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "187"
										},
										{
											"begin": 7821,
											"end": 7822,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 7810,
											"end": 7819,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7806,
											"end": 7823,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7797,
											"end": 7803,
											"name": "DUP8",
											"source": 21
										},
										{
											"begin": 7739,
											"end": 7824,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "79"
										},
										{
											"begin": 7739,
											"end": 7824,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7739,
											"end": 7824,
											"name": "tag",
											"source": 21,
											"value": "187"
										},
										{
											"begin": 7739,
											"end": 7824,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7834,
											"end": 7913,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "188"
										},
										{
											"begin": 7909,
											"end": 7911,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 7898,
											"end": 7907,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7894,
											"end": 7912,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7885,
											"end": 7891,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 7834,
											"end": 7913,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "83"
										},
										{
											"begin": 7834,
											"end": 7913,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7834,
											"end": 7913,
											"name": "tag",
											"source": 21,
											"value": "188"
										},
										{
											"begin": 7834,
											"end": 7913,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7960,
											"end": 7969,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7954,
											"end": 7958,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 7950,
											"end": 7970,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 7945,
											"end": 7947,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 7934,
											"end": 7943,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 7930,
											"end": 7948,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 7923,
											"end": 7971,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 7988,
											"end": 8066,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "189"
										},
										{
											"begin": 8061,
											"end": 8065,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8052,
											"end": 8058,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 7988,
											"end": 8066,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "87"
										},
										{
											"begin": 7988,
											"end": 8066,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 7988,
											"end": 8066,
											"name": "tag",
											"source": 21,
											"value": "189"
										},
										{
											"begin": 7988,
											"end": 8066,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 7980,
											"end": 8066,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 7980,
											"end": 8066,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8113,
											"end": 8122,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8107,
											"end": 8111,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8103,
											"end": 8123,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 8098,
											"end": 8100,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 8087,
											"end": 8096,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 8083,
											"end": 8101,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8076,
											"end": 8124,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 8141,
											"end": 8219,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "190"
										},
										{
											"begin": 8214,
											"end": 8218,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8205,
											"end": 8211,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 8141,
											"end": 8219,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "87"
										},
										{
											"begin": 8141,
											"end": 8219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8141,
											"end": 8219,
											"name": "tag",
											"source": 21,
											"value": "190"
										},
										{
											"begin": 8141,
											"end": 8219,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8133,
											"end": 8219,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 8133,
											"end": 8219,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "SWAP6",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 7449,
											"end": 8226,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8232,
											"end": 8350,
											"name": "tag",
											"source": 21,
											"value": "88"
										},
										{
											"begin": 8232,
											"end": 8350,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8319,
											"end": 8343,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "192"
										},
										{
											"begin": 8337,
											"end": 8342,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8319,
											"end": 8343,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "71"
										},
										{
											"begin": 8319,
											"end": 8343,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8319,
											"end": 8343,
											"name": "tag",
											"source": 21,
											"value": "192"
										},
										{
											"begin": 8319,
											"end": 8343,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8314,
											"end": 8317,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 8307,
											"end": 8344,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 8232,
											"end": 8350,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8232,
											"end": 8350,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8232,
											"end": 8350,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8356,
											"end": 8454,
											"name": "tag",
											"source": 21,
											"value": "89"
										},
										{
											"begin": 8356,
											"end": 8454,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 8441,
											"end": 8446,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8435,
											"end": 8447,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 8425,
											"end": 8447,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 8425,
											"end": 8447,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8356,
											"end": 8454,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 8356,
											"end": 8454,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 8356,
											"end": 8454,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8356,
											"end": 8454,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8460,
											"end": 8628,
											"name": "tag",
											"source": 21,
											"value": "90"
										},
										{
											"begin": 8460,
											"end": 8628,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8543,
											"end": 8554,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 8577,
											"end": 8583,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 8572,
											"end": 8575,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 8565,
											"end": 8584,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 8617,
											"end": 8621,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 8612,
											"end": 8615,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 8608,
											"end": 8622,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8593,
											"end": 8622,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 8593,
											"end": 8622,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8460,
											"end": 8628,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 8460,
											"end": 8628,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 8460,
											"end": 8628,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8460,
											"end": 8628,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8460,
											"end": 8628,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8634,
											"end": 9007,
											"name": "tag",
											"source": 21,
											"value": "91"
										},
										{
											"begin": 8634,
											"end": 9007,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8720,
											"end": 8723,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 8748,
											"end": 8786,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "196"
										},
										{
											"begin": 8780,
											"end": 8785,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 8748,
											"end": 8786,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "89"
										},
										{
											"begin": 8748,
											"end": 8786,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8748,
											"end": 8786,
											"name": "tag",
											"source": 21,
											"value": "196"
										},
										{
											"begin": 8748,
											"end": 8786,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8802,
											"end": 8872,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "197"
										},
										{
											"begin": 8865,
											"end": 8871,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8860,
											"end": 8863,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 8802,
											"end": 8872,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "90"
										},
										{
											"begin": 8802,
											"end": 8872,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8802,
											"end": 8872,
											"name": "tag",
											"source": 21,
											"value": "197"
										},
										{
											"begin": 8802,
											"end": 8872,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8795,
											"end": 8872,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 8795,
											"end": 8872,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8881,
											"end": 8946,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "198"
										},
										{
											"begin": 8939,
											"end": 8945,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8934,
											"end": 8937,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 8927,
											"end": 8931,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 8920,
											"end": 8925,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 8916,
											"end": 8932,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8881,
											"end": 8946,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "86"
										},
										{
											"begin": 8881,
											"end": 8946,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8881,
											"end": 8946,
											"name": "tag",
											"source": 21,
											"value": "198"
										},
										{
											"begin": 8881,
											"end": 8946,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8971,
											"end": 9000,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "199"
										},
										{
											"begin": 8993,
											"end": 8999,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 8971,
											"end": 9000,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "63"
										},
										{
											"begin": 8971,
											"end": 9000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 8971,
											"end": 9000,
											"name": "tag",
											"source": 21,
											"value": "199"
										},
										{
											"begin": 8971,
											"end": 9000,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 8966,
											"end": 8969,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 8962,
											"end": 9001,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 8955,
											"end": 9001,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 8955,
											"end": 9001,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8724,
											"end": 9007,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8634,
											"end": 9007,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 8634,
											"end": 9007,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 8634,
											"end": 9007,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8634,
											"end": 9007,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 8634,
											"end": 9007,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9013,
											"end": 9542,
											"name": "tag",
											"source": 21,
											"value": "50"
										},
										{
											"begin": 9013,
											"end": 9542,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9180,
											"end": 9184,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 9218,
											"end": 9220,
											"name": "PUSH",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 9207,
											"end": 9216,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 9203,
											"end": 9221,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 9195,
											"end": 9221,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 9195,
											"end": 9221,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9231,
											"end": 9302,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "201"
										},
										{
											"begin": 9299,
											"end": 9300,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 9288,
											"end": 9297,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 9284,
											"end": 9301,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 9275,
											"end": 9281,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 9231,
											"end": 9302,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "74"
										},
										{
											"begin": 9231,
											"end": 9302,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9231,
											"end": 9302,
											"name": "tag",
											"source": 21,
											"value": "201"
										},
										{
											"begin": 9231,
											"end": 9302,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9312,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "202"
										},
										{
											"begin": 9380,
											"end": 9382,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 9369,
											"end": 9378,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 9365,
											"end": 9383,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 9356,
											"end": 9362,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 9312,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "88"
										},
										{
											"begin": 9312,
											"end": 9384,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9312,
											"end": 9384,
											"name": "tag",
											"source": 21,
											"value": "202"
										},
										{
											"begin": 9312,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9431,
											"end": 9440,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9425,
											"end": 9429,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9421,
											"end": 9441,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 9416,
											"end": 9418,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 9405,
											"end": 9414,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 9401,
											"end": 9419,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 9394,
											"end": 9442,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 9459,
											"end": 9535,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "203"
										},
										{
											"begin": 9530,
											"end": 9534,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 9521,
											"end": 9527,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 9459,
											"end": 9535,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "91"
										},
										{
											"begin": 9459,
											"end": 9535,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 9459,
											"end": 9535,
											"name": "tag",
											"source": 21,
											"value": "203"
										},
										{
											"begin": 9459,
											"end": 9535,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 9451,
											"end": 9535,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 9451,
											"end": 9535,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9013,
											"end": 9542,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 9013,
											"end": 9542,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 9013,
											"end": 9542,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9013,
											"end": 9542,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9013,
											"end": 9542,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9013,
											"end": 9542,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 9013,
											"end": 9542,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/proxy/Proxy.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"PureSuperToken.sol",
								"base/SuperTokenBase.sol",
								"base/SuperTokenStorage.sol",
								"base/UUPSProxy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"initialize(address,string,string,address,uint256)": "75b30be6",
							"initializeProxy(address)": "4a0687ef"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAddress\",\"type\":\"address\"}],\"name\":\"initializeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"jtriley.eth\",\"kind\":\"dev\",\"methods\":{\"initialize(address,string,string,address,uint256)\":{\"details\":\"Upgrades the super token with the factory, then initializes.\",\"params\":{\"factory\":\"super token factory for initialization\",\"initialSupply\":\"Initial token supply to pre-mint\",\"name\":\"super token name\",\"receiver\":\"Receiver of pre-mint\",\"symbol\":\"super token symbol\"}},\"initializeProxy(address)\":{\"details\":\"Called by the SuperTokenFactory contract on upgrade\",\"params\":{\"initialAddress\":\"logic contract address\"}}},\"title\":\"Minimal Pure Super Token\",\"version\":1},\"userdoc\":{\"errors\":{\"Initialized()\":[{\"notice\":\"Thrown when the logic contract has been set\"}],\"ZeroAddress()\":[{\"notice\":\"Thrown when the logic contract address is zero\"}]},\"kind\":\"user\",\"methods\":{\"initializeProxy(address)\":{\"notice\":\"Stores the logic contract address only once.\"}},\"notice\":\"Pre-minted supply. This is includes no custom logic. Used in `PureSuperTokenDeployer`\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"PureSuperToken.sol\":\"PureSuperToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac\",\"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol\":{\"keccak256\":\"0x114cbccfd652231eb5454ab9c4cfe0d3a7427943dee0cce72d88160f12ed8505\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0837cc47bcd635ab470e336e9448fc1160531220aa8a1d55cea39bbee43af6ab\",\"dweb:/ipfs/QmbpaZcVmSsCeoE3j494TmbWzFriKgUR4TsTK5BwjvxRCw\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol\":{\"keccak256\":\"0x5a52452b00db96398759f1a2017ed8d76390730cb16a0d3e143b1fc7c5b99bed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f3a7c1f327fde03f63058d196f48472f69c0314e77214c6d3661f4b1b85ff99\",\"dweb:/ipfs/Qmf8mJJnPqDPqmDKiofqEhrDFwo9d4zWt5NsToqSH5F6mL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":{\"keccak256\":\"0x1e5604256c5dd52f969b46feea0d708bde11c1a481bf7c50e33c67fd5dbf4262\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7c6c57094abc70ef32b2844b9df403e2c0ca7cee57a90f87038f2f071f7683\",\"dweb:/ipfs/QmSfBSuh3LWKJ3CcfPkVVnxy4uUsaXhgFMU1X7CA5Ym7wS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0xb219bf31e236fe6c2968ecf0f6c3eb24cb6774aaf4fcc83252e9b06bba718f33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c09b0ffff8630ba6a86cdcd17f1ac65f8ba4e5b296e0320d945943e156fdf839\",\"dweb:/ipfs/QmPkBBJBYyYg1xxM4wRKdEpGK3b1beYeKoM6THzYb3qjM7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x15799c1552fa7aad4c1a7197451cd02422a6c768b236ab2904e72f7158a4a2c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c62bb88c0c43ad162c8c226aede16a75c352738aaaf6794fa0c2881dcf59ad42\",\"dweb:/ipfs/QmeWQdFDvzbN8JrCRSRRnZEuw5EbWVzRLM2duhJ515QUXK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d\",\"dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06\",\"dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb37442187735f9a8d6e18d736a5418b1ef6cf8c811fa694d6605ba27a0b9268e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23d7b247a89335a222271af46a62e139aaaa96ba8f74efb03a2bf20d3437e69b\",\"dweb:/ipfs/QmcBn8zmLuDhZDsNydLhx3oJ1vYri2vQKWdDF4KQn2oFi6\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x85b2cae18114b9253080a6f237eb10b5bd47b696ea4ac6f2c6fde17ab09758e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c1324d63067436949c181c27b9fff9f29b4ec4ae142d57a6a8b6eeee481c548\",\"dweb:/ipfs/QmVBdQZEa6icdz4wabr3LDD7BifebmjnvtBDZTGSy2EMds\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1\",\"dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7\"]},\"PureSuperToken.sol\":{\"keccak256\":\"0x9f97ffdff3cb0cbc193d79f7e867873f75d51d3d8e5e78c1455fe5a2954f9053\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://3d4ff79dae62f26f719cf7285546ca7c62fe987d4e03b357d7dbcd8f58509001\",\"dweb:/ipfs/QmPQjFiWWBBbpvFerYRLKrVvd5pMrybjPxFm1QEqnJwBKe\"]},\"base/SuperTokenBase.sol\":{\"keccak256\":\"0x20ad0c53399cd71f9e2af49c7f2f99a423bacdf7da4c64dfa65e5aca40dac571\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://1c6ab8fe1ae02242871cf5d805fbd8b753f5a1df9515658802cdea7b44c3914c\",\"dweb:/ipfs/QmfWFs8zVLnpDMZBRQTTLgmT9VdSmEchZhR2SoAzrdygzq\"]},\"base/SuperTokenStorage.sol\":{\"keccak256\":\"0x8e08c8b78f0e7fbdbcd378bf2fa2d518deba7d9591d20a9457571fceb9f95687\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://5f0323df5e91e7fafd940ea9a8f808c61b5cd6f30974d6d071b25b350ce1ef26\",\"dweb:/ipfs/Qmd5qFWZsW8NGuswNJW3dLkiktNu1MymbZ26VjVRypy3A8\"]},\"base/UUPSProxy.sol\":{\"keccak256\":\"0xd3e51b5fc04238364c4ed9068e31e88bd44e20546089e4fb76422ea1c2eac1ca\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://041548f8c5c4bf62fcf02677272196f953f320774ff784a7a93351e4c45956aa\",\"dweb:/ipfs/QmPvKxXbCFrWcHnwbTbSdEa96j4No8DHeuzXG1ftKPHwf1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1975,
								"contract": "PureSuperToken.sol:PureSuperToken",
								"label": "_storagePaddings",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_uint256)32_storage"
							}
						],
						"types": {
							"t_array(t_uint256)32_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[32]",
								"numberOfBytes": "1024"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Initialized()": [
								{
									"notice": "Thrown when the logic contract has been set"
								}
							],
							"ZeroAddress()": [
								{
									"notice": "Thrown when the logic contract address is zero"
								}
							]
						},
						"kind": "user",
						"methods": {
							"initializeProxy(address)": {
								"notice": "Stores the logic contract address only once."
							}
						},
						"notice": "Pre-minted supply. This is includes no custom logic. Used in `PureSuperTokenDeployer`",
						"version": 1
					}
				}
			},
			"base/SuperTokenBase.sol": {
				"SuperTokenBase": {
					"abi": [
						{
							"inputs": [],
							"name": "Initialized",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddress",
							"type": "error"
						},
						{
							"stateMutability": "payable",
							"type": "fallback"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialAddress",
									"type": "address"
								}
							],
							"name": "initializeProxy",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "jtriley.eth",
						"details": "The initial supply may be zero, in the event the token is mintable. Inheriting contracts MUST have an initializer calling this function!",
						"kind": "dev",
						"methods": {
							"initializeProxy(address)": {
								"details": "Called by the SuperTokenFactory contract on upgrade",
								"params": {
									"initialAddress": "logic contract address"
								}
							}
						},
						"title": "Abstract contract containing a thin layer of abstraction for aux logic.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"initializeProxy(address)": "4a0687ef"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAddress\",\"type\":\"address\"}],\"name\":\"initializeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"jtriley.eth\",\"details\":\"The initial supply may be zero, in the event the token is mintable. Inheriting contracts MUST have an initializer calling this function!\",\"kind\":\"dev\",\"methods\":{\"initializeProxy(address)\":{\"details\":\"Called by the SuperTokenFactory contract on upgrade\",\"params\":{\"initialAddress\":\"logic contract address\"}}},\"title\":\"Abstract contract containing a thin layer of abstraction for aux logic.\",\"version\":1},\"userdoc\":{\"errors\":{\"Initialized()\":[{\"notice\":\"Thrown when the logic contract has been set\"}],\"ZeroAddress()\":[{\"notice\":\"Thrown when the logic contract address is zero\"}]},\"kind\":\"user\",\"methods\":{\"initializeProxy(address)\":{\"notice\":\"Stores the logic contract address only once.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"base/SuperTokenBase.sol\":\"SuperTokenBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac\",\"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol\":{\"keccak256\":\"0x114cbccfd652231eb5454ab9c4cfe0d3a7427943dee0cce72d88160f12ed8505\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0837cc47bcd635ab470e336e9448fc1160531220aa8a1d55cea39bbee43af6ab\",\"dweb:/ipfs/QmbpaZcVmSsCeoE3j494TmbWzFriKgUR4TsTK5BwjvxRCw\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol\":{\"keccak256\":\"0x5a52452b00db96398759f1a2017ed8d76390730cb16a0d3e143b1fc7c5b99bed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f3a7c1f327fde03f63058d196f48472f69c0314e77214c6d3661f4b1b85ff99\",\"dweb:/ipfs/Qmf8mJJnPqDPqmDKiofqEhrDFwo9d4zWt5NsToqSH5F6mL\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol\":{\"keccak256\":\"0x1e5604256c5dd52f969b46feea0d708bde11c1a481bf7c50e33c67fd5dbf4262\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6c7c6c57094abc70ef32b2844b9df403e2c0ca7cee57a90f87038f2f071f7683\",\"dweb:/ipfs/QmSfBSuh3LWKJ3CcfPkVVnxy4uUsaXhgFMU1X7CA5Ym7wS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0xb219bf31e236fe6c2968ecf0f6c3eb24cb6774aaf4fcc83252e9b06bba718f33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c09b0ffff8630ba6a86cdcd17f1ac65f8ba4e5b296e0320d945943e156fdf839\",\"dweb:/ipfs/QmPkBBJBYyYg1xxM4wRKdEpGK3b1beYeKoM6THzYb3qjM7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x15799c1552fa7aad4c1a7197451cd02422a6c768b236ab2904e72f7158a4a2c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c62bb88c0c43ad162c8c226aede16a75c352738aaaf6794fa0c2881dcf59ad42\",\"dweb:/ipfs/QmeWQdFDvzbN8JrCRSRRnZEuw5EbWVzRLM2duhJ515QUXK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d\",\"dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06\",\"dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb37442187735f9a8d6e18d736a5418b1ef6cf8c811fa694d6605ba27a0b9268e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23d7b247a89335a222271af46a62e139aaaa96ba8f74efb03a2bf20d3437e69b\",\"dweb:/ipfs/QmcBn8zmLuDhZDsNydLhx3oJ1vYri2vQKWdDF4KQn2oFi6\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x85b2cae18114b9253080a6f237eb10b5bd47b696ea4ac6f2c6fde17ab09758e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c1324d63067436949c181c27b9fff9f29b4ec4ae142d57a6a8b6eeee481c548\",\"dweb:/ipfs/QmVBdQZEa6icdz4wabr3LDD7BifebmjnvtBDZTGSy2EMds\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1\",\"dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7\"]},\"base/SuperTokenBase.sol\":{\"keccak256\":\"0x20ad0c53399cd71f9e2af49c7f2f99a423bacdf7da4c64dfa65e5aca40dac571\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://1c6ab8fe1ae02242871cf5d805fbd8b753f5a1df9515658802cdea7b44c3914c\",\"dweb:/ipfs/QmfWFs8zVLnpDMZBRQTTLgmT9VdSmEchZhR2SoAzrdygzq\"]},\"base/SuperTokenStorage.sol\":{\"keccak256\":\"0x8e08c8b78f0e7fbdbcd378bf2fa2d518deba7d9591d20a9457571fceb9f95687\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://5f0323df5e91e7fafd940ea9a8f808c61b5cd6f30974d6d071b25b350ce1ef26\",\"dweb:/ipfs/Qmd5qFWZsW8NGuswNJW3dLkiktNu1MymbZ26VjVRypy3A8\"]},\"base/UUPSProxy.sol\":{\"keccak256\":\"0xd3e51b5fc04238364c4ed9068e31e88bd44e20546089e4fb76422ea1c2eac1ca\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://041548f8c5c4bf62fcf02677272196f953f320774ff784a7a93351e4c45956aa\",\"dweb:/ipfs/QmPvKxXbCFrWcHnwbTbSdEa96j4No8DHeuzXG1ftKPHwf1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1975,
								"contract": "base/SuperTokenBase.sol:SuperTokenBase",
								"label": "_storagePaddings",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_uint256)32_storage"
							}
						],
						"types": {
							"t_array(t_uint256)32_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[32]",
								"numberOfBytes": "1024"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Initialized()": [
								{
									"notice": "Thrown when the logic contract has been set"
								}
							],
							"ZeroAddress()": [
								{
									"notice": "Thrown when the logic contract address is zero"
								}
							]
						},
						"kind": "user",
						"methods": {
							"initializeProxy(address)": {
								"notice": "Stores the logic contract address only once."
							}
						},
						"version": 1
					}
				}
			},
			"base/SuperTokenStorage.sol": {
				"SuperTokenStorage": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"details": "MUST be the FIRST contract inherited to pad the first 32 slots. The slots are padded to ensure the implementation contract (SuperToken.sol) does not override any auxiliary state variables. For more info see `./docs/StorageLayout.md`.",
						"kind": "dev",
						"methods": {},
						"title": "Abstract Storage Contract to pad the first 32 slots of storage",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"MUST be the FIRST contract inherited to pad the first 32 slots. The slots are padded to ensure the implementation contract (SuperToken.sol) does not override any auxiliary state variables. For more info see `./docs/StorageLayout.md`.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Abstract Storage Contract to pad the first 32 slots of storage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"base/SuperTokenStorage.sol\":\"SuperTokenStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"base/SuperTokenStorage.sol\":{\"keccak256\":\"0x8e08c8b78f0e7fbdbcd378bf2fa2d518deba7d9591d20a9457571fceb9f95687\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://5f0323df5e91e7fafd940ea9a8f808c61b5cd6f30974d6d071b25b350ce1ef26\",\"dweb:/ipfs/Qmd5qFWZsW8NGuswNJW3dLkiktNu1MymbZ26VjVRypy3A8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1975,
								"contract": "base/SuperTokenStorage.sol:SuperTokenStorage",
								"label": "_storagePaddings",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_uint256)32_storage"
							}
						],
						"types": {
							"t_array(t_uint256)32_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[32]",
								"numberOfBytes": "1024"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"base/UUPSProxy.sol": {
				"UUPSProxy": {
					"abi": [
						{
							"inputs": [],
							"name": "Initialized",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddress",
							"type": "error"
						},
						{
							"stateMutability": "payable",
							"type": "fallback"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialAddress",
									"type": "address"
								}
							],
							"name": "initializeProxy",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "jtriley.eth",
						"details": "`initializeProxy(address)` is called by the Super Token Factory The call to the factory should be in the same transaction to avoid being front run",
						"kind": "dev",
						"methods": {
							"initializeProxy(address)": {
								"details": "Called by the SuperTokenFactory contract on upgrade",
								"params": {
									"initialAddress": "logic contract address"
								}
							}
						},
						"title": "UUPS Proxy implementation contract",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"base/UUPSProxy.sol\":434:1549  contract UUPSProxy is Proxy {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"base/UUPSProxy.sol\":434:1549  contract UUPSProxy is Proxy {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x4a0687ef\n      eq\n      tag_3\n      jumpi\n      jump(tag_2)\n    tag_1:\n    tag_2:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2649:2660  _fallback() */\n      tag_6\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2649:2658  _fallback */\n      tag_7\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2649:2660  _fallback() */\n      jump\t// in\n    tag_6:\n        /* \"base/UUPSProxy.sol\":434:1549  contract UUPSProxy is Proxy {... */\n      stop\n        /* \"base/UUPSProxy.sol\":1049:1295  function initializeProxy(address initialAddress) external {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_8:\n      pop\n      tag_9\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_10\n      swap2\n      swap1\n      tag_11\n      jump\t// in\n    tag_10:\n      tag_12\n      jump\t// in\n    tag_9:\n      stop\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2323:2406  function _fallback() internal virtual {... */\n    tag_7:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2371:2399  _delegate(_implementation()) */\n      tag_14\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2381:2398  _implementation() */\n      tag_15\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2381:2396  _implementation */\n      tag_16\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2381:2398  _implementation() */\n      jump\t// in\n    tag_15:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2371:2380  _delegate */\n      tag_17\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2371:2399  _delegate(_implementation()) */\n      jump\t// in\n    tag_14:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":2323:2406  function _fallback() internal virtual {... */\n      jump\t// out\n        /* \"base/UUPSProxy.sol\":1049:1295  function initializeProxy(address initialAddress) external {... */\n    tag_12:\n        /* \"base/UUPSProxy.sol\":1141:1142  0 */\n      0x00\n        /* \"base/UUPSProxy.sol\":1115:1143  initialAddress == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"base/UUPSProxy.sol\":1115:1129  initialAddress */\n      dup2\n        /* \"base/UUPSProxy.sol\":1115:1143  initialAddress == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"base/UUPSProxy.sol\":1111:1165  if (initialAddress == address(0)) revert ZeroAddress() */\n      tag_19\n      jumpi\n        /* \"base/UUPSProxy.sol\":1152:1165  ZeroAddress() */\n      mload(0x40)\n      0xd92e233d00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"base/UUPSProxy.sol\":1111:1165  if (initialAddress == address(0)) revert ZeroAddress() */\n    tag_19:\n        /* \"base/UUPSProxy.sol\":1202:1203  0 */\n      0x00\n        /* \"base/UUPSProxy.sol\":1173:1204  _implementation() != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"base/UUPSProxy.sol\":1173:1190  _implementation() */\n      tag_20\n        /* \"base/UUPSProxy.sol\":1173:1188  _implementation */\n      tag_16\n        /* \"base/UUPSProxy.sol\":1173:1190  _implementation() */\n      jump\t// in\n    tag_20:\n        /* \"base/UUPSProxy.sol\":1173:1204  _implementation() != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"base/UUPSProxy.sol\":1169:1226  if (_implementation() != address(0)) revert Initialized() */\n      tag_21\n      jumpi\n        /* \"base/UUPSProxy.sol\":1213:1226  Initialized() */\n      mload(0x40)\n      0x5daa87a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"base/UUPSProxy.sol\":1169:1226  if (_implementation() != address(0)) revert Initialized() */\n    tag_21:\n        /* \"base/UUPSProxy.sol\":1273:1287  initialAddress */\n      dup1\n        /* \"base/UUPSProxy.sol\":1251:1271  _IMPLEMENTATION_SLOT */\n      0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n        /* \"base/UUPSProxy.sol\":1244:1288  sstore(_IMPLEMENTATION_SLOT, initialAddress) */\n      sstore\n        /* \"base/UUPSProxy.sol\":1049:1295  function initializeProxy(address initialAddress) external {... */\n      pop\n      jump\t// out\n        /* \"base/UUPSProxy.sol\":1395:1547  function _implementation()... */\n    tag_16:\n        /* \"base/UUPSProxy.sol\":1472:1484  address impl */\n      0x00\n        /* \"base/UUPSProxy.sol\":1519:1539  _IMPLEMENTATION_SLOT */\n      0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n        /* \"base/UUPSProxy.sol\":1513:1540  sload(_IMPLEMENTATION_SLOT) */\n      sload\n        /* \"base/UUPSProxy.sol\":1505:1540  impl := sload(_IMPLEMENTATION_SLOT) */\n      swap1\n      pop\n        /* \"base/UUPSProxy.sol\":1395:1547  function _implementation()... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":949:1844  function _delegate(address implementation) internal virtual {... */\n    tag_17:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1287:1301  calldatasize() */\n      calldatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1284:1285  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1281:1282  0 */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1268:1302  calldatacopy(0, 0, calldatasize()) */\n      calldatacopy\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1501:1502  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1498:1499  0 */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1482:1496  calldatasize() */\n      calldatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1479:1480  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1463:1477  implementation */\n      dup5\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1456:1461  gas() */\n      gas\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1443:1503  delegatecall(gas(), implementation, 0, calldatasize(), 0, 0) */\n      delegatecall\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1577:1593  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1574:1575  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1571:1572  0 */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1556:1594  returndatacopy(0, 0, returndatasize()) */\n      returndatacopy\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1615:1621  result */\n      dup1\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1687:1688  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1682:1748  case 0 {... */\n      dup2\n      eq\n      tag_25\n      jumpi\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1797:1813  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1794:1795  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1787:1814  return(0, returndatasize()) */\n      return\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1682:1748  case 0 {... */\n    tag_25:\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1717:1733  returndatasize() */\n      returndatasize\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1714:1715  0 */\n      0x00\n        /* \"@openzeppelin/contracts/proxy/Proxy.sol\":1707:1734  revert(0, returndatasize()) */\n      revert\n        /* \"#utility.yul\":88:205   */\n    tag_27:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_29:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_30:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_39\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_29\n      jump\t// in\n    tag_39:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_31:\n        /* \"#utility.yul\":641:665   */\n      tag_41\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_30\n      jump\t// in\n    tag_41:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_42\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_42:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_32:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_44\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_31\n      jump\t// in\n    tag_44:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:1170   */\n    tag_11:\n        /* \"#utility.yul\":900:906   */\n      0x00\n        /* \"#utility.yul\":949:951   */\n      0x20\n        /* \"#utility.yul\":937:946   */\n      dup3\n        /* \"#utility.yul\":928:935   */\n      dup5\n        /* \"#utility.yul\":924:947   */\n      sub\n        /* \"#utility.yul\":920:952   */\n      slt\n        /* \"#utility.yul\":917:1036   */\n      iszero\n      tag_46\n      jumpi\n        /* \"#utility.yul\":955:1034   */\n      tag_47\n      tag_27\n      jump\t// in\n    tag_47:\n        /* \"#utility.yul\":917:1036   */\n    tag_46:\n        /* \"#utility.yul\":1075:1076   */\n      0x00\n        /* \"#utility.yul\":1100:1153   */\n      tag_48\n        /* \"#utility.yul\":1145:1152   */\n      dup5\n        /* \"#utility.yul\":1136:1142   */\n      dup3\n        /* \"#utility.yul\":1125:1134   */\n      dup6\n        /* \"#utility.yul\":1121:1143   */\n      add\n        /* \"#utility.yul\":1100:1153   */\n      tag_32\n      jump\t// in\n    tag_48:\n        /* \"#utility.yul\":1090:1153   */\n      swap2\n      pop\n        /* \"#utility.yul\":1046:1163   */\n      pop\n        /* \"#utility.yul\":841:1170   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122008fe84e2657ad6bbb87e5868cda20c6c9cee6319eb5a2cff0c480f5d4cd44e9b64736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506102638061001d5f395ff3fe608060405260043610610021575f3560e01c80634a0687ef1461002c57610022565b5b61002a610054565b005b348015610037575f80fd5b50610052600480360381019061004d9190610202565b610066565b005b61006461005f61015d565b610185565b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100cb576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff166100ea61015d565b73ffffffffffffffffffffffffffffffffffffffff1614610137576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550565b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54905090565b365f80375f80365f845af43d5f803e805f81146101a0573d5ff35b3d5ffd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101d1826101a8565b9050919050565b6101e1816101c7565b81146101eb575f80fd5b50565b5f813590506101fc816101d8565b92915050565b5f60208284031215610217576102166101a4565b5b5f610224848285016101ee565b9150509291505056fea264697066735822122008fe84e2657ad6bbb87e5868cda20c6c9cee6319eb5a2cff0c480f5d4cd44e9b64736f6c63430008160033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x263 DUP1 PUSH2 0x1D PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4A0687EF EQ PUSH2 0x2C JUMPI PUSH2 0x22 JUMP JUMPDEST JUMPDEST PUSH2 0x2A PUSH2 0x54 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x52 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D SWAP2 SWAP1 PUSH2 0x202 JUMP JUMPDEST PUSH2 0x66 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x5F PUSH2 0x15D JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCB JUMPI PUSH1 0x40 MLOAD PUSH32 0xD92E233D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEA PUSH2 0x15D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x137 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5DAA87A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SSTORE POP JUMP JUMPDEST PUSH0 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH0 DUP1 CALLDATACOPY PUSH0 DUP1 CALLDATASIZE PUSH0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY DUP1 PUSH0 DUP2 EQ PUSH2 0x1A0 JUMPI RETURNDATASIZE PUSH0 RETURN JUMPDEST RETURNDATASIZE PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D1 DUP3 PUSH2 0x1A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E1 DUP2 PUSH2 0x1C7 JUMP JUMPDEST DUP2 EQ PUSH2 0x1EB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FC DUP2 PUSH2 0x1D8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x217 JUMPI PUSH2 0x216 PUSH2 0x1A4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x224 DUP5 DUP3 DUP6 ADD PUSH2 0x1EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD INVALID DUP5 0xE2 PUSH6 0x7AD6BBB87E58 PUSH9 0xCDA20C6C9CEE6319EB GAS 0x2C SELFDESTRUCT 0xC BASEFEE 0xF 0x5D 0x4C 0xD4 0x4E SWAP12 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "434:1115:20:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_34": {
									"entryPoint": null,
									"id": 34,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_delegate_10": {
									"entryPoint": 389,
									"id": 10,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_fallback_26": {
									"entryPoint": 84,
									"id": 26,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_implementation_2031": {
									"entryPoint": 349,
									"id": 2031,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@initializeProxy_2022": {
									"entryPoint": 102,
									"id": 2022,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 494,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 514,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 455,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 424,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 420,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 472,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:1173:21",
										"nodeType": "YulBlock",
										"src": "0:1173:21",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:21",
													"nodeType": "YulBlock",
													"src": "47:35:21",
													"statements": [
														{
															"nativeSrc": "57:19:21",
															"nodeType": "YulAssignment",
															"src": "57:19:21",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:21",
																		"nodeType": "YulLiteral",
																		"src": "73:2:21",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:21"
																},
																"nativeSrc": "67:9:21",
																"nodeType": "YulFunctionCall",
																"src": "67:9:21"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:21"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:21",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:21",
														"nodeType": "YulTypedName",
														"src": "40:6:21",
														"type": ""
													}
												],
												"src": "7:75:21"
											},
											{
												"body": {
													"nativeSrc": "177:28:21",
													"nodeType": "YulBlock",
													"src": "177:28:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:21",
																		"nodeType": "YulLiteral",
																		"src": "194:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:21",
																		"nodeType": "YulLiteral",
																		"src": "197:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:21"
																},
																"nativeSrc": "187:12:21",
																"nodeType": "YulFunctionCall",
																"src": "187:12:21"
															},
															"nativeSrc": "187:12:21",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:21"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:21",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:21"
											},
											{
												"body": {
													"nativeSrc": "300:28:21",
													"nodeType": "YulBlock",
													"src": "300:28:21",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:21",
																		"nodeType": "YulLiteral",
																		"src": "317:1:21",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:21",
																		"nodeType": "YulLiteral",
																		"src": "320:1:21",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:21"
																},
																"nativeSrc": "310:12:21",
																"nodeType": "YulFunctionCall",
																"src": "310:12:21"
															},
															"nativeSrc": "310:12:21",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:21"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:21",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:21"
											},
											{
												"body": {
													"nativeSrc": "379:81:21",
													"nodeType": "YulBlock",
													"src": "379:81:21",
													"statements": [
														{
															"nativeSrc": "389:65:21",
															"nodeType": "YulAssignment",
															"src": "389:65:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:21",
																		"nodeType": "YulLiteral",
																		"src": "411:42:21",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:21"
																},
																"nativeSrc": "400:54:21",
																"nodeType": "YulFunctionCall",
																"src": "400:54:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:21",
														"nodeType": "YulTypedName",
														"src": "361:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:21",
														"nodeType": "YulTypedName",
														"src": "371:7:21",
														"type": ""
													}
												],
												"src": "334:126:21"
											},
											{
												"body": {
													"nativeSrc": "511:51:21",
													"nodeType": "YulBlock",
													"src": "511:51:21",
													"statements": [
														{
															"nativeSrc": "521:35:21",
															"nodeType": "YulAssignment",
															"src": "521:35:21",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:21"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:21",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:21"
																},
																"nativeSrc": "532:24:21",
																"nodeType": "YulFunctionCall",
																"src": "532:24:21"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:21",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:21"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:21",
														"nodeType": "YulTypedName",
														"src": "493:5:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:21",
														"nodeType": "YulTypedName",
														"src": "503:7:21",
														"type": ""
													}
												],
												"src": "466:96:21"
											},
											{
												"body": {
													"nativeSrc": "611:79:21",
													"nodeType": "YulBlock",
													"src": "611:79:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:21",
																"nodeType": "YulBlock",
																"src": "668:16:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:21",
																					"nodeType": "YulLiteral",
																					"src": "677:1:21",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:21",
																					"nodeType": "YulLiteral",
																					"src": "680:1:21",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:21",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:21"
																			},
																			"nativeSrc": "670:12:21",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:21"
																		},
																		"nativeSrc": "670:12:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:21",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:21"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:21",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:21"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:21",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:21"
																				},
																				"nativeSrc": "641:24:21",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:21"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:21",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:21"
																		},
																		"nativeSrc": "631:35:21",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:21"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:21",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:21"
																},
																"nativeSrc": "624:43:21",
																"nodeType": "YulFunctionCall",
																"src": "624:43:21"
															},
															"nativeSrc": "621:63:21",
															"nodeType": "YulIf",
															"src": "621:63:21"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:21",
														"nodeType": "YulTypedName",
														"src": "604:5:21",
														"type": ""
													}
												],
												"src": "568:122:21"
											},
											{
												"body": {
													"nativeSrc": "748:87:21",
													"nodeType": "YulBlock",
													"src": "748:87:21",
													"statements": [
														{
															"nativeSrc": "758:29:21",
															"nodeType": "YulAssignment",
															"src": "758:29:21",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "780:6:21",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:21"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "767:12:21",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:21"
																},
																"nativeSrc": "767:20:21",
																"nodeType": "YulFunctionCall",
																"src": "767:20:21"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "758:5:21",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:21"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "823:5:21",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:21"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "796:26:21",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:21"
																},
																"nativeSrc": "796:33:21",
																"nodeType": "YulFunctionCall",
																"src": "796:33:21"
															},
															"nativeSrc": "796:33:21",
															"nodeType": "YulExpressionStatement",
															"src": "796:33:21"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "696:139:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "726:6:21",
														"nodeType": "YulTypedName",
														"src": "726:6:21",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "734:3:21",
														"nodeType": "YulTypedName",
														"src": "734:3:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "742:5:21",
														"nodeType": "YulTypedName",
														"src": "742:5:21",
														"type": ""
													}
												],
												"src": "696:139:21"
											},
											{
												"body": {
													"nativeSrc": "907:263:21",
													"nodeType": "YulBlock",
													"src": "907:263:21",
													"statements": [
														{
															"body": {
																"nativeSrc": "953:83:21",
																"nodeType": "YulBlock",
																"src": "953:83:21",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "955:77:21",
																				"nodeType": "YulIdentifier",
																				"src": "955:77:21"
																			},
																			"nativeSrc": "955:79:21",
																			"nodeType": "YulFunctionCall",
																			"src": "955:79:21"
																		},
																		"nativeSrc": "955:79:21",
																		"nodeType": "YulExpressionStatement",
																		"src": "955:79:21"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "928:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "928:7:21"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "937:9:21",
																				"nodeType": "YulIdentifier",
																				"src": "937:9:21"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "924:3:21",
																			"nodeType": "YulIdentifier",
																			"src": "924:3:21"
																		},
																		"nativeSrc": "924:23:21",
																		"nodeType": "YulFunctionCall",
																		"src": "924:23:21"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "949:2:21",
																		"nodeType": "YulLiteral",
																		"src": "949:2:21",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "920:3:21",
																	"nodeType": "YulIdentifier",
																	"src": "920:3:21"
																},
																"nativeSrc": "920:32:21",
																"nodeType": "YulFunctionCall",
																"src": "920:32:21"
															},
															"nativeSrc": "917:119:21",
															"nodeType": "YulIf",
															"src": "917:119:21"
														},
														{
															"nativeSrc": "1046:117:21",
															"nodeType": "YulBlock",
															"src": "1046:117:21",
															"statements": [
																{
																	"nativeSrc": "1061:15:21",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1061:15:21",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1075:1:21",
																		"nodeType": "YulLiteral",
																		"src": "1075:1:21",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1065:6:21",
																			"nodeType": "YulTypedName",
																			"src": "1065:6:21",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1090:63:21",
																	"nodeType": "YulAssignment",
																	"src": "1090:63:21",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1125:9:21",
																						"nodeType": "YulIdentifier",
																						"src": "1125:9:21"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1136:6:21",
																						"nodeType": "YulIdentifier",
																						"src": "1136:6:21"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1121:3:21",
																					"nodeType": "YulIdentifier",
																					"src": "1121:3:21"
																				},
																				"nativeSrc": "1121:22:21",
																				"nodeType": "YulFunctionCall",
																				"src": "1121:22:21"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1145:7:21",
																				"nodeType": "YulIdentifier",
																				"src": "1145:7:21"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "1100:20:21",
																			"nodeType": "YulIdentifier",
																			"src": "1100:20:21"
																		},
																		"nativeSrc": "1100:53:21",
																		"nodeType": "YulFunctionCall",
																		"src": "1100:53:21"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1090:6:21",
																			"nodeType": "YulIdentifier",
																			"src": "1090:6:21"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "841:329:21",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "877:9:21",
														"nodeType": "YulTypedName",
														"src": "877:9:21",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "888:7:21",
														"nodeType": "YulTypedName",
														"src": "888:7:21",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "900:6:21",
														"nodeType": "YulTypedName",
														"src": "900:6:21",
														"type": ""
													}
												],
												"src": "841:329:21"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 21,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405260043610610021575f3560e01c80634a0687ef1461002c57610022565b5b61002a610054565b005b348015610037575f80fd5b50610052600480360381019061004d9190610202565b610066565b005b61006461005f61015d565b610185565b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100cb576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff166100ea61015d565b73ffffffffffffffffffffffffffffffffffffffff1614610137576040517f5daa87a000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550565b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54905090565b365f80375f80365f845af43d5f803e805f81146101a0573d5ff35b3d5ffd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101d1826101a8565b9050919050565b6101e1816101c7565b81146101eb575f80fd5b50565b5f813590506101fc816101d8565b92915050565b5f60208284031215610217576102166101a4565b5b5f610224848285016101ee565b9150509291505056fea264697066735822122008fe84e2657ad6bbb87e5868cda20c6c9cee6319eb5a2cff0c480f5d4cd44e9b64736f6c63430008160033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4A0687EF EQ PUSH2 0x2C JUMPI PUSH2 0x22 JUMP JUMPDEST JUMPDEST PUSH2 0x2A PUSH2 0x54 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x52 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4D SWAP2 SWAP1 PUSH2 0x202 JUMP JUMPDEST PUSH2 0x66 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x64 PUSH2 0x5F PUSH2 0x15D JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCB JUMPI PUSH1 0x40 MLOAD PUSH32 0xD92E233D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEA PUSH2 0x15D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x137 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5DAA87A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SSTORE POP JUMP JUMPDEST PUSH0 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH0 DUP1 CALLDATACOPY PUSH0 DUP1 CALLDATASIZE PUSH0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY DUP1 PUSH0 DUP2 EQ PUSH2 0x1A0 JUMPI RETURNDATASIZE PUSH0 RETURN JUMPDEST RETURNDATASIZE PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D1 DUP3 PUSH2 0x1A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E1 DUP2 PUSH2 0x1C7 JUMP JUMPDEST DUP2 EQ PUSH2 0x1EB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FC DUP2 PUSH2 0x1D8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x217 JUMPI PUSH2 0x216 PUSH2 0x1A4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x224 DUP5 DUP3 DUP6 ADD PUSH2 0x1EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD INVALID DUP5 0xE2 PUSH6 0x7AD6BBB87E58 PUSH9 0xCDA20C6C9CEE6319EB GAS 0x2C SELFDESTRUCT 0xC BASEFEE 0xF 0x5D 0x4C 0xD4 0x4E SWAP12 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "434:1115:20:-:0;;;;;;;;;;;;;;;;;;;;;2649:11:0;:9;:11::i;:::-;434:1115:20;1049:246;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2323:83:0;2371:28;2381:17;:15;:17::i;:::-;2371:9;:28::i;:::-;2323:83::o;1049:246:20:-;1141:1;1115:28;;:14;:28;;;1111:54;;1152:13;;;;;;;;;;;;;;1111:54;1202:1;1173:31;;:17;:15;:17::i;:::-;:31;;;1169:57;;1213:13;;;;;;;;;;;;;;1169:57;1273:14;1251:20;1244:44;1049:246;:::o;1395:152::-;1472:12;1519:20;1513:27;1505:35;;1395:152;:::o;949:895:0:-;1287:14;1284:1;1281;1268:34;1501:1;1498;1482:14;1479:1;1463:14;1456:5;1443:60;1577:16;1574:1;1571;1556:38;1615:6;1687:1;1682:66;;;;1797:16;1794:1;1787:27;1682:66;1717:16;1714:1;1707:27;88:117:21;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "122200",
								"executionCost": "169",
								"totalCost": "122369"
							},
							"external": {
								"": "infinite",
								"initializeProxy(address)": "24735"
							},
							"internal": {
								"_implementation()": "2122"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 434,
									"end": 1549,
									"name": "PUSH",
									"source": 20,
									"value": "80"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "CALLVALUE",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "tag",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "PUSH #[$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "PUSH [$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "CODECOPY",
									"source": 20
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 434,
									"end": 1549,
									"name": "RETURN",
									"source": 20
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122008fe84e2657ad6bbb87e5868cda20c6c9cee6319eb5a2cff0c480f5d4cd44e9b64736f6c63430008160033",
									".code": [
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "SHR",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH",
											"source": 20,
											"value": "4A0687EF"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "3"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "2"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "tag",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "tag",
											"source": 20,
											"value": "2"
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2649,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 2649,
											"end": 2658,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2649,
											"end": 2660,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2649,
											"end": 2660,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 2649,
											"end": 2660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 434,
											"end": 1549,
											"name": "STOP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "3"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "CALLVALUE",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "8"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "8"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "9"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "CALLDATASIZE",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "10"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 1049,
											"end": 1295,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "10"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 1049,
											"end": 1295,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "9"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "STOP",
											"source": 20
										},
										{
											"begin": 2323,
											"end": 2406,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 2323,
											"end": 2406,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2371,
											"end": 2399,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2381,
											"end": 2396,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2381,
											"end": 2398,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 2381,
											"end": 2398,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2371,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2371,
											"end": 2399,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2371,
											"end": 2399,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 2371,
											"end": 2399,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2406,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "tag",
											"source": 20,
											"value": "12"
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1141,
											"end": 1142,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1115,
											"end": 1129,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1115,
											"end": 1143,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1111,
											"end": 1165,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "19"
										},
										{
											"begin": 1111,
											"end": 1165,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "PUSH",
											"source": 20,
											"value": "D92E233D00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1152,
											"end": 1165,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1111,
											"end": 1165,
											"name": "tag",
											"source": 20,
											"value": "19"
										},
										{
											"begin": 1111,
											"end": 1165,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1202,
											"end": 1203,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1190,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1173,
											"end": 1188,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "16"
										},
										{
											"begin": 1173,
											"end": 1190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1190,
											"name": "tag",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1173,
											"end": 1190,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1173,
											"end": 1204,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 1169,
											"end": 1226,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "21"
										},
										{
											"begin": 1169,
											"end": 1226,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "PUSH",
											"source": 20,
											"value": "5DAA87A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1213,
											"end": 1226,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1169,
											"end": 1226,
											"name": "tag",
											"source": 20,
											"value": "21"
										},
										{
											"begin": 1169,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1273,
											"end": 1287,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1251,
											"end": 1271,
											"name": "PUSH",
											"source": 20,
											"value": "360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC"
										},
										{
											"begin": 1244,
											"end": 1288,
											"name": "SSTORE",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1049,
											"end": 1295,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1395,
											"end": 1547,
											"name": "tag",
											"source": 20,
											"value": "16"
										},
										{
											"begin": 1395,
											"end": 1547,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1472,
											"end": 1484,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1519,
											"end": 1539,
											"name": "PUSH",
											"source": 20,
											"value": "360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC"
										},
										{
											"begin": 1513,
											"end": 1540,
											"name": "SLOAD",
											"source": 20
										},
										{
											"begin": 1505,
											"end": 1540,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1505,
											"end": 1540,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1395,
											"end": 1547,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1395,
											"end": 1547,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 949,
											"end": 1844,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 949,
											"end": 1844,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1287,
											"end": 1301,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1284,
											"end": 1285,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1281,
											"end": 1282,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1268,
											"end": 1302,
											"name": "CALLDATACOPY",
											"source": 0
										},
										{
											"begin": 1501,
											"end": 1502,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1498,
											"end": 1499,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1482,
											"end": 1496,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1479,
											"end": 1480,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1463,
											"end": 1477,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1456,
											"end": 1461,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 1443,
											"end": 1503,
											"name": "DELEGATECALL",
											"source": 0
										},
										{
											"begin": 1577,
											"end": 1593,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1574,
											"end": 1575,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1571,
											"end": 1572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1556,
											"end": 1594,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1615,
											"end": 1621,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1687,
											"end": 1688,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1797,
											"end": 1813,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1794,
											"end": 1795,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1787,
											"end": 1814,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1682,
											"end": 1748,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1717,
											"end": 1733,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1714,
											"end": 1715,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 21,
											"value": "27"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 21,
											"value": "29"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 21,
											"value": "30"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "39"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "29"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 21,
											"value": "39"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 21,
											"value": "31"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "41"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "30"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 21,
											"value": "41"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "42"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 21,
											"value": "42"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 21,
											"value": "32"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "44"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "31"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 21,
											"value": "44"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "tag",
											"source": 21,
											"value": "11"
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 900,
											"end": 906,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 949,
											"end": 951,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 937,
											"end": 946,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 928,
											"end": 935,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 924,
											"end": 947,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 920,
											"end": 952,
											"name": "SLT",
											"source": 21
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "46"
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "47"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "27"
										},
										{
											"begin": 955,
											"end": 1034,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "tag",
											"source": 21,
											"value": "47"
										},
										{
											"begin": 955,
											"end": 1034,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "tag",
											"source": 21,
											"value": "46"
										},
										{
											"begin": 917,
											"end": 1036,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1075,
											"end": 1076,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "48"
										},
										{
											"begin": 1145,
											"end": 1152,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1125,
											"end": 1134,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 1121,
											"end": 1143,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "32"
										},
										{
											"begin": 1100,
											"end": 1153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "tag",
											"source": 21,
											"value": "48"
										},
										{
											"begin": 1100,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1090,
											"end": 1153,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1090,
											"end": 1153,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1046,
											"end": 1163,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 841,
											"end": 1170,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/proxy/Proxy.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"PureSuperToken.sol",
								"base/SuperTokenBase.sol",
								"base/SuperTokenStorage.sol",
								"base/UUPSProxy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"initializeProxy(address)": "4a0687ef"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Initialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAddress\",\"type\":\"address\"}],\"name\":\"initializeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"jtriley.eth\",\"details\":\"`initializeProxy(address)` is called by the Super Token Factory The call to the factory should be in the same transaction to avoid being front run\",\"kind\":\"dev\",\"methods\":{\"initializeProxy(address)\":{\"details\":\"Called by the SuperTokenFactory contract on upgrade\",\"params\":{\"initialAddress\":\"logic contract address\"}}},\"title\":\"UUPS Proxy implementation contract\",\"version\":1},\"userdoc\":{\"errors\":{\"Initialized()\":[{\"notice\":\"Thrown when the logic contract has been set\"}],\"ZeroAddress()\":[{\"notice\":\"Thrown when the logic contract address is zero\"}]},\"kind\":\"user\",\"methods\":{\"initializeProxy(address)\":{\"notice\":\"Stores the logic contract address only once.\"}},\"notice\":\"Stores the logic contract's address at the _IMPLEMENTATION_SLOT\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"base/UUPSProxy.sol\":\"UUPSProxy\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac\",\"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e\"]},\"base/UUPSProxy.sol\":{\"keccak256\":\"0xd3e51b5fc04238364c4ed9068e31e88bd44e20546089e4fb76422ea1c2eac1ca\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://041548f8c5c4bf62fcf02677272196f953f320774ff784a7a93351e4c45956aa\",\"dweb:/ipfs/QmPvKxXbCFrWcHnwbTbSdEa96j4No8DHeuzXG1ftKPHwf1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"Initialized()": [
								{
									"notice": "Thrown when the logic contract has been set"
								}
							],
							"ZeroAddress()": [
								{
									"notice": "Thrown when the logic contract address is zero"
								}
							]
						},
						"kind": "user",
						"methods": {
							"initializeProxy(address)": {
								"notice": "Stores the logic contract address only once."
							}
						},
						"notice": "Stores the logic contract's address at the _IMPLEMENTATION_SLOT",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "3628",
				"formattedMessage": "Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.\n  --> base/UUPSProxy.sol:12:1:\n   |\n12 | contract UUPSProxy is Proxy {\n   | ^ (Relevant source part starts here and spans across multiple lines).\nNote: The payable fallback function is defined here.\n  --> @openzeppelin/contracts/proxy/Proxy.sol:66:5:\n   |\n66 |     fallback() external payable virtual {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.",
				"secondarySourceLocations": [
					{
						"end": 2667,
						"file": "@openzeppelin/contracts/proxy/Proxy.sol",
						"message": "The payable fallback function is defined here.",
						"start": 2603
					}
				],
				"severity": "warning",
				"sourceLocation": {
					"end": 1549,
					"file": "base/UUPSProxy.sol",
					"start": 434
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "3628",
				"formattedMessage": "Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.\n  --> base/SuperTokenBase.sol:15:1:\n   |\n15 | abstract contract SuperTokenBase is SuperTokenStorage, UUPSProxy {\n   | ^ (Relevant source part starts here and spans across multiple lines).\nNote: The payable fallback function is defined here.\n  --> @openzeppelin/contracts/proxy/Proxy.sol:66:5:\n   |\n66 |     fallback() external payable virtual {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.",
				"secondarySourceLocations": [
					{
						"end": 2667,
						"file": "@openzeppelin/contracts/proxy/Proxy.sol",
						"message": "The payable fallback function is defined here.",
						"start": 2603
					}
				],
				"severity": "warning",
				"sourceLocation": {
					"end": 3058,
					"file": "base/SuperTokenBase.sol",
					"start": 750
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "3628",
				"formattedMessage": "Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.\n --> PureSuperToken.sol:9:1:\n  |\n9 | contract PureSuperToken is SuperTokenBase {\n  | ^ (Relevant source part starts here and spans across multiple lines).\nNote: The payable fallback function is defined here.\n  --> @openzeppelin/contracts/proxy/Proxy.sol:66:5:\n   |\n66 |     fallback() external payable virtual {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.",
				"secondarySourceLocations": [
					{
						"end": 2667,
						"file": "@openzeppelin/contracts/proxy/Proxy.sol",
						"message": "The payable fallback function is defined here.",
						"start": 2603
					}
				],
				"severity": "warning",
				"sourceLocation": {
					"end": 905,
					"file": "PureSuperToken.sol",
					"start": 277
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/proxy/Proxy.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/proxy/Proxy.sol",
					"exportedSymbols": {
						"Proxy": [
							35
						]
					},
					"id": 36,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "99:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Proxy",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "125:598:0",
								"text": " @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n be specified by overriding the virtual {_implementation} function.\n Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n different contract through the {_delegate} function.\n The success and return data of the delegated call will be returned back to the caller of the proxy."
							},
							"fullyImplemented": false,
							"id": 35,
							"linearizedBaseContracts": [
								35
							],
							"name": "Proxy",
							"nameLocation": "742:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 9,
										"nodeType": "Block",
										"src": "1009:835:0",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1028:810:0",
													"nodeType": "YulBlock",
													"src": "1028:810:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1281:1:0",
																		"nodeType": "YulLiteral",
																		"src": "1281:1:0",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1284:1:0",
																		"nodeType": "YulLiteral",
																		"src": "1284:1:0",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "calldatasize",
																			"nativeSrc": "1287:12:0",
																			"nodeType": "YulIdentifier",
																			"src": "1287:12:0"
																		},
																		"nativeSrc": "1287:14:0",
																		"nodeType": "YulFunctionCall",
																		"src": "1287:14:0"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nativeSrc": "1268:12:0",
																	"nodeType": "YulIdentifier",
																	"src": "1268:12:0"
																},
																"nativeSrc": "1268:34:0",
																"nodeType": "YulFunctionCall",
																"src": "1268:34:0"
															},
															"nativeSrc": "1268:34:0",
															"nodeType": "YulExpressionStatement",
															"src": "1268:34:0"
														},
														{
															"nativeSrc": "1429:74:0",
															"nodeType": "YulVariableDeclaration",
															"src": "1429:74:0",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "1456:3:0",
																			"nodeType": "YulIdentifier",
																			"src": "1456:3:0"
																		},
																		"nativeSrc": "1456:5:0",
																		"nodeType": "YulFunctionCall",
																		"src": "1456:5:0"
																	},
																	{
																		"name": "implementation",
																		"nativeSrc": "1463:14:0",
																		"nodeType": "YulIdentifier",
																		"src": "1463:14:0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1479:1:0",
																		"nodeType": "YulLiteral",
																		"src": "1479:1:0",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "calldatasize",
																			"nativeSrc": "1482:12:0",
																			"nodeType": "YulIdentifier",
																			"src": "1482:12:0"
																		},
																		"nativeSrc": "1482:14:0",
																		"nodeType": "YulFunctionCall",
																		"src": "1482:14:0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1498:1:0",
																		"nodeType": "YulLiteral",
																		"src": "1498:1:0",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1501:1:0",
																		"nodeType": "YulLiteral",
																		"src": "1501:1:0",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "delegatecall",
																	"nativeSrc": "1443:12:0",
																	"nodeType": "YulIdentifier",
																	"src": "1443:12:0"
																},
																"nativeSrc": "1443:60:0",
																"nodeType": "YulFunctionCall",
																"src": "1443:60:0"
															},
															"variables": [
																{
																	"name": "result",
																	"nativeSrc": "1433:6:0",
																	"nodeType": "YulTypedName",
																	"src": "1433:6:0",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1571:1:0",
																		"nodeType": "YulLiteral",
																		"src": "1571:1:0",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1574:1:0",
																		"nodeType": "YulLiteral",
																		"src": "1574:1:0",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "returndatasize",
																			"nativeSrc": "1577:14:0",
																			"nodeType": "YulIdentifier",
																			"src": "1577:14:0"
																		},
																		"nativeSrc": "1577:16:0",
																		"nodeType": "YulFunctionCall",
																		"src": "1577:16:0"
																	}
																],
																"functionName": {
																	"name": "returndatacopy",
																	"nativeSrc": "1556:14:0",
																	"nodeType": "YulIdentifier",
																	"src": "1556:14:0"
																},
																"nativeSrc": "1556:38:0",
																"nodeType": "YulFunctionCall",
																"src": "1556:38:0"
															},
															"nativeSrc": "1556:38:0",
															"nodeType": "YulExpressionStatement",
															"src": "1556:38:0"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "1689:59:0",
																		"nodeType": "YulBlock",
																		"src": "1689:59:0",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1714:1:0",
																							"nodeType": "YulLiteral",
																							"src": "1714:1:0",
																							"type": "",
																							"value": "0"
																						},
																						{
																							"arguments": [],
																							"functionName": {
																								"name": "returndatasize",
																								"nativeSrc": "1717:14:0",
																								"nodeType": "YulIdentifier",
																								"src": "1717:14:0"
																							},
																							"nativeSrc": "1717:16:0",
																							"nodeType": "YulFunctionCall",
																							"src": "1717:16:0"
																						}
																					],
																					"functionName": {
																						"name": "revert",
																						"nativeSrc": "1707:6:0",
																						"nodeType": "YulIdentifier",
																						"src": "1707:6:0"
																					},
																					"nativeSrc": "1707:27:0",
																					"nodeType": "YulFunctionCall",
																					"src": "1707:27:0"
																				},
																				"nativeSrc": "1707:27:0",
																				"nodeType": "YulExpressionStatement",
																				"src": "1707:27:0"
																			}
																		]
																	},
																	"nativeSrc": "1682:66:0",
																	"nodeType": "YulCase",
																	"src": "1682:66:0",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1687:1:0",
																		"nodeType": "YulLiteral",
																		"src": "1687:1:0",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "1769:59:0",
																		"nodeType": "YulBlock",
																		"src": "1769:59:0",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1794:1:0",
																							"nodeType": "YulLiteral",
																							"src": "1794:1:0",
																							"type": "",
																							"value": "0"
																						},
																						{
																							"arguments": [],
																							"functionName": {
																								"name": "returndatasize",
																								"nativeSrc": "1797:14:0",
																								"nodeType": "YulIdentifier",
																								"src": "1797:14:0"
																							},
																							"nativeSrc": "1797:16:0",
																							"nodeType": "YulFunctionCall",
																							"src": "1797:16:0"
																						}
																					],
																					"functionName": {
																						"name": "return",
																						"nativeSrc": "1787:6:0",
																						"nodeType": "YulIdentifier",
																						"src": "1787:6:0"
																					},
																					"nativeSrc": "1787:27:0",
																					"nodeType": "YulFunctionCall",
																					"src": "1787:27:0"
																				},
																				"nativeSrc": "1787:27:0",
																				"nodeType": "YulExpressionStatement",
																				"src": "1787:27:0"
																			}
																		]
																	},
																	"nativeSrc": "1761:67:0",
																	"nodeType": "YulCase",
																	"src": "1761:67:0",
																	"value": "default"
																}
															],
															"expression": {
																"name": "result",
																"nativeSrc": "1615:6:0",
																"nodeType": "YulIdentifier",
																"src": "1615:6:0"
															},
															"nativeSrc": "1608:220:0",
															"nodeType": "YulSwitch",
															"src": "1608:220:0"
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 5,
														"isOffset": false,
														"isSlot": false,
														"src": "1463:14:0",
														"valueSize": 1
													}
												],
												"id": 8,
												"nodeType": "InlineAssembly",
												"src": "1019:819:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "754:190:0",
										"text": " @dev Delegates the current call to `implementation`.\n This function does not return to its internal call site, it will return directly to the external caller."
									},
									"id": 10,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_delegate",
									"nameLocation": "958:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "implementation",
												"nameLocation": "976:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "968:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "968:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "967:24:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1009:0:0"
									},
									"scope": 35,
									"src": "949:895:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "1850:173:0",
										"text": " @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n function and {_fallback} should delegate."
									},
									"id": 16,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_implementation",
									"nameLocation": "2037:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2052:2:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "2086:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2086:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2085:9:0"
									},
									"scope": 35,
									"src": "2028:67:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "2361:45:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 21,
																"name": "_implementation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "2381:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 22,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2381:17:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 20,
														"name": "_delegate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2371:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2371:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "2371:28:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "2101:217:0",
										"text": " @dev Delegates the current call to the address returned by `_implementation()`.\n This function does not return to its internal call site, it will return directly to the external caller."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_fallback",
									"nameLocation": "2332:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2341:2:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2361:0:0"
									},
									"scope": 35,
									"src": "2323:83:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 33,
										"nodeType": "Block",
										"src": "2639:28:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 30,
														"name": "_fallback",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "2649:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 31,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2649:11:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 32,
												"nodeType": "ExpressionStatement",
												"src": "2649:11:0"
											}
										]
									},
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "2412:186:0",
										"text": " @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n function in the contract matches the call data."
									},
									"id": 34,
									"implemented": true,
									"kind": "fallback",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2611:2:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2639:0:0"
									},
									"scope": 35,
									"src": "2603:64:0",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 36,
							"src": "724:1945:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "99:2571:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						]
					},
					"id": 114,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 37,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 38,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 113,
							"linearizedBaseContracts": [
								113
							],
							"name": "IERC20",
							"nameLocation": "213:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 47,
									"name": "Transfer",
									"nameLocation": "395:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "404:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 40,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 43,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "426:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 42,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 45,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "446:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 44,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:1"
									},
									"src": "389:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 56,
									"name": "Approval",
									"nameLocation": "626:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "635:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 49,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 52,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "658:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 51,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 54,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "683:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 53,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:1"
									},
									"src": "620:78:1"
								},
								{
									"documentation": {
										"id": 57,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:1",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 62,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 59,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 113,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:1",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 70,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "930:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:1"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "970:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 67,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:1"
									},
									"scope": 113,
									"src": "911:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "1221:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "1233:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 74,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:1"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "1266:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 77,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:1"
									},
									"scope": 113,
									"src": "1203:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 90,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1566:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1581:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:1"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "1621:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 87,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:1"
									},
									"scope": 113,
									"src": "1547:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 100,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2325:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2342:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:1"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 98,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2375:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 97,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:1"
									},
									"scope": 113,
									"src": "2308:73:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 101,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2711:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2725:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 104,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2737:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:1"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2770:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 109,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:1"
									},
									"scope": 113,
									"src": "2689:87:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 114,
							"src": "203:2575:1",
							"usedErrors": [],
							"usedEvents": [
								47,
								56
							]
						}
					],
					"src": "106:2673:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						],
						"IERC20Metadata": [
							139
						]
					},
					"id": 140,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 115,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 117,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 140,
							"sourceUnit": 114,
							"src": "151:37:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 116,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 113,
										"src": "159:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 119,
										"name": "IERC20",
										"nameLocations": [
											"305:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 113,
										"src": "305:6:2"
									},
									"id": 120,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:2"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 139,
							"linearizedBaseContracts": [
								139,
								113
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:2"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "416:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 123,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:2"
									},
									"scope": 139,
									"src": "377:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:2"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "539:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 129,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:2"
									},
									"scope": 139,
									"src": "498:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:2"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "673:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 135,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:2"
									},
									"scope": 139,
									"src": "630:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 140,
							"src": "277:405:2",
							"usedErrors": [],
							"usedEvents": [
								47,
								56
							]
						}
					],
					"src": "125:558:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							459
						],
						"IERC721": [
							256
						]
					},
					"id": 257,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 141,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "108:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 143,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 257,
							"sourceUnit": 460,
							"src": "134:62:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 142,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 459,
										"src": "142:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 145,
										"name": "IERC165",
										"nameLocations": [
											"287:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 459,
										"src": "287:7:3"
									},
									"id": 146,
									"nodeType": "InheritanceSpecifier",
									"src": "287:7:3"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 144,
								"nodeType": "StructuredDocumentation",
								"src": "198:67:3",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 256,
							"linearizedBaseContracts": [
								256,
								459
							],
							"name": "IERC721",
							"nameLocation": "276:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "301:88:3",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 155,
									"name": "Transfer",
									"nameLocation": "400:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "425:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "409:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "409:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 151,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "447:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "431:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "431:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "467:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "451:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "451:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "408:67:3"
									},
									"src": "394:82:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 156,
										"nodeType": "StructuredDocumentation",
										"src": "482:94:3",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 164,
									"name": "Approval",
									"nameLocation": "587:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "612:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "596:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "635:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "619:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "661:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "645:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "595:74:3"
									},
									"src": "581:89:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "676:117:3",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 173,
									"name": "ApprovalForAll",
									"nameLocation": "804:14:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "835:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "819:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "858:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "842:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "842:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "873:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "868:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 170,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "868:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:64:3"
									},
									"src": "798:85:3"
								},
								{
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "889:76:3",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "979:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "997:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "989:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "989:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "988:15:3"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1035:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1027:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1027:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1026:17:3"
									},
									"scope": 256,
									"src": "970:74:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1050:131:3",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1195:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1211:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1203:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1203:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1202:17:3"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1251:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "1243:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1243:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1242:15:3"
									},
									"scope": 256,
									"src": "1186:72:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "1264:565:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1843:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1868:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "1860:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1860:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1882:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "1874:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1874:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "1886:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1918:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "1903:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 197,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1903:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1859:64:3"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1932:0:3"
									},
									"scope": 256,
									"src": "1834:99:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "1939:705:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2658:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2683:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2675:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2697:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2689:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2689:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2709:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2701:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2674:43:3"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2726:0:3"
									},
									"scope": 256,
									"src": "2649:78:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "2733:732:3",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 221,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3479:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3500:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "3492:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3492:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3514:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "3506:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3506:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3526:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "3518:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3518:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3491:43:3"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3543:0:3"
									},
									"scope": 256,
									"src": "3470:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "3550:452:3",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 229,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4016:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4032:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "4024:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 223,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4024:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4044:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "4036:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4036:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4023:29:3"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4061:0:3"
									},
									"scope": 256,
									"src": "4007:55:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 230,
										"nodeType": "StructuredDocumentation",
										"src": "4068:315:3",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4397:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4423:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "4415:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4415:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4438:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "4433:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 233,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4433:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4414:33:3"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4456:0:3"
									},
									"scope": 256,
									"src": "4388:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "4463:139:3",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 245,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4616:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4636:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "4628:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4628:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4627:17:3"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4676:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 245,
												"src": "4668:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4668:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4667:18:3"
									},
									"scope": 256,
									"src": "4607:79:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 246,
										"nodeType": "StructuredDocumentation",
										"src": "4692:138:3",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 255,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4844:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4869:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "4861:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4861:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4884:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "4876:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4860:33:3"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "4917:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 252,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4917:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4916:6:3"
									},
									"scope": 256,
									"src": "4835:88:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 257,
							"src": "266:4659:3",
							"usedErrors": [],
							"usedEvents": [
								155,
								164,
								173
							]
						}
					],
					"src": "108:4818:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC721": [
							256
						],
						"IERC721Metadata": [
							284
						]
					},
					"id": 285,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 258,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "127:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 260,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 285,
							"sourceUnit": 257,
							"src": "153:39:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 259,
										"name": "IERC721",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 256,
										"src": "161:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 262,
										"name": "IERC721",
										"nameLocations": [
											"357:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 256,
										"src": "357:7:4"
									},
									"id": 263,
									"nodeType": "InheritanceSpecifier",
									"src": "357:7:4"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 261,
								"nodeType": "StructuredDocumentation",
								"src": "194:133:4",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 284,
							"linearizedBaseContracts": [
								284,
								256,
								459
							],
							"name": "IERC721Metadata",
							"nameLocation": "338:15:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "371:58:4",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "443:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:4"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "473:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "473:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "472:15:4"
									},
									"scope": 284,
									"src": "434:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "494:60:4",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "568:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "574:2:4"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "600:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 272,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "600:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "599:15:4"
									},
									"scope": 284,
									"src": "559:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 276,
										"nodeType": "StructuredDocumentation",
										"src": "621:90:4",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 283,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "725:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "742:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "734:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "734:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "733:17:4"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "774:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 280,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "774:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "773:15:4"
									},
									"scope": 284,
									"src": "716:73:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 285,
							"src": "328:463:4",
							"usedErrors": [],
							"usedEvents": [
								155,
								164,
								173
							]
						}
					],
					"src": "127:665:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
					"exportedSymbols": {
						"IERC777": [
							447
						]
					},
					"id": 448,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 286,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC777",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 287,
								"nodeType": "StructuredDocumentation",
								"src": "133:372:5",
								"text": " @dev Interface of the ERC777Token standard as defined in the EIP.\n This contract uses the\n https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n token holders and recipients react to token movements by using setting implementers\n for the associated interfaces in said registry. See {IERC1820Registry} and\n {ERC1820Implementer}."
							},
							"fullyImplemented": false,
							"id": 447,
							"linearizedBaseContracts": [
								447
							],
							"name": "IERC777",
							"nameLocation": "516:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "530:199:5",
										"text": " @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n Note that some additional user `data` and `operatorData` can be logged in the event."
									},
									"eventSelector": "2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d",
									"id": 300,
									"name": "Minted",
									"nameLocation": "740:6:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "763:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "747:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "747:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "789:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "773:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "773:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "801:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "815:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "809:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 295,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 298,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "827:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "821:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 297,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "821:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "746:94:5"
									},
									"src": "734:107:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "847:187:5",
										"text": " @dev Emitted when `operator` destroys `amount` tokens from `account`.\n Note that some additional user `data` and `operatorData` can be logged in the event."
									},
									"eventSelector": "a78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098",
									"id": 313,
									"name": "Burned",
									"nameLocation": "1045:6:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1068:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "1052:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1094:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "1078:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1078:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1108:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "1100:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1100:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1122:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "1116:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 308,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1116:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "1134:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "1128:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 310,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1128:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1051:96:5"
									},
									"src": "1039:109:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "1154:83:5",
										"text": " @dev Emitted when `operator` is made operator for `tokenHolder`."
									},
									"eventSelector": "f4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f9",
									"id": 320,
									"name": "AuthorizedOperator",
									"nameLocation": "1248:18:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1283:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1267:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "1309:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1293:27:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1293:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:55:5"
									},
									"src": "1242:80:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "1328:97:5",
										"text": " @dev Emitted when `operator` is revoked its operator status for `tokenHolder`."
									},
									"eventSelector": "50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa1",
									"id": 327,
									"name": "RevokedOperator",
									"nameLocation": "1436:15:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1468:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "1452:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "1494:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "1478:27:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1478:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1451:55:5"
									},
									"src": "1430:77:5"
								},
								{
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "1513:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 333,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1581:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1585:2:5"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "1611:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 330,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1611:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1610:15:5"
									},
									"scope": 447,
									"src": "1572:54:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 334,
										"nodeType": "StructuredDocumentation",
										"src": "1632:102:5",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 339,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1748:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 335,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1754:2:5"
									},
									"returnParameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "1780:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 336,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1780:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1779:15:5"
									},
									"scope": 447,
									"src": "1739:56:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 340,
										"nodeType": "StructuredDocumentation",
										"src": "1801:287:5",
										"text": " @dev Returns the smallest part of the token that is not divisible. This\n means all token operations (creation, movement and destruction) must have\n amounts that are a multiple of this number.\n For most token contracts, this value will equal 1."
									},
									"functionSelector": "556f0dc7",
									"id": 345,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "granularity",
									"nameLocation": "2102:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2113:2:5"
									},
									"returnParameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "2139:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2139:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2138:9:5"
									},
									"scope": 447,
									"src": "2093:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 346,
										"nodeType": "StructuredDocumentation",
										"src": "2154:66:5",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 351,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2234:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2245:2:5"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "2271:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2271:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2270:9:5"
									},
									"scope": 447,
									"src": "2225:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 352,
										"nodeType": "StructuredDocumentation",
										"src": "2286:83:5",
										"text": " @dev Returns the amount of tokens owned by an account (`owner`)."
									},
									"functionSelector": "70a08231",
									"id": 359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2383:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2401:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2393:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2393:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2392:15:5"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2431:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2431:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:9:5"
									},
									"scope": 447,
									"src": "2374:66:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "2446:585:5",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n If send or receive hooks are registered for the caller and `recipient`,\n the corresponding functions will be called with `data` and empty\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "9bd9bbc6",
									"id": 369,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "3045:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3058:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "3050:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 361,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3077:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "3069:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3100:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "3085:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 365,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3085:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3049:56:5"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3114:0:5"
									},
									"scope": 447,
									"src": "3036:79:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "3121:404:5",
										"text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - the caller must have at least `amount` tokens."
									},
									"functionSelector": "fe9d9303",
									"id": 377,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "3539:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3552:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "3544:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3544:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3575:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "3560:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 373,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3560:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3543:37:5"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3589:0:5"
									},
									"scope": 447,
									"src": "3530:60:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 378,
										"nodeType": "StructuredDocumentation",
										"src": "3596:249:5",
										"text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
									},
									"functionSelector": "d95b6371",
									"id": 387,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOperatorFor",
									"nameLocation": "3859:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3881:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "3873:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3873:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "3899:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "3891:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3891:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3872:39:5"
									},
									"returnParameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "3935:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 384,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3935:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3934:6:5"
									},
									"scope": 447,
									"src": "3850:91:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 388,
										"nodeType": "StructuredDocumentation",
										"src": "3947:233:5",
										"text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n Emits an {AuthorizedOperator} event.\n Requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "959b8c3f",
									"id": 393,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeOperator",
									"nameLocation": "4194:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4220:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "4212:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4212:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4211:18:5"
									},
									"returnParameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4238:0:5"
									},
									"scope": 447,
									"src": "4185:54:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 394,
										"nodeType": "StructuredDocumentation",
										"src": "4245:261:5",
										"text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n Emits a {RevokedOperator} event.\n Requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "fad8b32a",
									"id": 399,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeOperator",
									"nameLocation": "4520:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4543:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "4535:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4535:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4534:18:5"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4561:0:5"
									},
									"scope": 447,
									"src": "4511:51:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 400,
										"nodeType": "StructuredDocumentation",
										"src": "4568:338:5",
										"text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
									},
									"functionSelector": "06e48538",
									"id": 406,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultOperators",
									"nameLocation": "4920:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4936:2:5"
									},
									"returnParameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "4962:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 402,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "4962:7:5",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 403,
													"nodeType": "ArrayTypeName",
													"src": "4962:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4961:18:5"
									},
									"scope": 447,
									"src": "4911:69:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 407,
										"nodeType": "StructuredDocumentation",
										"src": "4986:714:5",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "62ad1b83",
									"id": 420,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorSend",
									"nameLocation": "5714:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5744:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "5736:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5736:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5768:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "5760:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5760:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5795:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "5787:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5826:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "5811:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 414,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5811:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "5855:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "5840:27:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 416,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5840:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5726:147:5"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5882:0:5"
									},
									"scope": 447,
									"src": "5705:178:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 421,
										"nodeType": "StructuredDocumentation",
										"src": "5889:532:5",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
									},
									"functionSelector": "fc673c4f",
									"id": 432,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorBurn",
									"nameLocation": "6435:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6456:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "6448:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 422,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6448:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6473:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "6465:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6465:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6496:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "6481:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 426,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6481:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "6517:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "6502:27:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 428,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6502:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6447:83:5"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6539:0:5"
									},
									"scope": 447,
									"src": "6426:114:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"eventSelector": "06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987",
									"id": 446,
									"name": "Sent",
									"nameLocation": "6552:4:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6582:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "6566:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6566:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 436,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6616:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "6600:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 438,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6646:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "6630:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 437,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6630:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 440,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6666:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "6658:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 439,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6658:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 442,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6688:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "6682:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 441,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6682:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 444,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "6708:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "6702:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 443,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6702:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6556:170:5"
									},
									"src": "6546:181:5"
								}
							],
							"scope": 448,
							"src": "506:6223:5",
							"usedErrors": [],
							"usedEvents": [
								300,
								313,
								320,
								327,
								446
							]
						}
					],
					"src": "108:6622:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							459
						]
					},
					"id": 460,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 449,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 450,
								"nodeType": "StructuredDocumentation",
								"src": "141:279:6",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 459,
							"linearizedBaseContracts": [
								459
							],
							"name": "IERC165",
							"nameLocation": "431:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "445:340:6",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 458,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "799:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "824:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "817:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 452,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "817:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "816:20:6"
									},
									"returnParameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "860:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 455,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "860:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "859:6:6"
									},
									"scope": 459,
									"src": "790:76:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 460,
							"src": "421:447:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:754:6"
				},
				"id": 6
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol",
					"exportedSymbols": {
						"IPoolAdminNFT": [
							485
						],
						"IPoolNFTBase": [
							588
						]
					},
					"id": 486,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 461,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:7"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol",
							"file": "./IPoolNFTBase.sol",
							"id": 463,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 486,
							"sourceUnit": 589,
							"src": "59:50:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 462,
										"name": "IPoolNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 588,
										"src": "68:12:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 464,
										"name": "IPoolNFTBase",
										"nameLocations": [
											"138:12:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 588,
										"src": "138:12:7"
									},
									"id": 465,
									"nodeType": "InheritanceSpecifier",
									"src": "138:12:7"
								}
							],
							"canonicalName": "IPoolAdminNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 485,
							"linearizedBaseContracts": [
								485,
								588,
								284,
								256,
								459
							],
							"name": "IPoolAdminNFT",
							"nameLocation": "121:13:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IPoolAdminNFT.PoolAdminNFTData",
									"id": 470,
									"members": [
										{
											"constant": false,
											"id": 467,
											"mutability": "mutable",
											"name": "pool",
											"nameLocation": "385:4:7",
											"nodeType": "VariableDeclaration",
											"scope": 470,
											"src": "377:12:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 466,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "377:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 469,
											"mutability": "mutable",
											"name": "admin",
											"nameLocation": "407:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 470,
											"src": "399:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 468,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "399:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolAdminNFTData",
									"nameLocation": "350:16:7",
									"nodeType": "StructDefinition",
									"scope": 485,
									"src": "343:76:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 471,
										"nodeType": "StructuredDocumentation",
										"src": "425:23:7",
										"text": "Write Functions ///"
									},
									"functionSelector": "6a627842",
									"id": 476,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "462:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "475:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "467:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "467:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "466:14:7"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "489:0:7"
									},
									"scope": 485,
									"src": "453:37:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "38e26666",
									"id": 484,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "poolAdminDataByTokenId",
									"nameLocation": "505:22:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "536:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "528:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "528:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "527:17:7"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "592:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "568:28:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolAdminNFTData_$470_memory_ptr",
													"typeString": "struct IPoolAdminNFT.PoolAdminNFTData"
												},
												"typeName": {
													"id": 481,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 480,
														"name": "PoolAdminNFTData",
														"nameLocations": [
															"568:16:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 470,
														"src": "568:16:7"
													},
													"referencedDeclaration": 470,
													"src": "568:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolAdminNFTData_$470_storage_ptr",
														"typeString": "struct IPoolAdminNFT.PoolAdminNFTData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "567:30:7"
									},
									"scope": 485,
									"src": "496:102:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 486,
							"src": "111:489:7",
							"usedErrors": [
								546,
								548,
								550,
								552,
								554,
								556,
								558,
								560
							],
							"usedEvents": [
								155,
								164,
								173,
								565
							]
						}
					],
					"src": "32:568:7"
				},
				"id": 7
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol",
					"exportedSymbols": {
						"IPoolMemberNFT": [
							538
						],
						"IPoolNFTBase": [
							588
						]
					},
					"id": 539,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 487,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:8"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol",
							"file": "./IPoolNFTBase.sol",
							"id": 489,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 539,
							"sourceUnit": 589,
							"src": "59:50:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 488,
										"name": "IPoolNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 588,
										"src": "68:12:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 490,
										"name": "IPoolNFTBase",
										"nameLocations": [
											"139:12:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 588,
										"src": "139:12:8"
									},
									"id": 491,
									"nodeType": "InheritanceSpecifier",
									"src": "139:12:8"
								}
							],
							"canonicalName": "IPoolMemberNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 538,
							"linearizedBaseContracts": [
								538,
								588,
								284,
								256,
								459
							],
							"name": "IPoolMemberNFT",
							"nameLocation": "121:14:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IPoolMemberNFT.PoolMemberNFTData",
									"id": 498,
									"members": [
										{
											"constant": false,
											"id": 493,
											"mutability": "mutable",
											"name": "pool",
											"nameLocation": "450:4:8",
											"nodeType": "VariableDeclaration",
											"scope": 498,
											"src": "442:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 492,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "442:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 495,
											"mutability": "mutable",
											"name": "member",
											"nameLocation": "472:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 498,
											"src": "464:14:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 494,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "464:7:8",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 497,
											"mutability": "mutable",
											"name": "units",
											"nameLocation": "496:5:8",
											"nodeType": "VariableDeclaration",
											"scope": 498,
											"src": "488:13:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 496,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "488:7:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolMemberNFTData",
									"nameLocation": "414:17:8",
									"nodeType": "StructDefinition",
									"scope": 538,
									"src": "407:101:8",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "514:15:8",
										"text": "Errors ///"
									},
									"errorSelector": "8192c9c8",
									"id": 501,
									"name": "POOL_MEMBER_NFT_NO_ZERO_POOL",
									"nameLocation": "540:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "568:2:8"
									},
									"src": "534:37:8"
								},
								{
									"errorSelector": "962c2710",
									"id": 503,
									"name": "POOL_MEMBER_NFT_NO_ZERO_MEMBER",
									"nameLocation": "582:30:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:8"
									},
									"src": "576:39:8"
								},
								{
									"errorSelector": "ea1a8d60",
									"id": 505,
									"name": "POOL_MEMBER_NFT_NO_UNITS",
									"nameLocation": "626:24:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "650:2:8"
									},
									"src": "620:33:8"
								},
								{
									"errorSelector": "067aab17",
									"id": 507,
									"name": "POOL_MEMBER_NFT_HAS_UNITS",
									"nameLocation": "664:25:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "689:2:8"
									},
									"src": "658:34:8"
								},
								{
									"functionSelector": "f1391f73",
									"id": 514,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onCreate",
									"nameLocation": "707:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "724:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "716:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 508,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "716:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "member",
												"nameLocation": "738:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "730:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 510,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "715:30:8"
									},
									"returnParameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "754:0:8"
									},
									"scope": 538,
									"src": "698:57:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "0447a2cd",
									"id": 521,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onUpdate",
									"nameLocation": "770:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "787:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "779:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "779:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "member",
												"nameLocation": "801:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "793:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:30:8"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "817:0:8"
									},
									"scope": 538,
									"src": "761:57:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b62b3646",
									"id": 528,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onDelete",
									"nameLocation": "833:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "850:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "842:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 522,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "842:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "member",
												"nameLocation": "864:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 528,
												"src": "856:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "856:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "841:30:8"
									},
									"returnParameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "880:0:8"
									},
									"scope": 538,
									"src": "824:57:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 529,
										"nodeType": "StructuredDocumentation",
										"src": "887:23:8",
										"text": "View Functions ///"
									},
									"functionSelector": "3bda0594",
									"id": 537,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "poolMemberDataByTokenId",
									"nameLocation": "924:23:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "956:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "948:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "948:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "947:17:8"
									},
									"returnParameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1013:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "988:29:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolMemberNFTData_$498_memory_ptr",
													"typeString": "struct IPoolMemberNFT.PoolMemberNFTData"
												},
												"typeName": {
													"id": 534,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 533,
														"name": "PoolMemberNFTData",
														"nameLocations": [
															"988:17:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 498,
														"src": "988:17:8"
													},
													"referencedDeclaration": 498,
													"src": "988:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolMemberNFTData_$498_storage_ptr",
														"typeString": "struct IPoolMemberNFT.PoolMemberNFTData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "987:31:8"
									},
									"scope": 538,
									"src": "915:104:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 539,
							"src": "111:910:8",
							"usedErrors": [
								501,
								503,
								505,
								507,
								546,
								548,
								550,
								552,
								554,
								556,
								558,
								560
							],
							"usedEvents": [
								155,
								164,
								173,
								565
							]
						}
					],
					"src": "32:989:8"
				},
				"id": 8
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolNFTBase.sol",
					"exportedSymbols": {
						"IERC721Metadata": [
							284
						],
						"IPoolNFTBase": [
							588
						]
					},
					"id": 589,
					"license": "AGPLv3",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 540,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "35:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 542,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 589,
							"sourceUnit": 285,
							"src": "61:102:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 541,
										"name": "IERC721Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 284,
										"src": "70:15:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 543,
										"name": "IERC721Metadata",
										"nameLocations": [
											"191:15:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 284,
										"src": "191:15:9"
									},
									"id": 544,
									"nodeType": "InheritanceSpecifier",
									"src": "191:15:9"
								}
							],
							"canonicalName": "IPoolNFTBase",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 588,
							"linearizedBaseContracts": [
								588,
								284,
								256,
								459
							],
							"name": "IPoolNFTBase",
							"nameLocation": "175:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "9212b333",
									"id": 546,
									"name": "POOL_NFT_APPROVE_TO_CALLER",
									"nameLocation": "219:26:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "245:2:9"
									},
									"src": "213:35:9"
								},
								{
									"errorSelector": "1fd7e3d8",
									"id": 548,
									"name": "POOL_NFT_ONLY_SUPER_TOKEN_FACTORY",
									"nameLocation": "301:33:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "334:2:9"
									},
									"src": "295:42:9"
								},
								{
									"errorSelector": "09275994",
									"id": 550,
									"name": "POOL_NFT_INVALID_TOKEN_ID",
									"nameLocation": "383:25:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "408:2:9"
									},
									"src": "377:34:9"
								},
								{
									"errorSelector": "020226d3",
									"id": 552,
									"name": "POOL_NFT_APPROVE_TO_CURRENT_OWNER",
									"nameLocation": "465:33:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "498:2:9"
									},
									"src": "459:42:9"
								},
								{
									"errorSelector": "1e82f255",
									"id": 554,
									"name": "POOL_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "547:53:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "600:2:9"
									},
									"src": "541:62:9"
								},
								{
									"errorSelector": "6421912e",
									"id": 556,
									"name": "POOL_NFT_NOT_REGISTERED_POOL",
									"nameLocation": "629:28:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "657:2:9"
									},
									"src": "623:37:9"
								},
								{
									"errorSelector": "432fb160",
									"id": 558,
									"name": "POOL_NFT_TRANSFER_NOT_ALLOWED",
									"nameLocation": "711:29:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "740:2:9"
									},
									"src": "705:38:9"
								},
								{
									"errorSelector": "4028ee0e",
									"id": 560,
									"name": "POOL_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "793:54:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "847:2:9"
									},
									"src": "787:63:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 561,
										"nodeType": "StructuredDocumentation",
										"src": "870:233:9",
										"text": "@notice Informs third-party platforms that NFT metadata should be updated\n @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n @param tokenId the id of the token that should have its metadata updated"
									},
									"eventSelector": "f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7",
									"id": 565,
									"name": "MetadataUpdate",
									"nameLocation": "1114:14:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 563,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1137:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 565,
												"src": "1129:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1129:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1128:17:9"
									},
									"src": "1108:38:9"
								},
								{
									"functionSelector": "4cd88b76",
									"id": 572,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "1161:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "nftName",
												"nameLocation": "1186:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "1172:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 566,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1172:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "nftSymbol",
												"nameLocation": "1209:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "1195:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 568,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1171:48:9"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1228:0:9"
									},
									"scope": 588,
									"src": "1152:77:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2f388560",
									"id": 577,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "triggerMetadataUpdate",
									"nameLocation": "1260:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 574,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1290:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "1282:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 573,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1282:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1281:17:9"
									},
									"returnParameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1307:0:9"
									},
									"scope": 588,
									"src": "1251:57:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 578,
										"nodeType": "StructuredDocumentation",
										"src": "1314:122:9",
										"text": "@notice Gets the token id\n @dev For PoolAdminNFT, `account` is admin and for PoolMemberNFT, `account` is member"
									},
									"functionSelector": "b943855e",
									"id": 587,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenId",
									"nameLocation": "1450:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1469:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "1461:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1461:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1483:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "1475:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1460:31:9"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1523:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "1515:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1515:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1514:17:9"
									},
									"scope": 588,
									"src": "1441:91:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 589,
							"src": "165:1369:9",
							"usedErrors": [
								546,
								548,
								550,
								552,
								554,
								556,
								558,
								560
							],
							"usedEvents": [
								155,
								164,
								173,
								565
							]
						}
					],
					"src": "35:1500:9"
				},
				"id": 9
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
					"exportedSymbols": {
						"IConstantInflowNFT": [
							611
						],
						"IFlowNFTBase": [
							737
						]
					},
					"id": 612,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 590,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:10"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
							"file": "./IFlowNFTBase.sol",
							"id": 592,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 612,
							"sourceUnit": 738,
							"src": "59:50:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 591,
										"name": "IFlowNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 737,
										"src": "68:12:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 593,
										"name": "IFlowNFTBase",
										"nameLocations": [
											"143:12:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 737,
										"src": "143:12:10"
									},
									"id": 594,
									"nodeType": "InheritanceSpecifier",
									"src": "143:12:10"
								}
							],
							"canonicalName": "IConstantInflowNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 611,
							"linearizedBaseContracts": [
								611,
								737,
								284,
								256,
								459
							],
							"name": "IConstantInflowNFT",
							"nameLocation": "121:18:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "e81ef57a",
									"id": 596,
									"name": "CIF_NFT_ONLY_CONSTANT_OUTFLOW",
									"nameLocation": "349:29:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "378:2:10"
									},
									"src": "343:38:10"
								},
								{
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "585:333:10",
										"text": "@notice The mint function emits the \"mint\" `Transfer` event.\n @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n is to inform clients that search for events.\n @param to the flow receiver (inflow NFT receiver)\n @param newTokenId the new token id"
									},
									"functionSelector": "40c10f19",
									"id": 604,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "932:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "945:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "937:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "937:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "newTokenId",
												"nameLocation": "957:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "949:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 600,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "949:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "936:32:10"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "977:0:10"
									},
									"scope": 611,
									"src": "923:55:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "984:281:10",
										"text": "@notice This burn function emits the \"burn\" `Transfer` event.\n @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n is to inform clients that search for events.\n @param tokenId desired token id to burn"
									},
									"functionSelector": "42966c68",
									"id": 610,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "1279:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1292:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "1284:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1284:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1283:17:10"
									},
									"returnParameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1309:0:10"
									},
									"scope": 611,
									"src": "1270:40:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 612,
							"src": "111:1201:10",
							"usedErrors": [
								596,
								682,
								684,
								686,
								688,
								690,
								692,
								694,
								696,
								698
							],
							"usedEvents": [
								155,
								164,
								173,
								703
							]
						}
					],
					"src": "32:1281:10"
				},
				"id": 10
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
					"exportedSymbols": {
						"IConstantOutflowNFT": [
							665
						],
						"IFlowNFTBase": [
							737
						],
						"ISuperfluidToken": [
							1765
						]
					},
					"id": 666,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 613,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:11"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 615,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 666,
							"sourceUnit": 1766,
							"src": "59:58:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 614,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1765,
										"src": "68:16:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
							"file": "./IFlowNFTBase.sol",
							"id": 617,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 666,
							"sourceUnit": 738,
							"src": "118:50:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 616,
										"name": "IFlowNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 737,
										"src": "127:12:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 618,
										"name": "IFlowNFTBase",
										"nameLocations": [
											"203:12:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 737,
										"src": "203:12:11"
									},
									"id": 619,
									"nodeType": "InheritanceSpecifier",
									"src": "203:12:11"
								}
							],
							"canonicalName": "IConstantOutflowNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 665,
							"linearizedBaseContracts": [
								665,
								737,
								284,
								256,
								459
							],
							"name": "IConstantOutflowNFT",
							"nameLocation": "180:19:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "6de98774",
									"id": 621,
									"name": "COF_NFT_INVALID_SUPER_TOKEN",
									"nameLocation": "410:27:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "437:2:11"
									},
									"src": "404:36:11"
								},
								{
									"errorSelector": "a07fa909",
									"id": 623,
									"name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
									"nameLocation": "476:38:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:11"
									},
									"src": "470:47:11"
								},
								{
									"errorSelector": "43d05e51",
									"id": 625,
									"name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
									"nameLocation": "542:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "570:2:11"
									},
									"src": "536:37:11"
								},
								{
									"errorSelector": "a495a718",
									"id": 627,
									"name": "COF_NFT_ONLY_CONSTANT_INFLOW",
									"nameLocation": "608:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "636:2:11"
									},
									"src": "602:37:11"
								},
								{
									"errorSelector": "d367b64f",
									"id": 629,
									"name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
									"nameLocation": "674:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "702:2:11"
									},
									"src": "668:37:11"
								},
								{
									"errorSelector": "e2480183",
									"id": 631,
									"name": "COF_NFT_TOKEN_ALREADY_EXISTS",
									"nameLocation": "740:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "768:2:11"
									},
									"src": "734:37:11"
								},
								{
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "986:227:11",
										"text": "@notice The onCreate function is called when a new flow is created.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "f7e3d983",
									"id": 642,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onCreate",
									"nameLocation": "1227:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1253:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "1236:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1765",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 634,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 633,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1236:16:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1765,
														"src": "1236:16:11"
													},
													"referencedDeclaration": 1765,
													"src": "1236:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1765",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1268:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "1260:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 636,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1260:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1288:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "1280:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1280:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1235:66:11"
									},
									"returnParameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1310:0:11"
									},
									"scope": 665,
									"src": "1218:93:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 643,
										"nodeType": "StructuredDocumentation",
										"src": "1317:223:11",
										"text": "@notice The onUpdate function is called when a flow is updated.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "eb54a7ca",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onUpdate",
									"nameLocation": "1554:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1580:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "1563:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1765",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 645,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 644,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1563:16:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1765,
														"src": "1563:16:11"
													},
													"referencedDeclaration": 1765,
													"src": "1563:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1765",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1595:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "1587:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 647,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1587:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1615:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "1607:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1607:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1562:66:11"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1637:0:11"
									},
									"scope": 665,
									"src": "1545:93:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "1644:223:11",
										"text": "@notice The onDelete function is called when a flow is deleted.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "ef1f0237",
									"id": 664,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onDelete",
									"nameLocation": "1881:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1907:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1890:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1765",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 656,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 655,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1890:16:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1765,
														"src": "1890:16:11"
													},
													"referencedDeclaration": 1765,
													"src": "1890:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1765",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1922:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1914:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 658,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1914:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1942:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "1934:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 660,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1934:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1889:66:11"
									},
									"returnParameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1964:0:11"
									},
									"scope": 665,
									"src": "1872:93:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 666,
							"src": "170:1797:11",
							"usedErrors": [
								621,
								623,
								625,
								627,
								629,
								631,
								682,
								684,
								686,
								688,
								690,
								692,
								694,
								696,
								698
							],
							"usedEvents": [
								155,
								164,
								173,
								703
							]
						}
					],
					"src": "32:1936:11"
				},
				"id": 11
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
					"exportedSymbols": {
						"IERC721Metadata": [
							284
						],
						"IFlowNFTBase": [
							737
						]
					},
					"id": 738,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 667,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 669,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 738,
							"sourceUnit": 285,
							"src": "59:102:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 668,
										"name": "IERC721Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 284,
										"src": "68:15:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 670,
										"name": "IERC721Metadata",
										"nameLocations": [
											"189:15:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 284,
										"src": "189:15:12"
									},
									"id": 671,
									"nodeType": "InheritanceSpecifier",
									"src": "189:15:12"
								}
							],
							"canonicalName": "IFlowNFTBase",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 737,
							"linearizedBaseContracts": [
								737,
								284,
								256,
								459
							],
							"name": "IFlowNFTBase",
							"nameLocation": "173:12:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IFlowNFTBase.FlowNFTData",
									"id": 680,
									"members": [
										{
											"constant": false,
											"id": 673,
											"mutability": "mutable",
											"name": "superToken",
											"nameLocation": "576:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 680,
											"src": "568:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 672,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "568:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 675,
											"mutability": "mutable",
											"name": "flowSender",
											"nameLocation": "604:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 680,
											"src": "596:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 674,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "596:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 677,
											"mutability": "mutable",
											"name": "flowReceiver",
											"nameLocation": "632:12:12",
											"nodeType": "VariableDeclaration",
											"scope": 680,
											"src": "624:20:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 676,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "624:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 679,
											"mutability": "mutable",
											"name": "flowStartDate",
											"nameLocation": "661:13:12",
											"nodeType": "VariableDeclaration",
											"scope": 680,
											"src": "654:20:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 678,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "654:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "FlowNFTData",
									"nameLocation": "546:11:12",
									"nodeType": "StructDefinition",
									"scope": 737,
									"src": "539:142:12",
									"visibility": "public"
								},
								{
									"errorSelector": "a3352582",
									"id": 682,
									"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "875:52:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "927:2:12"
									},
									"src": "869:61:12"
								},
								{
									"errorSelector": "d3c77329",
									"id": 684,
									"name": "CFA_NFT_APPROVE_TO_CALLER",
									"nameLocation": "957:25:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "982:2:12"
									},
									"src": "951:34:12"
								},
								{
									"errorSelector": "e4790b25",
									"id": 686,
									"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
									"nameLocation": "1039:32:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1071:2:12"
									},
									"src": "1033:41:12"
								},
								{
									"errorSelector": "eab95e3b",
									"id": 688,
									"name": "CFA_NFT_INVALID_TOKEN_ID",
									"nameLocation": "1121:24:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1145:2:12"
									},
									"src": "1115:33:12"
								},
								{
									"errorSelector": "ebb7505b",
									"id": 690,
									"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
									"nameLocation": "1203:32:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1235:2:12"
									},
									"src": "1197:41:12"
								},
								{
									"errorSelector": "2551d606",
									"id": 692,
									"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "1285:53:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:12"
									},
									"src": "1279:62:12"
								},
								{
									"errorSelector": "5a26c744",
									"id": 694,
									"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
									"nameLocation": "1367:37:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 693,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:2:12"
									},
									"src": "1361:46:12"
								},
								{
									"errorSelector": "aa747eca",
									"id": 696,
									"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
									"nameLocation": "1449:31:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1480:2:12"
									},
									"src": "1443:40:12"
								},
								{
									"errorSelector": "de06d21e",
									"id": 698,
									"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
									"nameLocation": "1531:32:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1563:2:12"
									},
									"src": "1525:41:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 699,
										"nodeType": "StructuredDocumentation",
										"src": "1783:233:12",
										"text": "@notice Informs third-party platforms that NFT metadata should be updated\n @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n @param tokenId the id of the token that should have its metadata updated"
									},
									"eventSelector": "f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7",
									"id": 703,
									"name": "MetadataUpdate",
									"nameLocation": "2027:14:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2050:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 703,
												"src": "2042:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2042:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:17:12"
									},
									"src": "2021:38:12"
								},
								{
									"documentation": {
										"id": 704,
										"nodeType": "StructuredDocumentation",
										"src": "2238:170:12",
										"text": "@notice An external function for querying flow data by `tokenId``\n @param tokenId the token id\n @return flowData the flow data associated with `tokenId`"
									},
									"functionSelector": "8d47859e",
									"id": 712,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flowDataByTokenId",
									"nameLocation": "2422:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2457:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "2449:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2449:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:31:12"
									},
									"returnParameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "flowData",
												"nameLocation": "2513:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 712,
												"src": "2494:27:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FlowNFTData_$680_memory_ptr",
													"typeString": "struct IFlowNFTBase.FlowNFTData"
												},
												"typeName": {
													"id": 709,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 708,
														"name": "FlowNFTData",
														"nameLocations": [
															"2494:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 680,
														"src": "2494:11:12"
													},
													"referencedDeclaration": 680,
													"src": "2494:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FlowNFTData_$680_storage_ptr",
														"typeString": "struct IFlowNFTBase.FlowNFTData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2493:29:12"
									},
									"scope": 737,
									"src": "2413:110:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 713,
										"nodeType": "StructuredDocumentation",
										"src": "2529:345:12",
										"text": "@notice An external function for computing the deterministic tokenId\n @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n @param superToken the super token\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n @return tokenId the tokenId"
									},
									"functionSelector": "89f71d2d",
									"id": 724,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenId",
									"nameLocation": "2888:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2916:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "2908:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 714,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2908:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "2944:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "2936:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2936:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "2972:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "2964:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2964:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2898:92:12"
									},
									"returnParameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3014:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3014:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3013:9:12"
									},
									"scope": 737,
									"src": "2879:144:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4cd88b76",
									"id": 731,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "3212:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "nftName",
												"nameLocation": "3246:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 731,
												"src": "3232:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 725,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3232:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "nftSymbol",
												"nameLocation": "3277:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 731,
												"src": "3263:23:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 727,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3263:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3222:70:12"
									},
									"returnParameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3301:0:12"
									},
									"scope": 737,
									"src": "3203:99:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2f388560",
									"id": 736,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "triggerMetadataUpdate",
									"nameLocation": "3333:21:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3363:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 736,
												"src": "3355:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 732,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3355:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3354:17:12"
									},
									"returnParameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3380:0:12"
									},
									"scope": 737,
									"src": "3324:57:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 738,
							"src": "163:3220:12",
							"usedErrors": [
								682,
								684,
								686,
								688,
								690,
								692,
								694,
								696,
								698
							],
							"usedEvents": [
								155,
								164,
								173,
								703
							]
						}
					],
					"src": "32:3352:12"
				},
				"id": 12
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							766
						],
						"ISuperfluidToken": [
							1765
						]
					},
					"id": 767,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 739,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:26:13"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 741,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 767,
							"sourceUnit": 1766,
							"src": "60:58:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 740,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1765,
										"src": "69:16:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperAgreement",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 742,
								"nodeType": "StructuredDocumentation",
								"src": "120:65:13",
								"text": " @title Super agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 766,
							"linearizedBaseContracts": [
								766
							],
							"name": "ISuperAgreement",
							"nameLocation": "196:15:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "219:59:13",
										"text": " @dev Get the type of the agreement class"
									},
									"functionSelector": "7730599e",
									"id": 748,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "292:13:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "305:2:13"
									},
									"returnParameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "331:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 745,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "331:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "330:9:13"
									},
									"scope": 766,
									"src": "283:57:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 749,
										"nodeType": "StructuredDocumentation",
										"src": "346:425:13",
										"text": " @dev Calculate the real-time balance for the account of this agreement class\n @param account Account the state belongs to\n @param time Time used for the calculation\n @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n @return deposit Account deposit amount of this agreement\n @return owedDeposit Account owed deposit amount of this agreement"
									},
									"functionSelector": "9b2e48bc",
									"id": 765,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "785:17:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "829:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "812:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1765",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 751,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 750,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"812:16:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1765,
														"src": "812:16:13"
													},
													"referencedDeclaration": 1765,
													"src": "812:16:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1765",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "852:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "844:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 753,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "844:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "877:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "869:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 755,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "869:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:85:13"
									},
									"returnParameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "dynamicBalance",
												"nameLocation": "955:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "948:21:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 758,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "948:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "991:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "983:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "983:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "1020:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "1012:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "934:107:13"
									},
									"scope": 766,
									"src": "776:266:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 767,
							"src": "186:859:13",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:1014:13"
				},
				"id": 13
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
					"exportedSymbols": {
						"IConstantInflowNFT": [
							611
						],
						"IConstantOutflowNFT": [
							665
						],
						"IERC20": [
							113
						],
						"IERC20Metadata": [
							139
						],
						"IERC777": [
							447
						],
						"IPoolAdminNFT": [
							485
						],
						"IPoolMemberNFT": [
							538
						],
						"ISuperToken": [
							1308
						],
						"ISuperfluidToken": [
							1765
						]
					},
					"id": 1309,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 768,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:26:14"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 770,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1309,
							"sourceUnit": 1766,
							"src": "60:58:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 769,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1765,
										"src": "69:16:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"id": 773,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1309,
							"sourceUnit": 140,
							"src": "119:107:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 771,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 113,
										"src": "128:6:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 772,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 139,
										"src": "136:14:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"id": 775,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1309,
							"sourceUnit": 448,
							"src": "227:75:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 774,
										"name": "IERC777",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 447,
										"src": "236:7:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
							"file": "./IConstantOutflowNFT.sol",
							"id": 777,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1309,
							"sourceUnit": 666,
							"src": "303:64:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 776,
										"name": "IConstantOutflowNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 665,
										"src": "312:19:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
							"file": "./IConstantInflowNFT.sol",
							"id": 779,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1309,
							"sourceUnit": 612,
							"src": "368:62:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 778,
										"name": "IConstantInflowNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 611,
										"src": "377:18:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolAdminNFT.sol",
							"file": "../agreements/gdav1/IPoolAdminNFT.sol",
							"id": 781,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1309,
							"sourceUnit": 486,
							"src": "431:70:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 780,
										"name": "IPoolAdminNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 485,
										"src": "440:13:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/gdav1/IPoolMemberNFT.sol",
							"file": "../agreements/gdav1/IPoolMemberNFT.sol",
							"id": 783,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1309,
							"sourceUnit": 539,
							"src": "502:72:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 782,
										"name": "IPoolMemberNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 538,
										"src": "511:14:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 785,
										"name": "ISuperfluidToken",
										"nameLocations": [
											"699:16:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1765,
										"src": "699:16:14"
									},
									"id": 786,
									"nodeType": "InheritanceSpecifier",
									"src": "699:16:14"
								},
								{
									"baseName": {
										"id": 787,
										"name": "IERC20Metadata",
										"nameLocations": [
											"717:14:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 139,
										"src": "717:14:14"
									},
									"id": 788,
									"nodeType": "InheritanceSpecifier",
									"src": "717:14:14"
								},
								{
									"baseName": {
										"id": 789,
										"name": "IERC777",
										"nameLocations": [
											"733:7:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 447,
										"src": "733:7:14"
									},
									"id": 790,
									"nodeType": "InheritanceSpecifier",
									"src": "733:7:14"
								}
							],
							"canonicalName": "ISuperToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 784,
								"nodeType": "StructuredDocumentation",
								"src": "576:97:14",
								"text": " @title Super token (Superfluid Token + ERC20 + ERC777) interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 1308,
							"linearizedBaseContracts": [
								1308,
								447,
								139,
								113,
								1765
							],
							"name": "ISuperToken",
							"nameLocation": "684:11:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "f7f02227",
									"id": 792,
									"name": "SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER",
									"nameLocation": "928:45:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "973:2:14"
									},
									"src": "922:54:14"
								},
								{
									"errorSelector": "fe737d05",
									"id": 794,
									"name": "SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT",
									"nameLocation": "1007:39:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1046:2:14"
									},
									"src": "1001:48:14"
								},
								{
									"errorSelector": "e3e13698",
									"id": 796,
									"name": "SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED",
									"nameLocation": "1086:51:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1137:2:14"
									},
									"src": "1080:60:14"
								},
								{
									"errorSelector": "f79cf656",
									"id": 798,
									"name": "SUPER_TOKEN_NO_UNDERLYING_TOKEN",
									"nameLocation": "1165:31:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1196:2:14"
									},
									"src": "1159:40:14"
								},
								{
									"errorSelector": "7ffa6648",
									"id": 800,
									"name": "SUPER_TOKEN_ONLY_SELF",
									"nameLocation": "1244:21:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1265:2:14"
									},
									"src": "1238:30:14"
								},
								{
									"errorSelector": "0484acab",
									"id": 802,
									"name": "SUPER_TOKEN_ONLY_ADMIN",
									"nameLocation": "1323:22:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1345:2:14"
									},
									"src": "1317:31:14"
								},
								{
									"errorSelector": "d9c7ed08",
									"id": 804,
									"name": "SUPER_TOKEN_ONLY_GOV_OWNER",
									"nameLocation": "1402:26:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1428:2:14"
									},
									"src": "1396:35:14"
								},
								{
									"errorSelector": "81638627",
									"id": 806,
									"name": "SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS",
									"nameLocation": "1481:37:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:14"
									},
									"src": "1475:46:14"
								},
								{
									"errorSelector": "df070274",
									"id": 808,
									"name": "SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS",
									"nameLocation": "1560:35:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1595:2:14"
									},
									"src": "1554:44:14"
								},
								{
									"errorSelector": "ba2ab184",
									"id": 810,
									"name": "SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS",
									"nameLocation": "1639:34:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1673:2:14"
									},
									"src": "1633:43:14"
								},
								{
									"errorSelector": "0d243157",
									"id": 812,
									"name": "SUPER_TOKEN_MINT_TO_ZERO_ADDRESS",
									"nameLocation": "1718:32:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1750:2:14"
									},
									"src": "1712:41:14"
								},
								{
									"errorSelector": "eecd6c9b",
									"id": 814,
									"name": "SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS",
									"nameLocation": "1797:38:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 813,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1835:2:14"
									},
									"src": "1791:47:14"
								},
								{
									"errorSelector": "e219bd39",
									"id": 816,
									"name": "SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS",
									"nameLocation": "1876:36:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1912:2:14"
									},
									"src": "1870:45:14"
								},
								{
									"errorSelector": "ef1b6ddf",
									"id": 818,
									"name": "SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED",
									"nameLocation": "1955:37:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1992:2:14"
									},
									"src": "1949:46:14"
								},
								{
									"documentation": {
										"id": 819,
										"nodeType": "StructuredDocumentation",
										"src": "2029:47:14",
										"text": " @dev Initialize the contract"
									},
									"functionSelector": "42fe0980",
									"id": 831,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "2090:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 822,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2117:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "2110:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$113",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 821,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 820,
														"name": "IERC20",
														"nameLocations": [
															"2110:6:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 113,
														"src": "2110:6:14"
													},
													"referencedDeclaration": 113,
													"src": "2110:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$113",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2148:18:14",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "2142:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 823,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2142:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "2192:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "2176:17:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 825,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2176:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2219:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "2203:17:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 827,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2203:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2100:126:14"
									},
									"returnParameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2235:0:14"
									},
									"scope": 1308,
									"src": "2081:155:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 832,
										"nodeType": "StructuredDocumentation",
										"src": "2242:61:14",
										"text": " @dev Initialize the contract with an admin"
									},
									"functionSelector": "ec0d6343",
									"id": 846,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initializeWithAdmin",
									"nameLocation": "2317:19:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2353:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "2346:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$113",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 834,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 833,
														"name": "IERC20",
														"nameLocations": [
															"2346:6:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 113,
														"src": "2346:6:14"
													},
													"referencedDeclaration": 113,
													"src": "2346:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$113",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2384:18:14",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "2378:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 836,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2378:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "2428:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "2412:17:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 838,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2412:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2455:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "2439:17:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 840,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2439:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "2474:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "2466:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 842,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2466:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2336:149:14"
									},
									"returnParameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:14"
									},
									"scope": 1308,
									"src": "2308:187:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "2501:227:14",
										"text": " @notice Changes the admin for the SuperToken\n @dev Only the current admin can call this function\n if admin is address(0), it is implicitly the host address\n @param newAdmin New admin address"
									},
									"functionSelector": "8f283970",
									"id": 852,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "changeAdmin",
									"nameLocation": "2742:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "2762:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 852,
												"src": "2754:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2753:18:14"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2780:0:14"
									},
									"scope": 1308,
									"src": "2733:48:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"eventSelector": "7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f",
									"id": 858,
									"name": "AdminChanged",
									"nameLocation": "2793:12:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 854,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldAdmin",
												"nameLocation": "2822:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "2806:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 853,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2806:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 856,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "2848:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "2832:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 855,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2832:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2805:52:14"
									},
									"src": "2787:71:14"
								},
								{
									"documentation": {
										"id": 859,
										"nodeType": "StructuredDocumentation",
										"src": "2864:68:14",
										"text": " @dev Returns the admin address for the SuperToken"
									},
									"functionSelector": "6e9960c3",
									"id": 864,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAdmin",
									"nameLocation": "2946:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2954:2:14"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "2988:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2980:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2980:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2979:15:14"
									},
									"scope": 1308,
									"src": "2937:58:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "ef43d2c6",
									"id": 870,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "CONSTANT_OUTFLOW_NFT",
									"nameLocation": "3249:20:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3269:2:14"
									},
									"returnParameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "3295:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantOutflowNFT_$665",
													"typeString": "contract IConstantOutflowNFT"
												},
												"typeName": {
													"id": 867,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 866,
														"name": "IConstantOutflowNFT",
														"nameLocations": [
															"3295:19:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 665,
														"src": "3295:19:14"
													},
													"referencedDeclaration": 665,
													"src": "3295:19:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantOutflowNFT_$665",
														"typeString": "contract IConstantOutflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3294:21:14"
									},
									"scope": 1308,
									"src": "3240:76:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4c5c0c85",
									"id": 876,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "CONSTANT_INFLOW_NFT",
									"nameLocation": "3383:19:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3402:2:14"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "3428:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantInflowNFT_$611",
													"typeString": "contract IConstantInflowNFT"
												},
												"typeName": {
													"id": 873,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 872,
														"name": "IConstantInflowNFT",
														"nameLocations": [
															"3428:18:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 611,
														"src": "3428:18:14"
													},
													"referencedDeclaration": 611,
													"src": "3428:18:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantInflowNFT_$611",
														"typeString": "contract IConstantInflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3427:20:14"
									},
									"scope": 1308,
									"src": "3374:74:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b20db1ac",
									"id": 882,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "POOL_ADMIN_NFT",
									"nameLocation": "3515:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3529:2:14"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "3555:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IPoolAdminNFT_$485",
													"typeString": "contract IPoolAdminNFT"
												},
												"typeName": {
													"id": 879,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 878,
														"name": "IPoolAdminNFT",
														"nameLocations": [
															"3555:13:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 485,
														"src": "3555:13:14"
													},
													"referencedDeclaration": 485,
													"src": "3555:13:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPoolAdminNFT_$485",
														"typeString": "contract IPoolAdminNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3554:15:14"
									},
									"scope": 1308,
									"src": "3506:64:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "f5a8b4dd",
									"id": 888,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "POOL_MEMBER_NFT",
									"nameLocation": "3637:15:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3652:2:14"
									},
									"returnParameters": {
										"id": 887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 886,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "3678:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IPoolMemberNFT_$538",
													"typeString": "contract IPoolMemberNFT"
												},
												"typeName": {
													"id": 885,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 884,
														"name": "IPoolMemberNFT",
														"nameLocations": [
															"3678:14:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 538,
														"src": "3678:14:14"
													},
													"referencedDeclaration": 538,
													"src": "3678:14:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPoolMemberNFT_$538",
														"typeString": "contract IPoolMemberNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3677:16:14"
									},
									"scope": 1308,
									"src": "3628:66:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										126,
										333
									],
									"documentation": {
										"id": 889,
										"nodeType": "StructuredDocumentation",
										"src": "3890:54:14",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 897,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "3958:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 893,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 891,
												"name": "IERC777",
												"nameLocations": [
													"3988:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "3988:7:14"
											},
											{
												"id": 892,
												"name": "IERC20Metadata",
												"nameLocations": [
													"3997:14:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 139,
												"src": "3997:14:14"
											}
										],
										"src": "3979:33:14"
									},
									"parameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3962:2:14"
									},
									"returnParameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "4022:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 894,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4022:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4021:15:14"
									},
									"scope": 1308,
									"src": "3949:88:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										132,
										339
									],
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "4043:102:14",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 906,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "4159:6:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 902,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 900,
												"name": "IERC777",
												"nameLocations": [
													"4191:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "4191:7:14"
											},
											{
												"id": 901,
												"name": "IERC20Metadata",
												"nameLocations": [
													"4200:14:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 139,
												"src": "4200:14:14"
											}
										],
										"src": "4182:33:14"
									},
									"parameters": {
										"id": 899,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4165:2:14"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "4225:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 903,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4225:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4224:15:14"
									},
									"scope": 1308,
									"src": "4150:90:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										138
									],
									"documentation": {
										"id": 907,
										"nodeType": "StructuredDocumentation",
										"src": "4246:669:14",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n @custom:note SuperToken always uses 18 decimals.\n This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 914,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "4929:8:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 910,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 909,
												"name": "IERC20Metadata",
												"nameLocations": [
													"4963:14:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 139,
												"src": "4963:14:14"
											}
										],
										"src": "4954:24:14"
									},
									"parameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4937:2:14"
									},
									"returnParameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "4988:5:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 911,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4988:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4987:7:14"
									},
									"scope": 1308,
									"src": "4920:75:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										62,
										351
									],
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "5182:49:14",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 923,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "5245:11:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 919,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 917,
												"name": "IERC777",
												"nameLocations": [
													"5282:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "5282:7:14"
											},
											{
												"id": 918,
												"name": "IERC20",
												"nameLocations": [
													"5291:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "5291:6:14"
											}
										],
										"src": "5273:25:14"
									},
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5256:2:14"
									},
									"returnParameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "5308:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 920,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5308:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5307:9:14"
									},
									"scope": 1308,
									"src": "5236:81:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										70,
										359
									],
									"documentation": {
										"id": 924,
										"nodeType": "StructuredDocumentation",
										"src": "5323:83:14",
										"text": " @dev Returns the amount of tokens owned by an account (`owner`)."
									},
									"functionSelector": "70a08231",
									"id": 934,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "5420:9:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 930,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 928,
												"name": "IERC777",
												"nameLocations": [
													"5470:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "5470:7:14"
											},
											{
												"id": 929,
												"name": "IERC20",
												"nameLocations": [
													"5479:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "5479:6:14"
											}
										],
										"src": "5461:25:14"
									},
									"parameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5438:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "5430:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 925,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5430:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5429:17:14"
									},
									"returnParameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "5503:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 934,
												"src": "5495:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 931,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5495:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:17:14"
									},
									"scope": 1308,
									"src": "5411:101:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										80
									],
									"documentation": {
										"id": 935,
										"nodeType": "StructuredDocumentation",
										"src": "5690:233:14",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 946,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "5937:8:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 942,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 941,
												"name": "IERC20",
												"nameLocations": [
													"5999:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "5999:6:14"
											}
										],
										"src": "5990:16:14"
									},
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5954:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "5946:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 936,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5946:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5973:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "5965:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 938,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5965:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5945:35:14"
									},
									"returnParameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "6016:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 943,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6016:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6015:6:14"
									},
									"scope": 1308,
									"src": "5928:94:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										90
									],
									"documentation": {
										"id": 947,
										"nodeType": "StructuredDocumentation",
										"src": "6028:288:14",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n         allowed to spend on behalf of `owner` through {transferFrom}. This is\n         zero by default.\n @notice This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "6330:9:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 954,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 953,
												"name": "IERC20",
												"nameLocations": [
													"6390:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "6390:6:14"
											}
										],
										"src": "6381:16:14"
									},
									"parameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6348:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "6340:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6340:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6363:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "6355:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6355:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6339:32:14"
									},
									"returnParameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 958,
												"src": "6412:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 955,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6412:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6411:9:14"
									},
									"scope": 1308,
									"src": "6321:100:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										100
									],
									"documentation": {
										"id": 959,
										"nodeType": "StructuredDocumentation",
										"src": "6427:668:14",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:note Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n @custom:emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 970,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "7109:7:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 966,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 965,
												"name": "IERC20",
												"nameLocations": [
													"7168:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "7168:6:14"
											}
										],
										"src": "7159:16:14"
									},
									"parameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7125:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "7117:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7117:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7142:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "7134:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7134:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7116:33:14"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "7185:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 967,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7185:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7184:6:14"
									},
									"scope": 1308,
									"src": "7100:91:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										112
									],
									"documentation": {
										"id": 971,
										"nodeType": "StructuredDocumentation",
										"src": "7197:336:14",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n         allowance mechanism. `amount` is then deducted from the caller's\n         allowance.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 984,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "7547:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 980,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 979,
												"name": "IERC20",
												"nameLocations": [
													"7629:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 113,
												"src": "7629:6:14"
											}
										],
										"src": "7620:16:14"
									},
									"parameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "7568:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "7560:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7560:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "7584:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "7576:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7576:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 977,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7603:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "7595:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 976,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7595:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7559:51:14"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "7646:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 981,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7646:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:6:14"
									},
									"scope": 1308,
									"src": "7538:114:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 985,
										"nodeType": "StructuredDocumentation",
										"src": "7658:392:14",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n @custom:emits an {Approval} event indicating the updated allowance.\n @custom:requirements\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 994,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "8064:17:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8090:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "8082:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8082:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "8107:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "8099:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8099:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8081:37:14"
									},
									"returnParameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "8137:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 991,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8137:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8136:6:14"
									},
									"scope": 1308,
									"src": "8055:88:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 995,
										"nodeType": "StructuredDocumentation",
										"src": "8149:484:14",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n @custom:emits an {Approval} event indicating the updated allowance.\n @custom:requirements\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1004,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "8648:17:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8674:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "8666:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 996,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8666:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "8691:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "8683:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 998,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8683:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8665:42:14"
									},
									"returnParameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1004,
												"src": "8726:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1001,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8726:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8725:6:14"
									},
									"scope": 1308,
									"src": "8639:93:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										345
									],
									"documentation": {
										"id": 1005,
										"nodeType": "StructuredDocumentation",
										"src": "8911:315:14",
										"text": " @dev Returns the smallest part of the token that is not divisible. This\n         means all token operations (creation, movement and destruction) must have\n         amounts that are a multiple of this number.\n @custom:note For super token contracts, this value is always 1"
									},
									"functionSelector": "556f0dc7",
									"id": 1012,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "granularity",
									"nameLocation": "9240:11:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1008,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1007,
												"name": "IERC777",
												"nameLocations": [
													"9277:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "9277:7:14"
											}
										],
										"src": "9268:17:14"
									},
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9251:2:14"
									},
									"returnParameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "9295:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9295:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9294:9:14"
									},
									"scope": 1308,
									"src": "9231:73:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										369
									],
									"documentation": {
										"id": 1013,
										"nodeType": "StructuredDocumentation",
										"src": "9310:613:14",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @dev If send or receive hooks are registered for the caller and `recipient`,\n      the corresponding functions will be called with `userData` and empty\n      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n @custom:emits a {Sent} event.\n @custom:requirements\n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "9bd9bbc6",
									"id": 1024,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "9937:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1022,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1021,
												"name": "IERC777",
												"nameLocations": [
													"10020:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "10020:7:14"
											}
										],
										"src": "10011:17:14"
									},
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "9950:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "9942:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1014,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9942:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9969:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "9961:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1016,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9961:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "9992:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1024,
												"src": "9977:23:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1018,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9977:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9941:60:14"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10028:0:14"
									},
									"scope": 1308,
									"src": "9928:101:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										377
									],
									"documentation": {
										"id": 1025,
										"nodeType": "StructuredDocumentation",
										"src": "10035:476:14",
										"text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply and transfers the underlying token to the caller's account.\n If a send hook is registered for the caller, the corresponding function\n will be called with `userData` and empty `operatorData`. See {IERC777Sender}.\n @custom:emits a {Burned} event.\n @custom:requirements\n - the caller must have at least `amount` tokens."
									},
									"functionSelector": "fe9d9303",
									"id": 1034,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "10525:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1032,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1031,
												"name": "IERC777",
												"nameLocations": [
													"10589:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "10589:7:14"
											}
										],
										"src": "10580:17:14"
									},
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10538:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "10530:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10530:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "10561:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "10546:23:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1028,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10546:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10529:41:14"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10597:0:14"
									},
									"scope": 1308,
									"src": "10516:82:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										387
									],
									"documentation": {
										"id": 1035,
										"nodeType": "StructuredDocumentation",
										"src": "10604:249:14",
										"text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
									},
									"functionSelector": "d95b6371",
									"id": 1046,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOperatorFor",
									"nameLocation": "10867:13:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1042,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1041,
												"name": "IERC777",
												"nameLocations": [
													"10938:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "10938:7:14"
											}
										],
										"src": "10929:17:14"
									},
									"parameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10889:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "10881:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1036,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10881:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "10907:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "10899:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1038,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10899:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10880:39:14"
									},
									"returnParameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "10961:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1043,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10961:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10960:6:14"
									},
									"scope": 1308,
									"src": "10858:109:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										393
									],
									"documentation": {
										"id": 1047,
										"nodeType": "StructuredDocumentation",
										"src": "10973:242:14",
										"text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n @custom:emits an {AuthorizedOperator} event.\n @custom:requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "959b8c3f",
									"id": 1054,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeOperator",
									"nameLocation": "11229:17:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1052,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1051,
												"name": "IERC777",
												"nameLocations": [
													"11283:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "11283:7:14"
											}
										],
										"src": "11274:17:14"
									},
									"parameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "11255:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "11247:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1048,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11247:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11246:18:14"
									},
									"returnParameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11291:0:14"
									},
									"scope": 1308,
									"src": "11220:72:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										399
									],
									"documentation": {
										"id": 1055,
										"nodeType": "StructuredDocumentation",
										"src": "11298:270:14",
										"text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n @custom:emits a {RevokedOperator} event.\n @custom:requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "fad8b32a",
									"id": 1062,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeOperator",
									"nameLocation": "11582:14:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1060,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1059,
												"name": "IERC777",
												"nameLocations": [
													"11633:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "11633:7:14"
											}
										],
										"src": "11624:17:14"
									},
									"parameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "11605:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "11597:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11597:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11596:18:14"
									},
									"returnParameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11641:0:14"
									},
									"scope": 1308,
									"src": "11573:69:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										406
									],
									"documentation": {
										"id": 1063,
										"nodeType": "StructuredDocumentation",
										"src": "11648:338:14",
										"text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
									},
									"functionSelector": "06e48538",
									"id": 1071,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultOperators",
									"nameLocation": "12000:16:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1066,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1065,
												"name": "IERC777",
												"nameLocations": [
													"12037:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "12037:7:14"
											}
										],
										"src": "12028:17:14"
									},
									"parameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12016:2:14"
									},
									"returnParameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1071,
												"src": "12060:16:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1067,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12060:7:14",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1068,
													"nodeType": "ArrayTypeName",
													"src": "12060:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12059:18:14"
									},
									"scope": 1308,
									"src": "11991:87:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										420
									],
									"documentation": {
										"id": 1072,
										"nodeType": "StructuredDocumentation",
										"src": "12084:727:14",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `userData` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n @custom:emits a {Sent} event.\n @custom:requirements\n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "62ad1b83",
									"id": 1087,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorSend",
									"nameLocation": "12825:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1085,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1084,
												"name": "IERC777",
												"nameLocations": [
													"13007:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "13007:7:14"
											}
										],
										"src": "12998:17:14"
									},
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12855:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "12847:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1073,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12847:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "12879:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "12871:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1075,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12871:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12906:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "12898:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1077,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12898:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "12937:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "12922:23:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1079,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12922:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "12970:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "12955:27:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1081,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12955:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12837:151:14"
									},
									"returnParameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13015:0:14"
									},
									"scope": 1308,
									"src": "12816:200:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										432
									],
									"documentation": {
										"id": 1088,
										"nodeType": "StructuredDocumentation",
										"src": "13022:545:14",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `userData` and `operatorData`. See {IERC777Sender}.\n @custom:emits a {Burned} event.\n @custom:requirements\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
									},
									"functionSelector": "fc673c4f",
									"id": 1101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorBurn",
									"nameLocation": "13581:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1099,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1098,
												"name": "IERC777",
												"nameLocations": [
													"13737:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 447,
												"src": "13737:7:14"
											}
										],
										"src": "13728:17:14"
									},
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13611:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "13603:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13603:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13636:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "13628:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1091,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13628:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "13667:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "13652:23:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1093,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13652:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "13700:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "13685:27:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1095,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13685:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13593:125:14"
									},
									"returnParameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13745:0:14"
									},
									"scope": 1308,
									"src": "13572:174:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1102,
										"nodeType": "StructuredDocumentation",
										"src": "13954:209:14",
										"text": " @dev Mint new tokens for the account\n If `userData` is not empty, the `tokensReceived` hook is invoked according to ERC777 semantics.\n @custom:modifiers\n  - onlySelf"
									},
									"functionSelector": "c68d4283",
									"id": 1111,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfMint",
									"nameLocation": "14177:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14203:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "14195:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14195:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14228:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "14220:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14220:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "14257:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "14244:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1107,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14244:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14185:86:14"
									},
									"returnParameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14280:0:14"
									},
									"scope": 1308,
									"src": "14168:113:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1112,
										"nodeType": "StructuredDocumentation",
										"src": "14286:206:14",
										"text": " @dev Burn existing tokens for the account\n If `userData` is not empty, the `tokensToSend` hook is invoked according to ERC777 semantics.\n @custom:modifiers\n  - onlySelf"
									},
									"functionSelector": "9d876741",
									"id": 1121,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfBurn",
									"nameLocation": "14505:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14530:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "14522:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14522:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14554:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "14546:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14546:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "14582:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "14569:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1117,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14569:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14513:82:14"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14604:0:14"
									},
									"scope": 1308,
									"src": "14496:109:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1122,
										"nodeType": "StructuredDocumentation",
										"src": "14610:244:14",
										"text": " @dev Transfer `amount` tokens from the `sender` to `recipient`.\n If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n spend tokens of `sender`.\n @custom:modifiers\n  - onlySelf"
									},
									"functionSelector": "41b706be",
									"id": 1133,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfTransferFrom",
									"nameLocation": "14867:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "14901:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "14893:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14893:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "14925:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "14917:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14917:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "14950:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "14942:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14942:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14977:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "14969:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14969:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14883:105:14"
									},
									"returnParameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14997:0:14"
									},
									"scope": 1308,
									"src": "14858:140:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1134,
										"nodeType": "StructuredDocumentation",
										"src": "15003:144:14",
										"text": " @dev Give `spender`, `amount` allowance to spend the tokens of\n `account`.\n @custom:modifiers\n  - onlySelf"
									},
									"functionSelector": "66a12fb6",
									"id": 1143,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfApproveFor",
									"nameLocation": "15160:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "15192:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "15184:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15184:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "15217:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "15209:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15209:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15242:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1143,
												"src": "15234:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15234:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15174:79:14"
									},
									"returnParameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15262:0:14"
									},
									"scope": 1308,
									"src": "15151:112:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1144,
										"nodeType": "StructuredDocumentation",
										"src": "15464:87:14",
										"text": " @dev Transfer all available balance from `msg.sender` to `recipient`"
									},
									"functionSelector": "a3a7e7f3",
									"id": 1149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAll",
									"nameLocation": "15565:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "15585:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "15577:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1145,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15577:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15576:19:14"
									},
									"returnParameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15604:0:14"
									},
									"scope": 1308,
									"src": "15556:49:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1150,
										"nodeType": "StructuredDocumentation",
										"src": "15794:110:14",
										"text": " @dev Return the underlying token contract\n @return tokenAddr Underlying token address"
									},
									"functionSelector": "ee719bc8",
									"id": 1155,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUnderlyingToken",
									"nameLocation": "15918:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15936:2:14"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "tokenAddr",
												"nameLocation": "15969:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "15961:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15961:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15960:19:14"
									},
									"scope": 1308,
									"src": "15909:71:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1156,
										"nodeType": "StructuredDocumentation",
										"src": "15986:120:14",
										"text": " @dev Return the underlying token decimals\n @return underlyingDecimals Underlying token decimals"
									},
									"functionSelector": "92081a47",
									"id": 1161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUnderlyingDecimals",
									"nameLocation": "16120:21:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16141:2:14"
									},
									"returnParameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "16173:18:14",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "16167:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1158,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "16167:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16166:26:14"
									},
									"scope": 1308,
									"src": "16111:82:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1162,
										"nodeType": "StructuredDocumentation",
										"src": "16199:278:14",
										"text": " @dev Return the underlying token conversion rate\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @return underlyingAmount The underlying token amount after scaling\n @return adjustedAmount The super token amount after scaling"
									},
									"functionSelector": "282a050b",
									"id": 1171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "toUnderlyingAmount",
									"nameLocation": "16491:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16518:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "16510:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16510:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16509:16:14"
									},
									"returnParameters": {
										"id": 1170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "underlyingAmount",
												"nameLocation": "16581:16:14",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "16573:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1166,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16573:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "adjustedAmount",
												"nameLocation": "16607:14:14",
												"nodeType": "VariableDeclaration",
												"scope": 1171,
												"src": "16599:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16599:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16572:50:14"
									},
									"scope": 1308,
									"src": "16482:141:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1172,
										"nodeType": "StructuredDocumentation",
										"src": "16629:262:14",
										"text": " @dev Upgrade ERC20 to SuperToken.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @custom:note It will use `transferFrom` to get tokens. Before calling this\n function you should `approve` this contract"
									},
									"functionSelector": "45977d03",
									"id": 1177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "upgrade",
									"nameLocation": "16905:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16921:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1177,
												"src": "16913:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16913:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16912:16:14"
									},
									"returnParameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16937:0:14"
									},
									"scope": 1308,
									"src": "16896:42:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1178,
										"nodeType": "StructuredDocumentation",
										"src": "16944:694:14",
										"text": " @dev Upgrade ERC20 to SuperToken and transfer immediately\n @param to The account to receive upgraded tokens\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @param userData User data for the TokensRecipient callback\n @custom:note It will use `transferFrom` to get tokens. Before calling this\n function you should `approve` this contract\n @custom:warning\n - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n @custom:requirements\n - if `userData` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient\n   otherwise it reverts."
									},
									"functionSelector": "5b9d09cc",
									"id": 1187,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "upgradeTo",
									"nameLocation": "17652:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "17670:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "17662:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17662:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1182,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "17682:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "17674:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17674:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1184,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "17705:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "17690:23:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1183,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17690:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17661:53:14"
									},
									"returnParameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17723:0:14"
									},
									"scope": 1308,
									"src": "17643:81:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1188,
										"nodeType": "StructuredDocumentation",
										"src": "17730:166:14",
										"text": " @dev Token upgrade event\n @param account Account where tokens are upgraded to\n @param amount Amount of tokens upgraded (in 18 decimals)"
									},
									"eventSelector": "25ca84076773b0455db53621c459ddc84fe40840e4932a62706a032566f399df",
									"id": 1194,
									"name": "TokenUpgraded",
									"nameLocation": "17907:13:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1190,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17946:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1194,
												"src": "17930:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17930:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1192,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "17971:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1194,
												"src": "17963:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17963:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17920:63:14"
									},
									"src": "17901:83:14"
								},
								{
									"documentation": {
										"id": 1195,
										"nodeType": "StructuredDocumentation",
										"src": "17990:158:14",
										"text": " @dev Downgrade SuperToken to ERC20.\n @dev It will call transfer to send tokens\n @param amount Number of tokens to be downgraded"
									},
									"functionSelector": "11bcc81e",
									"id": 1200,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "downgrade",
									"nameLocation": "18162:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18180:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1200,
												"src": "18172:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18172:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18171:16:14"
									},
									"returnParameters": {
										"id": 1199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18196:0:14"
									},
									"scope": 1308,
									"src": "18153:44:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1201,
										"nodeType": "StructuredDocumentation",
										"src": "18203:208:14",
										"text": " @dev Downgrade SuperToken to ERC20 and transfer immediately\n @param to The account to receive downgraded tokens\n @param amount Number of tokens to be downgraded (in 18 decimals)"
									},
									"functionSelector": "83ba2525",
									"id": 1208,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "downgradeTo",
									"nameLocation": "18425:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "18445:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "18437:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18437:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18457:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "18449:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18449:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18436:28:14"
									},
									"returnParameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18473:0:14"
									},
									"scope": 1308,
									"src": "18416:58:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1209,
										"nodeType": "StructuredDocumentation",
										"src": "18480:152:14",
										"text": " @dev Token downgrade event\n @param account Account whose tokens are downgraded\n @param amount Amount of tokens downgraded"
									},
									"eventSelector": "3bc27981aebbb57f9247dc00fde9d6cd91e4b230083fec3238fedbcba1f9ab3d",
									"id": 1215,
									"name": "TokenDowngraded",
									"nameLocation": "18643:15:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18684:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "18668:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18668:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1213,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18709:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "18701:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18701:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18658:63:14"
									},
									"src": "18637:85:14"
								},
								{
									"documentation": {
										"id": 1216,
										"nodeType": "StructuredDocumentation",
										"src": "18911:276:14",
										"text": " @dev Perform ERC20 approve by host contract.\n @param account The account owner to be approved.\n @param spender The spender of account owner's funds.\n @param amount Number of tokens to be approved.\n @custom:modifiers\n  - onlyHost"
									},
									"functionSelector": "62aa5287",
									"id": 1225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationApprove",
									"nameLocation": "19201:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "19235:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "19227:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19227:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "19260:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "19252:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19252:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1222,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "19285:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "19277:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19277:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19217:80:14"
									},
									"returnParameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19306:0:14"
									},
									"scope": 1308,
									"src": "19192:115:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4b2763b3",
									"id": 1234,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationIncreaseAllowance",
									"nameLocation": "19322:26:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "19366:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "19358:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19358:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "19391:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "19383:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19383:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "19416:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "19408:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19408:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19348:84:14"
									},
									"returnParameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19441:0:14"
									},
									"scope": 1308,
									"src": "19313:129:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c780fd82",
									"id": 1243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationDecreaseAllowance",
									"nameLocation": "19457:26:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1236,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "19501:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "19493:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19493:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "19526:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "19518:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1237,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19518:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "19551:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1243,
												"src": "19543:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19543:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19483:89:14"
									},
									"returnParameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19581:0:14"
									},
									"scope": 1308,
									"src": "19448:134:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1244,
										"nodeType": "StructuredDocumentation",
										"src": "19588:342:14",
										"text": " @dev Perform ERC20 transferFrom by host contract.\n @param account The account to spend sender's funds.\n @param spender The account where the funds is sent from.\n @param recipient The recipient of the funds.\n @param amount Number of tokens to be transferred.\n @custom:modifiers\n  - onlyHost"
									},
									"functionSelector": "16d055d6",
									"id": 1255,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationTransferFrom",
									"nameLocation": "19944:21:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "19983:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "19975:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19975:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "20008:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "20000:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20000:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "20033:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "20025:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20025:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1252,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "20060:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "20052:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20052:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19965:107:14"
									},
									"returnParameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20081:0:14"
									},
									"scope": 1308,
									"src": "19935:147:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "20088:328:14",
										"text": " @dev Perform ERC777 send by host contract.\n @param spender The account where the funds is sent from.\n @param recipient The recipient of the funds.\n @param amount Number of tokens to be transferred.\n @param userData Arbitrary user inputted data\n @custom:modifiers\n  - onlyHost"
									},
									"functionSelector": "ca0c1e7f",
									"id": 1267,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationSend",
									"nameLocation": "20430:13:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "20461:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "20453:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20453:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "20486:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "20478:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20478:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "20513:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "20505:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20505:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "20542:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "20529:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1263,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "20529:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20443:113:14"
									},
									"returnParameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20565:0:14"
									},
									"scope": 1308,
									"src": "20421:145:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1268,
										"nodeType": "StructuredDocumentation",
										"src": "20572:232:14",
										"text": " @dev Upgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @custom:modifiers\n  - onlyHost"
									},
									"functionSelector": "ca789464",
									"id": 1275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationUpgrade",
									"nameLocation": "20818:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1270,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "20843:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "20835:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1269,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20835:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1272,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "20860:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "20852:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20852:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20834:33:14"
									},
									"returnParameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20876:0:14"
									},
									"scope": 1308,
									"src": "20809:68:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1276,
										"nodeType": "StructuredDocumentation",
										"src": "20883:236:14",
										"text": " @dev Downgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be downgraded (in 18 decimals)\n @custom:modifiers\n  - onlyHost"
									},
									"functionSelector": "245887fc",
									"id": 1283,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationDowngrade",
									"nameLocation": "21133:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1278,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "21160:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "21152:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1277,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21152:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "21177:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "21169:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21169:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21151:33:14"
									},
									"returnParameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21193:0:14"
									},
									"scope": 1308,
									"src": "21124:70:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1284,
										"nodeType": "StructuredDocumentation",
										"src": "21223:126:14",
										"text": " @dev Constant Outflow NFT proxy created event\n @param constantOutflowNFT constant outflow nft address"
									},
									"eventSelector": "cf554eb342edf010a94e07701ae91e99e90b769f649f03aeb1153654ddd43c01",
									"id": 1289,
									"name": "ConstantOutflowNFTCreated",
									"nameLocation": "21360:25:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1287,
												"indexed": true,
												"mutability": "mutable",
												"name": "constantOutflowNFT",
												"nameLocation": "21423:18:14",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "21395:46:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantOutflowNFT_$665",
													"typeString": "contract IConstantOutflowNFT"
												},
												"typeName": {
													"id": 1286,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1285,
														"name": "IConstantOutflowNFT",
														"nameLocations": [
															"21395:19:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 665,
														"src": "21395:19:14"
													},
													"referencedDeclaration": 665,
													"src": "21395:19:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantOutflowNFT_$665",
														"typeString": "contract IConstantOutflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21385:62:14"
									},
									"src": "21354:94:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1290,
										"nodeType": "StructuredDocumentation",
										"src": "21454:123:14",
										"text": " @dev Constant Inflow NFT proxy created event\n @param constantInflowNFT constant inflow nft address"
									},
									"eventSelector": "8837af285f4d380af9227df9ebafa13d992b487fa6d7a4366bd4154576085b89",
									"id": 1295,
									"name": "ConstantInflowNFTCreated",
									"nameLocation": "21588:24:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"indexed": true,
												"mutability": "mutable",
												"name": "constantInflowNFT",
												"nameLocation": "21649:17:14",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "21622:44:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantInflowNFT_$611",
													"typeString": "contract IConstantInflowNFT"
												},
												"typeName": {
													"id": 1292,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1291,
														"name": "IConstantInflowNFT",
														"nameLocations": [
															"21622:18:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 611,
														"src": "21622:18:14"
													},
													"referencedDeclaration": 611,
													"src": "21622:18:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantInflowNFT_$611",
														"typeString": "contract IConstantInflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21612:60:14"
									},
									"src": "21582:91:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1296,
										"nodeType": "StructuredDocumentation",
										"src": "21679:108:14",
										"text": " @dev Pool Admin NFT proxy created event\n @param poolAdminNFT pool admin nft address"
									},
									"eventSelector": "eb87fb34067547f3dc0b85096c3da73c99d4fbb08ff41212b8d7c0b5008b42e6",
									"id": 1301,
									"name": "PoolAdminNFTCreated",
									"nameLocation": "21798:19:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolAdminNFT",
												"nameLocation": "21849:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1301,
												"src": "21827:34:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IPoolAdminNFT_$485",
													"typeString": "contract IPoolAdminNFT"
												},
												"typeName": {
													"id": 1298,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1297,
														"name": "IPoolAdminNFT",
														"nameLocations": [
															"21827:13:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 485,
														"src": "21827:13:14"
													},
													"referencedDeclaration": 485,
													"src": "21827:13:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPoolAdminNFT_$485",
														"typeString": "contract IPoolAdminNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21817:50:14"
									},
									"src": "21792:76:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1302,
										"nodeType": "StructuredDocumentation",
										"src": "21874:111:14",
										"text": " @dev Pool Member NFT proxy created event\n @param poolMemberNFT pool member nft address"
									},
									"eventSelector": "c1050c54a299c837fe281a2623c29ec8e34b455daef48760b6a29f4b6cc99060",
									"id": 1307,
									"name": "PoolMemberNFTCreated",
									"nameLocation": "21996:20:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolMemberNFT",
												"nameLocation": "22049:13:14",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "22026:36:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IPoolMemberNFT_$538",
													"typeString": "contract IPoolMemberNFT"
												},
												"typeName": {
													"id": 1304,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1303,
														"name": "IPoolMemberNFT",
														"nameLocations": [
															"22026:14:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 538,
														"src": "22026:14:14"
													},
													"referencedDeclaration": 538,
													"src": "22026:14:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPoolMemberNFT_$538",
														"typeString": "contract IPoolMemberNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22016:52:14"
									},
									"src": "21990:79:14"
								}
							],
							"scope": 1309,
							"src": "674:21924:14",
							"usedErrors": [
								792,
								794,
								796,
								798,
								800,
								802,
								804,
								806,
								808,
								810,
								812,
								814,
								816,
								818,
								1485,
								1487,
								1489,
								1491,
								1493,
								1495
							],
							"usedEvents": [
								47,
								56,
								300,
								313,
								320,
								327,
								446,
								858,
								1194,
								1215,
								1289,
								1295,
								1301,
								1307,
								1600,
								1632,
								1647,
								1667,
								1727,
								1740,
								1747,
								1764
							]
						}
					],
					"src": "32:22567:14"
				},
				"id": 14
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
					"exportedSymbols": {
						"IERC20Metadata": [
							139
						],
						"ISuperToken": [
							1308
						],
						"ISuperTokenFactory": [
							1478
						]
					},
					"id": 1479,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1310,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:26:15"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"id": 1312,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1479,
							"sourceUnit": 140,
							"src": "60:99:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1311,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 139,
										"src": "69:14:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 1314,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1479,
							"sourceUnit": 1309,
							"src": "160:48:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1313,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1308,
										"src": "169:11:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperTokenFactory",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1315,
								"nodeType": "StructuredDocumentation",
								"src": "209:69:15",
								"text": " @title Super token factory interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 1478,
							"linearizedBaseContracts": [
								1478
							],
							"name": "ISuperTokenFactory",
							"nameLocation": "289:18:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "91d67972",
									"id": 1317,
									"name": "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
									"nameLocation": "495:34:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "529:2:15"
									},
									"src": "489:43:15"
								},
								{
									"errorSelector": "872cac48",
									"id": 1319,
									"name": "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
									"nameLocation": "573:34:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "607:2:15"
									},
									"src": "567:43:15"
								},
								{
									"errorSelector": "1b39b9b4",
									"id": 1321,
									"name": "SUPER_TOKEN_FACTORY_UNINITIALIZED",
									"nameLocation": "651:33:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "684:2:15"
									},
									"src": "645:42:15"
								},
								{
									"errorSelector": "478b8e83",
									"id": 1323,
									"name": "SUPER_TOKEN_FACTORY_ONLY_HOST",
									"nameLocation": "729:29:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "758:2:15"
									},
									"src": "723:38:15"
								},
								{
									"errorSelector": "c4901a43",
									"id": 1325,
									"name": "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
									"nameLocation": "807:49:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "856:2:15"
									},
									"src": "801:58:15"
								},
								{
									"errorSelector": "305c9e82",
									"id": 1327,
									"name": "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
									"nameLocation": "885:32:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "917:2:15"
									},
									"src": "879:41:15"
								},
								{
									"documentation": {
										"id": 1328,
										"nodeType": "StructuredDocumentation",
										"src": "958:60:15",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 1333,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1032:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1039:2:15"
									},
									"returnParameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1072:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1333,
												"src": "1064:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1064:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1063:14:15"
									},
									"scope": 1478,
									"src": "1023:55:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1334,
										"nodeType": "StructuredDocumentation",
										"src": "1084:32:15",
										"text": "@dev Initialize the contract"
									},
									"functionSelector": "8129fc1c",
									"id": 1337,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "1130:10:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1140:2:15"
									},
									"returnParameters": {
										"id": 1336,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1151:0:15"
									},
									"scope": 1478,
									"src": "1121:31:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1338,
										"nodeType": "StructuredDocumentation",
										"src": "1158:63:15",
										"text": " @notice Get the canonical super token logic."
									},
									"functionSelector": "9470a5b2",
									"id": 1344,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenLogic",
									"nameLocation": "1235:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1339,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1253:2:15"
									},
									"returnParameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1291:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "1279:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1341,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1340,
														"name": "ISuperToken",
														"nameLocations": [
															"1279:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "1279:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "1279:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1278:24:15"
									},
									"scope": 1478,
									"src": "1226:77:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperTokenFactory.Upgradability",
									"documentation": {
										"id": 1345,
										"nodeType": "StructuredDocumentation",
										"src": "1309:43:15",
										"text": " @dev Upgradability modes"
									},
									"id": 1349,
									"members": [
										{
											"id": 1346,
											"name": "NON_UPGRADABLE",
											"nameLocation": "1467:14:15",
											"nodeType": "EnumValue",
											"src": "1467:14:15"
										},
										{
											"id": 1347,
											"name": "SEMI_UPGRADABLE",
											"nameLocation": "1561:15:15",
											"nodeType": "EnumValue",
											"src": "1561:15:15"
										},
										{
											"id": 1348,
											"name": "FULL_UPGRADABLE",
											"nameLocation": "1640:15:15",
											"nodeType": "EnumValue",
											"src": "1640:15:15"
										}
									],
									"name": "Upgradability",
									"nameLocation": "1362:13:15",
									"nodeType": "EnumDefinition",
									"src": "1357:304:15"
								},
								{
									"documentation": {
										"id": 1350,
										"nodeType": "StructuredDocumentation",
										"src": "1667:432:15",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token\n @param underlyingToken Underlying ERC20 token\n @param underlyingDecimals Underlying token decimals\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @param admin Admin address\n @return superToken The deployed and initialized wrapper super token"
									},
									"functionSelector": "e094be24",
									"id": 1370,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "2113:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2156:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "2141:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Metadata_$139",
													"typeString": "contract IERC20Metadata"
												},
												"typeName": {
													"id": 1352,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1351,
														"name": "IERC20Metadata",
														"nameLocations": [
															"2141:14:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 139,
														"src": "2141:14:15"
													},
													"referencedDeclaration": 139,
													"src": "2141:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Metadata_$139",
														"typeString": "contract IERC20Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2187:18:15",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "2181:24:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1354,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2181:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1358,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "2229:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "2215:27:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$1349",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 1357,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1356,
														"name": "Upgradability",
														"nameLocations": [
															"2215:13:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1349,
														"src": "2215:13:15"
													},
													"referencedDeclaration": 1349,
													"src": "2215:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$1349",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1360,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "2268:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "2252:20:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1359,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2252:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "2298:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "2282:22:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1361,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2282:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "2322:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "2314:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2314:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2131:202:15"
									},
									"returnParameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2380:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "2368:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1367,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1366,
														"name": "ISuperToken",
														"nameLocations": [
															"2368:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "2368:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "2368:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2367:24:15"
									},
									"scope": 1478,
									"src": "2104:288:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1371,
										"nodeType": "StructuredDocumentation",
										"src": "2398:398:15",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token\n @param underlyingToken Underlying ERC20 token\n @param underlyingDecimals Underlying token decimals\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @return superToken The deployed and initialized wrapper super token"
									},
									"functionSelector": "a6d0c534",
									"id": 1389,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "2810:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2853:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "2838:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Metadata_$139",
													"typeString": "contract IERC20Metadata"
												},
												"typeName": {
													"id": 1373,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1372,
														"name": "IERC20Metadata",
														"nameLocations": [
															"2838:14:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 139,
														"src": "2838:14:15"
													},
													"referencedDeclaration": 139,
													"src": "2838:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Metadata_$139",
														"typeString": "contract IERC20Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2884:18:15",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "2878:24:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1375,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2878:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1379,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "2926:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "2912:27:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$1349",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 1378,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1377,
														"name": "Upgradability",
														"nameLocations": [
															"2912:13:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1349,
														"src": "2912:13:15"
													},
													"referencedDeclaration": 1349,
													"src": "2912:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$1349",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "2965:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "2949:20:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1380,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2949:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "2995:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "2979:22:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1382,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2979:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2828:179:15"
									},
									"returnParameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "3054:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "3042:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1386,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1385,
														"name": "ISuperToken",
														"nameLocations": [
															"3042:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "3042:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "3042:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3041:24:15"
									},
									"scope": 1478,
									"src": "2801:265:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1390,
										"nodeType": "StructuredDocumentation",
										"src": "3072:373:15",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token\n @param underlyingToken Underlying ERC20 token\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @param admin Admin address\n @return superToken The deployed and initialized wrapper super token"
									},
									"functionSelector": "6c684bb0",
									"id": 1408,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "3459:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1393,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "3502:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "3487:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Metadata_$139",
													"typeString": "contract IERC20Metadata"
												},
												"typeName": {
													"id": 1392,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1391,
														"name": "IERC20Metadata",
														"nameLocations": [
															"3487:14:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 139,
														"src": "3487:14:15"
													},
													"referencedDeclaration": 139,
													"src": "3487:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Metadata_$139",
														"typeString": "contract IERC20Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1396,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "3541:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "3527:27:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$1349",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 1395,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1394,
														"name": "Upgradability",
														"nameLocations": [
															"3527:13:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1349,
														"src": "3527:13:15"
													},
													"referencedDeclaration": 1349,
													"src": "3527:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$1349",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3580:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "3564:20:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1397,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3564:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "3610:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "3594:22:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1399,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3594:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1402,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "3634:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "3626:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1401,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3626:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3477:168:15"
									},
									"returnParameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "3692:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "3680:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1405,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1404,
														"name": "ISuperToken",
														"nameLocations": [
															"3680:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "3680:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "3680:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3679:24:15"
									},
									"scope": 1478,
									"src": "3450:254:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1409,
										"nodeType": "StructuredDocumentation",
										"src": "3710:433:15",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n @param underlyingToken Underlying ERC20 token\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @return superToken The deployed and initialized wrapper super token\n NOTE:\n - It assumes token provide the .decimals() function"
									},
									"functionSelector": "431f1481",
									"id": 1425,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "4157:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1412,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "4200:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4185:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Metadata_$139",
													"typeString": "contract IERC20Metadata"
												},
												"typeName": {
													"id": 1411,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1410,
														"name": "IERC20Metadata",
														"nameLocations": [
															"4185:14:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 139,
														"src": "4185:14:15"
													},
													"referencedDeclaration": 139,
													"src": "4185:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Metadata_$139",
														"typeString": "contract IERC20Metadata"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1415,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "4239:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4225:27:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$1349",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 1414,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1413,
														"name": "Upgradability",
														"nameLocations": [
															"4225:13:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1349,
														"src": "4225:13:15"
													},
													"referencedDeclaration": 1349,
													"src": "4225:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$1349",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1417,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "4278:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4262:20:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1416,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4262:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1419,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "4308:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4292:22:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1418,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4292:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4175:145:15"
									},
									"returnParameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "4367:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "4355:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1422,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1421,
														"name": "ISuperToken",
														"nameLocations": [
															"4355:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "4355:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "4355:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4354:24:15"
									},
									"scope": 1478,
									"src": "4148:231:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "4385:318:15",
										"text": " @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n @param _underlyingToken Underlying ERC20 token\n @return ISuperToken the created supertoken"
									},
									"functionSelector": "151188dc",
									"id": 1435,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createCanonicalERC20Wrapper",
									"nameLocation": "4717:27:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1429,
												"mutability": "mutable",
												"name": "_underlyingToken",
												"nameLocation": "4760:16:15",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "4745:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Metadata_$139",
													"typeString": "contract IERC20Metadata"
												},
												"typeName": {
													"id": 1428,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1427,
														"name": "IERC20Metadata",
														"nameLocations": [
															"4745:14:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 139,
														"src": "4745:14:15"
													},
													"referencedDeclaration": 139,
													"src": "4745:14:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Metadata_$139",
														"typeString": "contract IERC20Metadata"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4744:33:15"
									},
									"returnParameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "4812:11:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1432,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1431,
														"name": "ISuperToken",
														"nameLocations": [
															"4812:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "4812:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "4812:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4811:13:15"
									},
									"scope": 1478,
									"src": "4708:117:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1436,
										"nodeType": "StructuredDocumentation",
										"src": "4831:502:15",
										"text": " @notice Computes/Retrieves wrapper super token address given the underlying token address\n @dev We return from our canonical list if it already exists, otherwise we compute it\n @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n @param _underlyingToken Underlying ERC20 token address\n @return superTokenAddress Super token address\n @return isDeployed whether the super token is deployed AND set in the canonical mapping"
									},
									"functionSelector": "bab74c89",
									"id": 1445,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "computeCanonicalERC20WrapperAddress",
									"nameLocation": "5347:35:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "_underlyingToken",
												"nameLocation": "5391:16:15",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "5383:24:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1437,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5383:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5382:26:15"
									},
									"returnParameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "superTokenAddress",
												"nameLocation": "5464:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "5456:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5456:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "isDeployed",
												"nameLocation": "5488:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 1445,
												"src": "5483:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1442,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5483:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5455:44:15"
									},
									"scope": 1478,
									"src": "5338:162:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1446,
										"nodeType": "StructuredDocumentation",
										"src": "5506:314:15",
										"text": " @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n @dev We return the address if it exists and the zero address otherwise\n @param _underlyingTokenAddress Underlying ERC20 token address\n @return superTokenAddress Super token address"
									},
									"functionSelector": "eff0a89d",
									"id": 1453,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getCanonicalERC20Wrapper",
									"nameLocation": "5834:24:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "_underlyingTokenAddress",
												"nameLocation": "5867:23:15",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "5859:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5859:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5858:33:15"
									},
									"returnParameters": {
										"id": 1452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "superTokenAddress",
												"nameLocation": "5947:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "5939:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5939:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5938:27:15"
									},
									"scope": 1478,
									"src": "5825:141:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1454,
										"nodeType": "StructuredDocumentation",
										"src": "5972:131:15",
										"text": " @dev Creates a new custom super token\n @param customSuperTokenProxy address of the custom supertoken proxy"
									},
									"functionSelector": "d412d344",
									"id": 1459,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initializeCustomSuperToken",
									"nameLocation": "6117:26:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "customSuperTokenProxy",
												"nameLocation": "6161:21:15",
												"nodeType": "VariableDeclaration",
												"scope": 1459,
												"src": "6153:29:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1455,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6143:45:15"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6205:0:15"
									},
									"scope": 1478,
									"src": "6108:98:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1460,
										"nodeType": "StructuredDocumentation",
										"src": "6212:103:15",
										"text": " @dev Super token logic created event\n @param tokenLogic Token logic address"
									},
									"eventSelector": "c13fb19d60857980e565bf5dae406b8802d3c1cec50c6156b30b12b874029783",
									"id": 1465,
									"name": "SuperTokenLogicCreated",
									"nameLocation": "6326:22:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1463,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenLogic",
												"nameLocation": "6369:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "6349:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1462,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1461,
														"name": "ISuperToken",
														"nameLocations": [
															"6349:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "6349:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "6349:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6348:32:15"
									},
									"src": "6320:61:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1466,
										"nodeType": "StructuredDocumentation",
										"src": "6387:106:15",
										"text": " @dev Super token created event\n @param token Newly created super token address"
									},
									"eventSelector": "b52c6d9d122e8c07769b96d7bb14e66db58ee03fdebaaa2f92547e9c7ef0e65f",
									"id": 1471,
									"name": "SuperTokenCreated",
									"nameLocation": "6504:17:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1469,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6542:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1471,
												"src": "6522:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1468,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1467,
														"name": "ISuperToken",
														"nameLocations": [
															"6522:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "6522:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "6522:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6521:27:15"
									},
									"src": "6498:51:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1472,
										"nodeType": "StructuredDocumentation",
										"src": "6555:120:15",
										"text": " @dev Custom super token created event\n @param token Newly created custom super token address"
									},
									"eventSelector": "437790724a6e97b75d23117f28cdd4b1beeafc34f7a0911ef256e9334f4369a5",
									"id": 1477,
									"name": "CustomSuperTokenCreated",
									"nameLocation": "6686:23:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6730:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1477,
												"src": "6710:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$1308",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1474,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1473,
														"name": "ISuperToken",
														"nameLocations": [
															"6710:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1308,
														"src": "6710:11:15"
													},
													"referencedDeclaration": 1308,
													"src": "6710:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$1308",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6709:27:15"
									},
									"src": "6680:57:15"
								}
							],
							"scope": 1479,
							"src": "279:6461:15",
							"usedErrors": [
								1317,
								1319,
								1321,
								1323,
								1325,
								1327
							],
							"usedEvents": [
								1465,
								1471,
								1477
							]
						}
					],
					"src": "32:6708:15"
				},
				"id": 15
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							766
						],
						"ISuperfluidToken": [
							1765
						]
					},
					"id": 1766,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1480,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "32:26:16"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 1482,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1766,
							"sourceUnit": 767,
							"src": "60:56:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1481,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 766,
										"src": "69:15:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluidToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1483,
								"nodeType": "StructuredDocumentation",
								"src": "118:66:16",
								"text": " @title Superfluid token interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 1765,
							"linearizedBaseContracts": [
								1765
							],
							"name": "ISuperfluidToken",
							"nameLocation": "195:16:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "f05521f6",
									"id": 1485,
									"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
									"nameLocation": "399:33:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "432:2:16"
									},
									"src": "393:42:16"
								},
								{
									"errorSelector": "dae18809",
									"id": 1487,
									"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
									"nameLocation": "461:33:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "494:2:16"
									},
									"src": "455:42:16"
								},
								{
									"errorSelector": "10ecdf44",
									"id": 1489,
									"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
									"nameLocation": "523:34:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1488,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "557:2:16"
									},
									"src": "517:43:16"
								},
								{
									"errorSelector": "2f4cb941",
									"id": 1491,
									"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
									"nameLocation": "585:34:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1490,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "619:2:16"
									},
									"src": "579:43:16"
								},
								{
									"errorSelector": "c9ff6644",
									"id": 1493,
									"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
									"nameLocation": "647:30:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "677:2:16"
									},
									"src": "641:39:16"
								},
								{
									"errorSelector": "c51efddd",
									"id": 1495,
									"name": "SF_TOKEN_ONLY_HOST",
									"nameLocation": "709:18:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1494,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "727:2:16"
									},
									"src": "703:27:16"
								},
								{
									"documentation": {
										"id": 1496,
										"nodeType": "StructuredDocumentation",
										"src": "952:60:16",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 1501,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1026:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1497,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1033:2:16"
									},
									"returnParameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1066:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1501,
												"src": "1058:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1498,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1058:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1057:14:16"
									},
									"scope": 1765,
									"src": "1017:55:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluidToken.LiquidationTypeData",
									"documentation": {
										"id": 1502,
										"nodeType": "StructuredDocumentation",
										"src": "1078:377:16",
										"text": " @dev Encoded liquidation type data mainly used for handling stack to deep errors\n @custom:note \n - version: 1\n - liquidationType key:\n    - 0 = reward account receives reward (PIC period)\n    - 1 = liquidator account receives reward (Pleb period)\n    - 2 = liquidator account receives reward (Pirate period/bailout)"
									},
									"id": 1507,
									"members": [
										{
											"constant": false,
											"id": 1504,
											"mutability": "mutable",
											"name": "version",
											"nameLocation": "1505:7:16",
											"nodeType": "VariableDeclaration",
											"scope": 1507,
											"src": "1497:15:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1503,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1497:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1506,
											"mutability": "mutable",
											"name": "liquidationType",
											"nameLocation": "1528:15:16",
											"nodeType": "VariableDeclaration",
											"scope": 1507,
											"src": "1522:21:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 1505,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1522:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "LiquidationTypeData",
									"nameLocation": "1467:19:16",
									"nodeType": "StructDefinition",
									"scope": 1765,
									"src": "1460:90:16",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1508,
										"nodeType": "StructuredDocumentation",
										"src": "1752:321:16",
										"text": " @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n @param account for the query\n @param timestamp Time of balance\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "eb3537cc",
									"id": 1521,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "2087:17:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1510,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2121:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "2113:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2113:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2145:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "2137:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2137:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2104:56:16"
									},
									"returnParameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1515,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2220:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "2213:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1514,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2213:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2258:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "2250:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2250:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2287:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "2279:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1518,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2279:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2199:100:16"
									},
									"scope": 1765,
									"src": "2078:222:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1522,
										"nodeType": "StructuredDocumentation",
										"src": "2306:339:16",
										"text": " @notice Calculate the realtime balance given the current host.getNow() value\n @dev realtimeBalanceOf with timestamp equals to block timestamp\n @param account for the query\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "2ec8eec7",
									"id": 1535,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOfNow",
									"nameLocation": "2659:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1524,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2696:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1535,
												"src": "2688:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1523,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2688:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2679:30:16"
									},
									"returnParameters": {
										"id": 1534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2769:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 1535,
												"src": "2762:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1526,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2762:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2807:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1535,
												"src": "2799:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2836:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1535,
												"src": "2828:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2828:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2869:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1535,
												"src": "2861:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1532,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2861:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2748:131:16"
									},
									"scope": 1765,
									"src": "2650:230:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1536,
										"nodeType": "StructuredDocumentation",
										"src": "2886:309:16",
										"text": " @notice Check if account is critical\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @param timestamp The time we'd like to check if the account is critical (should use future)\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "d9d078d6",
									"id": 1545,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCritical",
									"nameLocation": "3209:17:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3244:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1545,
												"src": "3236:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3236:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1540,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3269:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1545,
												"src": "3261:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1539,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3261:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3226:58:16"
									},
									"returnParameters": {
										"id": 1544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1543,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3328:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1545,
												"src": "3323:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1542,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3323:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3322:17:16"
									},
									"scope": 1765,
									"src": "3200:140:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1546,
										"nodeType": "StructuredDocumentation",
										"src": "3346:239:16",
										"text": " @notice Check if account is critical now (current host.getNow())\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "79359f6f",
									"id": 1553,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCriticalNow",
									"nameLocation": "3599:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1548,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3637:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "3629:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1547,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3629:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3619:31:16"
									},
									"returnParameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3694:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1553,
												"src": "3689:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1550,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3689:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3688:17:16"
									},
									"scope": 1765,
									"src": "3590:116:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1554,
										"nodeType": "StructuredDocumentation",
										"src": "3712:383:16",
										"text": " @notice Check if account is solvent\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @param timestamp The time we'd like to check if the account is solvent (should use future)\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "b84cdd4a",
									"id": 1563,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolvent",
									"nameLocation": "4109:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1556,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4143:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "4135:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4135:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4168:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "4160:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4160:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4125:58:16"
									},
									"returnParameters": {
										"id": 1562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1561,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4227:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "4222:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1560,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4222:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4221:16:16"
									},
									"scope": 1765,
									"src": "4100:138:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1564,
										"nodeType": "StructuredDocumentation",
										"src": "4244:289:16",
										"text": " @notice Check if account is solvent now\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "bb0d196e",
									"id": 1571,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolventNow",
									"nameLocation": "4547:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1566,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4584:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "4576:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4576:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4566:31:16"
									},
									"returnParameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4641:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "4636:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1568,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4636:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4635:16:16"
									},
									"scope": 1765,
									"src": "4538:114:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1572,
										"nodeType": "StructuredDocumentation",
										"src": "4658:277:16",
										"text": " @notice Get a list of agreements that is active for the account\n @dev An active agreement is one that has state for the account\n @param account Account to query\n @return activeAgreements List of accounts that have non-zero states for the account"
									},
									"functionSelector": "386fa221",
									"id": 1581,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountActiveAgreements",
									"nameLocation": "4949:26:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1574,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4984:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1581,
												"src": "4976:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1573,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4976:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4975:17:16"
									},
									"returnParameters": {
										"id": 1580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1579,
												"mutability": "mutable",
												"name": "activeAgreements",
												"nameLocation": "5054:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 1581,
												"src": "5029:41:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$766_$dyn_memory_ptr",
													"typeString": "contract ISuperAgreement[]"
												},
												"typeName": {
													"baseType": {
														"id": 1577,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1576,
															"name": "ISuperAgreement",
															"nameLocations": [
																"5029:15:16"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 766,
															"src": "5029:15:16"
														},
														"referencedDeclaration": 766,
														"src": "5029:15:16",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperAgreement_$766",
															"typeString": "contract ISuperAgreement"
														}
													},
													"id": 1578,
													"nodeType": "ArrayTypeName",
													"src": "5029:17:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$766_$dyn_storage_ptr",
														"typeString": "contract ISuperAgreement[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5028:43:16"
									},
									"scope": 1765,
									"src": "4940:132:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1582,
										"nodeType": "StructuredDocumentation",
										"src": "5278:110:16",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "12a6a3f8",
									"id": 1590,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAgreement",
									"nameLocation": "5402:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1584,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5435:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1590,
												"src": "5427:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1583,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5427:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5466:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1590,
												"src": "5447:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1585,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5447:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1586,
													"nodeType": "ArrayTypeName",
													"src": "5447:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5417:59:16"
									},
									"returnParameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5493:0:16"
									},
									"scope": 1765,
									"src": "5393:101:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1591,
										"nodeType": "StructuredDocumentation",
										"src": "5499:174:16",
										"text": " @dev Agreement created event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"eventSelector": "770ea40a13a4644573ed785e5c7116890709947918747febc5add46feb531e2d",
									"id": 1600,
									"name": "AgreementCreated",
									"nameLocation": "5684:16:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1593,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "5726:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "5710:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1592,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5710:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1595,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5758:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "5750:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1594,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1598,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5780:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1600,
												"src": "5770:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1596,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5770:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1597,
													"nodeType": "ArrayTypeName",
													"src": "5770:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5700:90:16"
									},
									"src": "5678:113:16"
								},
								{
									"documentation": {
										"id": 1601,
										"nodeType": "StructuredDocumentation",
										"src": "5797:184:16",
										"text": " @dev Get data of the agreement\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @return data Data of the agreement"
									},
									"functionSelector": "6c2d9f2f",
									"id": 1613,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementData",
									"nameLocation": "5995:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1603,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6029:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "6021:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1602,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6021:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1605,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6061:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "6053:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1604,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6053:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6078:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "6073:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1606,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6073:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6011:83:16"
									},
									"returnParameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1611,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6150:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "6133:21:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1609,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6133:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1610,
													"nodeType": "ArrayTypeName",
													"src": "6133:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6132:23:16"
									},
									"scope": 1765,
									"src": "5986:170:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1614,
										"nodeType": "StructuredDocumentation",
										"src": "6162:110:16",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "a1b2bf8b",
									"id": 1622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementData",
									"nameLocation": "6286:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1616,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6323:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "6315:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1615,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6315:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1619,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6354:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "6335:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1617,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6335:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1618,
													"nodeType": "ArrayTypeName",
													"src": "6335:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6305:59:16"
									},
									"returnParameters": {
										"id": 1621,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6381:0:16"
									},
									"scope": 1765,
									"src": "6277:105:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1623,
										"nodeType": "StructuredDocumentation",
										"src": "6387:174:16",
										"text": " @dev Agreement updated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"eventSelector": "0c4c547b3a4fcaa5be8353b3111472b124155bccc86de811d4a481c9e6e9faca",
									"id": 1632,
									"name": "AgreementUpdated",
									"nameLocation": "6572:16:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1625,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6614:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1632,
												"src": "6598:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6598:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1627,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6646:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1632,
												"src": "6638:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1626,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6638:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1630,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6668:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 1632,
												"src": "6658:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1628,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6658:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1629,
													"nodeType": "ArrayTypeName",
													"src": "6658:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6588:90:16"
									},
									"src": "6566:113:16"
								},
								{
									"documentation": {
										"id": 1633,
										"nodeType": "StructuredDocumentation",
										"src": "6685:73:16",
										"text": " @dev Close the agreement\n @param id Agreement ID"
									},
									"functionSelector": "27048397",
									"id": 1640,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminateAgreement",
									"nameLocation": "6772:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6808:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "6800:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1634,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6800:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6825:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "6820:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1636,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6820:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6790:51:16"
									},
									"returnParameters": {
										"id": 1639,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6858:0:16"
									},
									"scope": 1765,
									"src": "6763:96:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1641,
										"nodeType": "StructuredDocumentation",
										"src": "6864:143:16",
										"text": " @dev Agreement terminated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID"
									},
									"eventSelector": "71a63dc095de07aa5512ad57a7596a39516317e316981a1cd71000057be1537b",
									"id": 1647,
									"name": "AgreementTerminated",
									"nameLocation": "7018:19:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1643,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7063:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1647,
												"src": "7047:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7047:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1645,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "7095:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1647,
												"src": "7087:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1644,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7087:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7037:66:16"
									},
									"src": "7012:92:16"
								},
								{
									"documentation": {
										"id": 1648,
										"nodeType": "StructuredDocumentation",
										"src": "7110:199:16",
										"text": " @dev Update agreement state slot\n @param account Account to be updated\n @custom:note \n - To clear the storage out, provide zero-ed array of intended length"
									},
									"functionSelector": "090c415e",
									"id": 1658,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementStateSlot",
									"nameLocation": "7323:24:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1650,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7365:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "7357:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7357:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1652,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7390:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "7382:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7382:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1655,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "7425:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 1658,
												"src": "7406:27:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1653,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7406:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1654,
													"nodeType": "ArrayTypeName",
													"src": "7406:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7347:92:16"
									},
									"returnParameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7456:0:16"
									},
									"scope": 1765,
									"src": "7314:143:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1659,
										"nodeType": "StructuredDocumentation",
										"src": "7462:214:16",
										"text": " @dev Agreement account state updated event\n @param agreementClass Contract address of the agreement\n @param account Account updated\n @param slotId slot id of the agreement state"
									},
									"eventSelector": "30f416fa68fca014a0f334464c64b000ba53e99b6d2afdea9d5ca756372d5985",
									"id": 1667,
									"name": "AgreementStateUpdated",
									"nameLocation": "7687:21:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1661,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7734:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1667,
												"src": "7718:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1660,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7718:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1663,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7774:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1667,
												"src": "7758:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1662,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7758:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1665,
												"indexed": false,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7799:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1667,
												"src": "7791:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7791:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7708:103:16"
									},
									"src": "7681:131:16"
								},
								{
									"documentation": {
										"id": 1668,
										"nodeType": "StructuredDocumentation",
										"src": "7818:267:16",
										"text": " @dev Get data of the slot of the state of an agreement\n @param agreementClass Contract address of the agreement\n @param account Account to query\n @param slotId slot id of the state\n @param dataLength length of the state data"
									},
									"functionSelector": "4b61cc33",
									"id": 1682,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementStateSlot",
									"nameLocation": "8099:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1670,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "8138:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "8130:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8130:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8170:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "8162:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8162:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "8195:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "8187:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8187:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "8216:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "8211:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1675,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8211:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8120:112:16"
									},
									"returnParameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "8289:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 1682,
												"src": "8272:25:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1678,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "8272:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1679,
													"nodeType": "ArrayTypeName",
													"src": "8272:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8271:27:16"
									},
									"scope": 1765,
									"src": "8090:209:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1683,
										"nodeType": "StructuredDocumentation",
										"src": "8305:320:16",
										"text": " @notice Settle balance from an account by the agreement\n @dev The agreement needs to make sure that the balance delta is balanced afterwards\n @param account Account to query.\n @param delta Amount of balance delta to be settled\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "cf97256d",
									"id": 1690,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleBalance",
									"nameLocation": "8639:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1685,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8670:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "8662:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8662:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1687,
												"mutability": "mutable",
												"name": "delta",
												"nameLocation": "8694:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1690,
												"src": "8687:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1686,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8687:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8652:53:16"
									},
									"returnParameters": {
										"id": 1689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8722:0:16"
									},
									"scope": 1765,
									"src": "8630:93:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1691,
										"nodeType": "StructuredDocumentation",
										"src": "8729:1154:16",
										"text": " @dev Make liquidation payouts (v2)\n @param id Agreement ID\n @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n @param liquidatorAccount Address of the executor of the liquidation\n @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n @param targetAccount Account to be liquidated\n @param rewardAmount The amount the rewarded account will receive\n @param targetAccountBalanceDelta The delta amount the target account balance should change by\n @custom:note \n - If a bailout is required (bailoutAmount > 0)\n   - the actual reward (single deposit) goes to the executor,\n   - while the reward account becomes the bailout account\n   - total bailout include: bailout amount + reward amount\n   - the targetAccount will be bailed out\n - If a bailout is not required\n   - the targetAccount will pay the rewardAmount\n   - the liquidator (reward account in PIC period) will receive the rewardAmount\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "1863e809",
									"id": 1708,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "makeLiquidationPayoutsV2",
									"nameLocation": "9897:24:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "9944:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "9936:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1692,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9936:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1695,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "9969:19:16",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "9956:32:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1694,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9956:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1697,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "10006:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "9998:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1696,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9998:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "useDefaultRewardAccount",
												"nameLocation": "10038:23:16",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "10033:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1698,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10033:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1701,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "10079:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "10071:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10071:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1703,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "10110:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "10102:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10102:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1705,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "10139:25:16",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "10132:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1704,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "10132:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9926:244:16"
									},
									"returnParameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10179:0:16"
									},
									"scope": 1765,
									"src": "9888:292:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1709,
										"nodeType": "StructuredDocumentation",
										"src": "10185:1512:16",
										"text": " @dev Agreement liquidation event v2 (including agent account)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param liquidatorAccount Address of the executor of the liquidation\n @param targetAccount Account of the stream sender\n @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n @param rewardAmount The amount the reward recipient account balance should change by\n @param targetAccountBalanceDelta The amount the sender account balance should change by\n @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n @custom:note \n Reward account rule:\n - if the agreement is liquidated during the PIC period\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n   - the targetAccount will pay for the rewardAmount\n - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n   - the targetAccount will pay for the rewardAmount\n - if the targetAccount is insolvent\n   - the liquidatorAccount will get the rewardAmount (single deposit)\n   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n   - the targetAccount will receive the bailoutAmount"
									},
									"eventSelector": "b8381a3ce157650e06186e3e8f4dd4dc29236f2688b6eed1893d0a60d7c6386f",
									"id": 1727,
									"name": "AgreementLiquidatedV2",
									"nameLocation": "11708:21:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1711,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "11755:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "11739:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1710,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11739:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1713,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "11787:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "11779:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1712,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11779:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1715,
												"indexed": true,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "11815:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "11799:33:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1714,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11799:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1717,
												"indexed": true,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "11858:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "11842:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1716,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11842:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1719,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmountReceiver",
												"nameLocation": "11889:20:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "11881:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11881:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1721,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "11927:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "11919:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1720,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11919:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1723,
												"indexed": false,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "11956:25:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "11949:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1722,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "11949:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1725,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "11997:19:16",
												"nodeType": "VariableDeclaration",
												"scope": 1727,
												"src": "11991:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1724,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11991:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11729:293:16"
									},
									"src": "11702:321:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1728,
										"nodeType": "StructuredDocumentation",
										"src": "12835:435:16",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param rewardAccount Account that collect the reward\n @param rewardAmount Amount of liquidation reward\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"eventSelector": "8505c3d8f1f184f032cf0bc4cd80ee61c8b9d94f8907c3281bf0101a2610fe80",
									"id": 1740,
									"name": "AgreementLiquidated",
									"nameLocation": "13281:19:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1730,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "13326:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "13310:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13310:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1732,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "13358:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "13350:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1731,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13350:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1734,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "13386:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "13370:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1733,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13370:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1736,
												"indexed": true,
												"mutability": "mutable",
												"name": "rewardAccount",
												"nameLocation": "13426:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "13410:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1735,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13410:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1738,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "13457:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "13449:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13449:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13300:175:16"
									},
									"src": "13275:201:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1741,
										"nodeType": "StructuredDocumentation",
										"src": "13482:276:16",
										"text": " @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n @param bailoutAccount Account that bailout the penalty account\n @param bailoutAmount Amount of account bailout\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"eventSelector": "d6c9a04afc81e8c614310bbee6c9e84f5abe15b82038bf8347014ce0852e6ffd",
									"id": 1747,
									"name": "Bailout",
									"nameLocation": "13769:7:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1743,
												"indexed": true,
												"mutability": "mutable",
												"name": "bailoutAccount",
												"nameLocation": "13802:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1747,
												"src": "13786:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1742,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13786:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1745,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "13834:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 1747,
												"src": "13826:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1744,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13826:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13776:77:16"
									},
									"src": "13763:91:16"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1748,
										"nodeType": "StructuredDocumentation",
										"src": "13860:1082:16",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n @param liquidatorAccount Account of the agent that performed the liquidation.\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param bondAccount Account that collect the reward or bailout accounts\n @param rewardAmount Amount of liquidation reward\n @param bailoutAmount Amount of liquidation bailouot\n @custom:deprecated Use AgreementLiquidatedV2 instead\n @custom:note \n Reward account rule:\n - if bailout is equal to 0, then\n   - the bondAccount will get the rewardAmount,\n   - the penaltyAccount will pay for the rewardAmount.\n - if bailout is larger than 0, then\n   - the liquidatorAccount will get the rewardAmouont,\n   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount."
									},
									"eventSelector": "5f22b60e58b1d6de858bc27c48d5a4653e052da99e083c1d88bb8c58e1abc8ef",
									"id": 1764,
									"name": "AgreementLiquidatedBy",
									"nameLocation": "14953:21:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1750,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "14992:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "14984:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1749,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14984:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1752,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "15035:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "15019:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1751,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15019:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1754,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "15067:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "15059:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1753,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15059:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1756,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "15095:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "15079:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15079:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1758,
												"indexed": true,
												"mutability": "mutable",
												"name": "bondAccount",
												"nameLocation": "15135:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "15119:27:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15119:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1760,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "15164:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "15156:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15156:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1762,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "15194:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "15186:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15186:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14974:239:16"
									},
									"src": "14947:267:16"
								}
							],
							"scope": 1766,
							"src": "185:15031:16",
							"usedErrors": [
								1485,
								1487,
								1489,
								1491,
								1493,
								1495
							],
							"usedEvents": [
								1600,
								1632,
								1647,
								1667,
								1727,
								1740,
								1747,
								1764
							]
						}
					],
					"src": "32:15185:16"
				},
				"id": 16
			},
			"PureSuperToken.sol": {
				"ast": {
					"absolutePath": "PureSuperToken.sol",
					"exportedSymbols": {
						"PureSuperToken": [
							1800
						],
						"SuperTokenBase": [
							1968
						]
					},
					"id": 1801,
					"license": "AGPLv3",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1767,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:17"
						},
						{
							"absolutePath": "base/SuperTokenBase.sol",
							"file": "./base/SuperTokenBase.sol",
							"id": 1769,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1801,
							"sourceUnit": 1969,
							"src": "60:57:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1768,
										"name": "SuperTokenBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1968,
										"src": "68:14:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1771,
										"name": "SuperTokenBase",
										"nameLocations": [
											"304:14:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1968,
										"src": "304:14:17"
									},
									"id": 1772,
									"nodeType": "InheritanceSpecifier",
									"src": "304:14:17"
								}
							],
							"canonicalName": "PureSuperToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1770,
								"nodeType": "StructuredDocumentation",
								"src": "119:158:17",
								"text": "@title Minimal Pure Super Token\n @author jtriley.eth\n @notice Pre-minted supply. This is includes no custom logic. Used in `PureSuperTokenDeployer`"
							},
							"fullyImplemented": true,
							"id": 1800,
							"linearizedBaseContracts": [
								1800,
								1968,
								2032,
								35,
								1976
							],
							"name": "PureSuperToken",
							"nameLocation": "286:14:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1798,
										"nodeType": "Block",
										"src": "807:95:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1787,
															"name": "factory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1775,
															"src": "829:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1788,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1777,
															"src": "838:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1789,
															"name": "symbol",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1779,
															"src": "844:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1786,
														"name": "_initialize",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1856,
														"src": "817:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (address,string memory,string memory)"
														}
													},
													"id": 1790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:34:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1791,
												"nodeType": "ExpressionStatement",
												"src": "817:34:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1793,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1781,
															"src": "867:8:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1794,
															"name": "initialSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1783,
															"src": "877:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1795,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "892:2:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1792,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1895,
														"src": "861:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 1796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "861:34:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1797,
												"nodeType": "ExpressionStatement",
												"src": "861:34:17"
											}
										]
									},
									"documentation": {
										"id": 1773,
										"nodeType": "StructuredDocumentation",
										"src": "323:304:17",
										"text": "@dev Upgrades the super token with the factory, then initializes.\n @param factory super token factory for initialization\n @param name super token name\n @param symbol super token symbol\n @param receiver Receiver of pre-mint\n @param initialSupply Initial token supply to pre-mint"
									},
									"functionSelector": "75b30be6",
									"id": 1799,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "641:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1775,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "669:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "661:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1774,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1777,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "700:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "686:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1776,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "686:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1779,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "728:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "714:20:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1778,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "714:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1781,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "752:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "744:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "744:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1783,
												"mutability": "mutable",
												"name": "initialSupply",
												"nameLocation": "778:13:17",
												"nodeType": "VariableDeclaration",
												"scope": 1799,
												"src": "770:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1782,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "770:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:146:17"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "807:0:17"
									},
									"scope": 1800,
									"src": "632:270:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1801,
							"src": "277:628:17",
							"usedErrors": [
								1986,
								1989
							],
							"usedEvents": []
						}
					],
					"src": "35:871:17"
				},
				"id": 17
			},
			"base/SuperTokenBase.sol": {
				"ast": {
					"absolutePath": "base/SuperTokenBase.sol",
					"exportedSymbols": {
						"IERC20": [
							113
						],
						"ISuperToken": [
							1308
						],
						"ISuperTokenFactory": [
							1478
						],
						"SuperTokenBase": [
							1968
						],
						"SuperTokenStorage": [
							1976
						],
						"UUPSProxy": [
							2032
						]
					},
					"id": 1969,
					"license": "AGPLv3",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1802,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:18"
						},
						{
							"absolutePath": "base/SuperTokenStorage.sol",
							"file": "../base/SuperTokenStorage.sol",
							"id": 1804,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1969,
							"sourceUnit": 1977,
							"src": "60:64:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1803,
										"name": "SuperTokenStorage",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1976,
										"src": "68:17:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "base/UUPSProxy.sol",
							"file": "../base/UUPSProxy.sol",
							"id": 1806,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1969,
							"sourceUnit": 2033,
							"src": "125:48:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1805,
										"name": "UUPSProxy",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2032,
										"src": "133:9:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1808,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1969,
							"sourceUnit": 114,
							"src": "175:70:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1807,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 113,
										"src": "183:6:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"id": 1810,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1969,
							"sourceUnit": 1309,
							"src": "246:115:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1809,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1308,
										"src": "254:11:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
							"id": 1812,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1969,
							"sourceUnit": 1479,
							"src": "362:129:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1811,
										"name": "ISuperTokenFactory",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1478,
										"src": "370:18:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1814,
										"name": "SuperTokenStorage",
										"nameLocations": [
											"786:17:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1976,
										"src": "786:17:18"
									},
									"id": 1815,
									"nodeType": "InheritanceSpecifier",
									"src": "786:17:18"
								},
								{
									"baseName": {
										"id": 1816,
										"name": "UUPSProxy",
										"nameLocations": [
											"805:9:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2032,
										"src": "805:9:18"
									},
									"id": 1817,
									"nodeType": "InheritanceSpecifier",
									"src": "805:9:18"
								}
							],
							"canonicalName": "SuperTokenBase",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1813,
								"nodeType": "StructuredDocumentation",
								"src": "493:257:18",
								"text": "@title Abstract contract containing a thin layer of abstraction for aux logic.\n @author jtriley.eth\n @dev The initial supply may be zero, in the event the token is mintable.\n Inheriting contracts MUST have an initializer calling this function!"
							},
							"fullyImplemented": true,
							"id": 1968,
							"linearizedBaseContracts": [
								1968,
								2032,
								35,
								1976
							],
							"name": "SuperTokenBase",
							"nameLocation": "768:14:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1855,
										"nodeType": "Block",
										"src": "1110:156:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1833,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1177:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																		"typeString": "contract SuperTokenBase"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																		"typeString": "contract SuperTokenBase"
																	}
																],
																"id": 1832,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1169:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1831,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1169:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 1834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1169:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1828,
																	"name": "factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1820,
																	"src": "1133:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1827,
																"name": "ISuperTokenFactory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1478,
																"src": "1114:18:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperTokenFactory_$1478_$",
																	"typeString": "type(contract ISuperTokenFactory)"
																}
															},
															"id": 1829,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1114:27:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperTokenFactory_$1478",
																"typeString": "contract ISuperTokenFactory"
															}
														},
														"id": 1830,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1142:26:18",
														"memberName": "initializeCustomSuperToken",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1459,
														"src": "1114:54:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address) external"
														}
													},
													"id": 1835,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1114:69:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1836,
												"nodeType": "ExpressionStatement",
												"src": "1114:69:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 1847,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1240:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1846,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1232:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1845,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1232:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1848,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1232:10:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1844,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "1225:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$113_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1849,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1225:18:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$113",
																"typeString": "contract IERC20"
															}
														},
														{
															"hexValue": "3138",
															"id": 1850,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1245:2:18",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_18_by_1",
																"typeString": "int_const 18"
															},
															"value": "18"
														},
														{
															"id": 1851,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1822,
															"src": "1249:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1852,
															"name": "symbol",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1824,
															"src": "1255:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$113",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_rational_18_by_1",
																"typeString": "int_const 18"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1840,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "1207:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		],
																		"id": 1839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1199:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1838,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1199:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1841,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1199:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1837,
																"name": "ISuperToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "1187:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperToken_$1308_$",
																	"typeString": "type(contract ISuperToken)"
																}
															},
															"id": 1842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1187:26:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperToken_$1308",
																"typeString": "contract ISuperToken"
															}
														},
														"id": 1843,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1214:10:18",
														"memberName": "initialize",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 831,
														"src": "1187:37:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_contract$_IERC20_$113_$_t_uint8_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,uint8,string memory,string memory) external"
														}
													},
													"id": 1853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1187:75:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1854,
												"nodeType": "ExpressionStatement",
												"src": "1187:75:18"
											}
										]
									},
									"documentation": {
										"id": 1818,
										"nodeType": "StructuredDocumentation",
										"src": "819:200:18",
										"text": "@dev Upgrades the super token with the factory, then initializes.\n @param factory super token factory for initialization\n @param name super token name\n @param symbol super token symbol"
									},
									"id": 1856,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initialize",
									"nameLocation": "1030:11:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1820,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "1050:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1856,
												"src": "1042:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1819,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1822,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1073:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 1856,
												"src": "1059:18:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1821,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1059:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1824,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "1093:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 1856,
												"src": "1079:20:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1823,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1079:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:59:18"
									},
									"returnParameters": {
										"id": 1826,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1110:0:18"
									},
									"scope": 1968,
									"src": "1021:245:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1871,
										"nodeType": "Block",
										"src": "1382:55:18",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1865,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "1413:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		],
																		"id": 1864,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1405:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1863,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1405:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1866,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1405:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1862,
																"name": "ISuperToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "1393:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperToken_$1308_$",
																	"typeString": "type(contract ISuperToken)"
																}
															},
															"id": 1867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1393:26:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperToken_$1308",
																"typeString": "contract ISuperToken"
															}
														},
														"id": 1868,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1420:11:18",
														"memberName": "totalSupply",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 923,
														"src": "1393:38:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
															"typeString": "function () view external returns (uint256)"
														}
													},
													"id": 1869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1393:40:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1861,
												"id": 1870,
												"nodeType": "Return",
												"src": "1386:47:18"
											}
										]
									},
									"documentation": {
										"id": 1857,
										"nodeType": "StructuredDocumentation",
										"src": "1269:53:18",
										"text": "@dev Gets totalSupply\n @return t total supply"
									},
									"id": 1872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_totalSupply",
									"nameLocation": "1333:12:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1858,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1345:2:18"
									},
									"returnParameters": {
										"id": 1861,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "t",
												"nameLocation": "1379:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "1371:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1859,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1371:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1370:11:18"
									},
									"scope": 1968,
									"src": "1324:113:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1894,
										"nodeType": "Block",
										"src": "1756:70:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1889,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1875,
															"src": "1796:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1890,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1877,
															"src": "1805:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1891,
															"name": "userData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1879,
															"src": "1813:8:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1885,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "1780:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		],
																		"id": 1884,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1772:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1883,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1772:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1772:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1882,
																"name": "ISuperToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "1760:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperToken_$1308_$",
																	"typeString": "type(contract ISuperToken)"
																}
															},
															"id": 1887,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1760:26:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperToken_$1308",
																"typeString": "contract ISuperToken"
															}
														},
														"id": 1888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1787:8:18",
														"memberName": "selfMint",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1111,
														"src": "1760:35:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory) external"
														}
													},
													"id": 1892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1760:62:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1893,
												"nodeType": "ExpressionStatement",
												"src": "1760:62:18"
											}
										]
									},
									"documentation": {
										"id": 1873,
										"nodeType": "StructuredDocumentation",
										"src": "1440:234:18",
										"text": "@dev Internal mint, calling functions should perform important checks!\n @param account Address receiving minted tokens\n @param amount Amount of tokens minted\n @param userData Optional user data for ERC777 send callback"
									},
									"id": 1895,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "1685:5:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1699:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "1691:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1874,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1691:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1716:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "1708:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1879,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "1737:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "1724:21:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1878,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1724:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1690:56:18"
									},
									"returnParameters": {
										"id": 1881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1756:0:18"
									},
									"scope": 1968,
									"src": "1676:150:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1917,
										"nodeType": "Block",
										"src": "2132:67:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1912,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1898,
															"src": "2172:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1913,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1900,
															"src": "2178:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1914,
															"name": "userData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1902,
															"src": "2186:8:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1908,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2156:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		],
																		"id": 1907,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2148:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1906,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2148:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1909,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2148:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1905,
																"name": "ISuperToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "2136:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperToken_$1308_$",
																	"typeString": "type(contract ISuperToken)"
																}
															},
															"id": 1910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2136:26:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperToken_$1308",
																"typeString": "contract ISuperToken"
															}
														},
														"id": 1911,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2163:8:18",
														"memberName": "selfBurn",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1121,
														"src": "2136:35:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory) external"
														}
													},
													"id": 1915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2136:59:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1916,
												"nodeType": "ExpressionStatement",
												"src": "2136:59:18"
											}
										]
									},
									"documentation": {
										"id": 1896,
										"nodeType": "StructuredDocumentation",
										"src": "1829:224:18",
										"text": "@dev Internal burn, calling functions should perform important checks!\n @param from Address from which to burn tokens\n @param amount Amount to burn\n @param userData Optional user data for ERC777 send callback"
									},
									"id": 1918,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "2064:5:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1898,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2078:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "2070:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2070:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1900,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2092:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "2084:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1899,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "2113:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "2100:21:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1901,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2100:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2069:53:18"
									},
									"returnParameters": {
										"id": 1904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2132:0:18"
									},
									"scope": 1968,
									"src": "2055:144:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1940,
										"nodeType": "Block",
										"src": "2486:75:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1935,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1921,
															"src": "2532:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1936,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1923,
															"src": "2541:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1937,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1925,
															"src": "2550:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1931,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2510:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		],
																		"id": 1930,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2502:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1929,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2502:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2502:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1928,
																"name": "ISuperToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "2490:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperToken_$1308_$",
																	"typeString": "type(contract ISuperToken)"
																}
															},
															"id": 1933,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2490:26:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperToken_$1308",
																"typeString": "contract ISuperToken"
															}
														},
														"id": 1934,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2517:14:18",
														"memberName": "selfApproveFor",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1143,
														"src": "2490:41:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256) external"
														}
													},
													"id": 1938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2490:67:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1939,
												"nodeType": "ExpressionStatement",
												"src": "2490:67:18"
											}
										]
									},
									"documentation": {
										"id": 1919,
										"nodeType": "StructuredDocumentation",
										"src": "2202:205:18",
										"text": "@dev Internal approve, calling functions should perform important checks!\n @param account Address of approving party\n @param spender Address of spending party\n @param amount Approval amount"
									},
									"id": 1941,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "2418:8:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1921,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2435:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1941,
												"src": "2427:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2427:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2452:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1941,
												"src": "2444:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2444:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1925,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2469:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 1941,
												"src": "2461:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2426:50:18"
									},
									"returnParameters": {
										"id": 1927,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2486:0:18"
									},
									"scope": 1968,
									"src": "2409:152:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1966,
										"nodeType": "Block",
										"src": "2969:87:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1960,
															"name": "holder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1944,
															"src": "3017:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1961,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1946,
															"src": "3025:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1962,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1948,
															"src": "3034:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1963,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1950,
															"src": "3045:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1956,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2993:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SuperTokenBase_$1968",
																				"typeString": "contract SuperTokenBase"
																			}
																		],
																		"id": 1955,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2985:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1954,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2985:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2985:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1953,
																"name": "ISuperToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "2973:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperToken_$1308_$",
																	"typeString": "type(contract ISuperToken)"
																}
															},
															"id": 1958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2973:26:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperToken_$1308",
																"typeString": "contract ISuperToken"
															}
														},
														"id": 1959,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3000:16:18",
														"memberName": "selfTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1133,
														"src": "2973:43:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256) external"
														}
													},
													"id": 1964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2973:79:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1965,
												"nodeType": "ExpressionStatement",
												"src": "2973:79:18"
											}
										]
									},
									"documentation": {
										"id": 1942,
										"nodeType": "StructuredDocumentation",
										"src": "2564:292:18",
										"text": "@dev Internal transferFrom, calling functions should perform important checks!\n @param holder Owner of the tranfserred tokens\n @param spender Address of spending party (approved/operator)\n @param recipient Address of recipient party\n @param amount Amount to be tranfserred"
									},
									"id": 1967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferFrom",
									"nameLocation": "2867:13:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1944,
												"mutability": "mutable",
												"name": "holder",
												"nameLocation": "2892:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "2884:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1943,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2884:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1946,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2910:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "2902:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1945,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2902:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1948,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2929:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "2921:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1947,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2921:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1950,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2950:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "2942:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2942:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2880:79:18"
									},
									"returnParameters": {
										"id": 1952,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2969:0:18"
									},
									"scope": 1968,
									"src": "2858:198:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1969,
							"src": "750:2308:18",
							"usedErrors": [
								1986,
								1989
							],
							"usedEvents": []
						}
					],
					"src": "35:3024:18"
				},
				"id": 18
			},
			"base/SuperTokenStorage.sol": {
				"ast": {
					"absolutePath": "base/SuperTokenStorage.sol",
					"exportedSymbols": {
						"SuperTokenStorage": [
							1976
						]
					},
					"id": 1977,
					"license": "AGPLv3",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1970,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:19"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "SuperTokenStorage",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1971,
								"nodeType": "StructuredDocumentation",
								"src": "60:348:19",
								"text": "@title Abstract Storage Contract to pad the first 32 slots of storage\n @author Superfluid\n @dev MUST be the FIRST contract inherited to pad the first 32 slots. The slots are padded to\n ensure the implementation contract (SuperToken.sol) does not override any auxiliary state\n variables. For more info see `./docs/StorageLayout.md`."
							},
							"fullyImplemented": true,
							"id": 1976,
							"linearizedBaseContracts": [
								1976
							],
							"name": "SuperTokenStorage",
							"nameLocation": "426:17:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1975,
									"mutability": "mutable",
									"name": "_storagePaddings",
									"nameLocation": "471:16:19",
									"nodeType": "VariableDeclaration",
									"scope": 1976,
									"src": "450:37:19",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$32_storage",
										"typeString": "uint256[32]"
									},
									"typeName": {
										"baseType": {
											"id": 1972,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "450:7:19",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1974,
										"length": {
											"hexValue": "3332",
											"id": 1973,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "458:2:19",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_32_by_1",
												"typeString": "int_const 32"
											},
											"value": "32"
										},
										"nodeType": "ArrayTypeName",
										"src": "450:11:19",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$32_storage_ptr",
											"typeString": "uint256[32]"
										}
									},
									"visibility": "internal"
								}
							],
							"scope": 1977,
							"src": "408:82:19",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "35:456:19"
				},
				"id": 19
			},
			"base/UUPSProxy.sol": {
				"ast": {
					"absolutePath": "base/UUPSProxy.sol",
					"exportedSymbols": {
						"Proxy": [
							35
						],
						"UUPSProxy": [
							2032
						]
					},
					"id": 2033,
					"license": "AGPLv3",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1978,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:20"
						},
						{
							"absolutePath": "@openzeppelin/contracts/proxy/Proxy.sol",
							"file": "@openzeppelin/contracts/proxy/Proxy.sol",
							"id": 1980,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2033,
							"sourceUnit": 36,
							"src": "60:62:20",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1979,
										"name": "Proxy",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 35,
										"src": "68:5:20",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1982,
										"name": "Proxy",
										"nameLocations": [
											"456:5:20"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 35,
										"src": "456:5:20"
									},
									"id": 1983,
									"nodeType": "InheritanceSpecifier",
									"src": "456:5:20"
								}
							],
							"canonicalName": "UUPSProxy",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1981,
								"nodeType": "StructuredDocumentation",
								"src": "124:310:20",
								"text": "@title UUPS Proxy implementation contract\n @author jtriley.eth\n @notice Stores the logic contract's address at the _IMPLEMENTATION_SLOT\n @dev `initializeProxy(address)` is called by the Super Token Factory\n The call to the factory should be in the same transaction to avoid being\n front run"
							},
							"fullyImplemented": true,
							"id": 2032,
							"linearizedBaseContracts": [
								2032,
								35
							],
							"name": "UUPSProxy",
							"nameLocation": "443:9:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1984,
										"nodeType": "StructuredDocumentation",
										"src": "465:58:20",
										"text": "@notice Thrown when the logic contract address is zero"
									},
									"errorSelector": "d92e233d",
									"id": 1986,
									"name": "ZeroAddress",
									"nameLocation": "531:11:20",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1985,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "542:2:20"
									},
									"src": "525:20:20"
								},
								{
									"documentation": {
										"id": 1987,
										"nodeType": "StructuredDocumentation",
										"src": "548:55:20",
										"text": "@notice Thrown when the logic contract has been set"
									},
									"errorSelector": "5daa87a0",
									"id": 1989,
									"name": "Initialized",
									"nameLocation": "611:11:20",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "622:2:20"
									},
									"src": "605:20:20"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1990,
										"nodeType": "StructuredDocumentation",
										"src": "628:128:20",
										"text": "@notice Precomputed from the following for gas savings\n bytes32(uint256(keccak256(\"eip1967.proxy.implementation\") - 1));"
									},
									"id": 1993,
									"mutability": "constant",
									"name": "_IMPLEMENTATION_SLOT",
									"nameLocation": "784:20:20",
									"nodeType": "VariableDeclaration",
									"scope": 2032,
									"src": "758:117:20",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1991,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "758:7:20",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263",
										"id": 1992,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "809:66:20",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1",
											"typeString": "int_const 2444...(69 digits omitted)...5612"
										},
										"value": "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2021,
										"nodeType": "Block",
										"src": "1107:188:20",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1999,
														"name": "initialAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1996,
														"src": "1115:14:20",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2002,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1141:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2001,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1133:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2000,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1133:7:20",
																"typeDescriptions": {}
															}
														},
														"id": 2003,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1133:10:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1115:28:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2008,
												"nodeType": "IfStatement",
												"src": "1111:54:20",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2005,
															"name": "ZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1986,
															"src": "1152:11:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2006,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1152:13:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2007,
													"nodeType": "RevertStatement",
													"src": "1145:20:20"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2009,
															"name": "_implementation",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																2031
															],
															"referencedDeclaration": 2031,
															"src": "1173:15:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 2010,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1173:17:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2013,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1202:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2012,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1194:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2011,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1194:7:20",
																"typeDescriptions": {}
															}
														},
														"id": 2014,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1194:10:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1173:31:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2019,
												"nodeType": "IfStatement",
												"src": "1169:57:20",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2016,
															"name": "Initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1989,
															"src": "1213:11:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2017,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1213:13:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2018,
													"nodeType": "RevertStatement",
													"src": "1206:20:20"
												}
											},
											{
												"AST": {
													"nativeSrc": "1239:53:20",
													"nodeType": "YulBlock",
													"src": "1239:53:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "_IMPLEMENTATION_SLOT",
																		"nativeSrc": "1251:20:20",
																		"nodeType": "YulIdentifier",
																		"src": "1251:20:20"
																	},
																	{
																		"name": "initialAddress",
																		"nativeSrc": "1273:14:20",
																		"nodeType": "YulIdentifier",
																		"src": "1273:14:20"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "1244:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1244:6:20"
																},
																"nativeSrc": "1244:44:20",
																"nodeType": "YulFunctionCall",
																"src": "1244:44:20"
															},
															"nativeSrc": "1244:44:20",
															"nodeType": "YulExpressionStatement",
															"src": "1244:44:20"
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1993,
														"isOffset": false,
														"isSlot": false,
														"src": "1251:20:20",
														"valueSize": 1
													},
													{
														"declaration": 1996,
														"isOffset": false,
														"isSlot": false,
														"src": "1273:14:20",
														"valueSize": 1
													}
												],
												"id": 2020,
												"nodeType": "InlineAssembly",
												"src": "1230:62:20"
											}
										]
									},
									"documentation": {
										"id": 1994,
										"nodeType": "StructuredDocumentation",
										"src": "879:168:20",
										"text": "@notice Stores the logic contract address only once.\n @dev Called by the SuperTokenFactory contract on upgrade\n @param initialAddress logic contract address"
									},
									"functionSelector": "4a0687ef",
									"id": 2022,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "initializeProxy",
									"nameLocation": "1058:15:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "initialAddress",
												"nameLocation": "1082:14:20",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "1074:22:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1995,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1074:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1073:24:20"
									},
									"returnParameters": {
										"id": 1998,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1107:0:20"
									},
									"scope": 2032,
									"src": "1049:246:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										16
									],
									"body": {
										"id": 2030,
										"nodeType": "Block",
										"src": "1487:60:20",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1500:44:20",
													"nodeType": "YulBlock",
													"src": "1500:44:20",
													"statements": [
														{
															"nativeSrc": "1505:35:20",
															"nodeType": "YulAssignment",
															"src": "1505:35:20",
															"value": {
																"arguments": [
																	{
																		"name": "_IMPLEMENTATION_SLOT",
																		"nativeSrc": "1519:20:20",
																		"nodeType": "YulIdentifier",
																		"src": "1519:20:20"
																	}
																],
																"functionName": {
																	"name": "sload",
																	"nativeSrc": "1513:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1513:5:20"
																},
																"nativeSrc": "1513:27:20",
																"nodeType": "YulFunctionCall",
																"src": "1513:27:20"
															},
															"variableNames": [
																{
																	"name": "impl",
																	"nativeSrc": "1505:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1505:4:20"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1993,
														"isOffset": false,
														"isSlot": false,
														"src": "1519:20:20",
														"valueSize": 1
													},
													{
														"declaration": 2027,
														"isOffset": false,
														"isSlot": false,
														"src": "1505:4:20",
														"valueSize": 1
													}
												],
												"id": 2029,
												"nodeType": "InlineAssembly",
												"src": "1491:53:20"
											}
										]
									},
									"documentation": {
										"id": 2023,
										"nodeType": "StructuredDocumentation",
										"src": "1298:95:20",
										"text": "@notice Reads logic contract from precomputed slot\n @return impl Logic contract address"
									},
									"id": 2031,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_implementation",
									"nameLocation": "1404:15:20",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2025,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1452:8:20"
									},
									"parameters": {
										"id": 2024,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1419:2:20"
									},
									"returnParameters": {
										"id": 2028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "impl",
												"nameLocation": "1480:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "1472:12:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2026,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1472:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:14:20"
									},
									"scope": 2032,
									"src": "1395:152:20",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2033,
							"src": "434:1115:20",
							"usedErrors": [
								1986,
								1989
							],
							"usedEvents": []
						}
					],
					"src": "35:1515:20"
				},
				"id": 20
			}
		}
	}
}